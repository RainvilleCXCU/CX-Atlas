/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n\t  fragment AlertsFragment on CXAlert {\n        displayPages\n        databaseId\n        ctaButtonText\n        ctaButtonUrl\n        name\n        message\n\t  }\n\t": types.AlertsFragmentFragmentDoc,
    "\n      fragment FooterFragment on FooterSettings {\n\t\tfooterAppIcons\n\t\tfooterSocialIcons\n\t  }\n    ": types.FooterFragmentFragmentDoc,
    "\n      fragment NavigationMenuItemFragment on MenuItem {\n        id\n        databaseId\n        uri\n        label\n        cssClasses\n        parentDatabaseId\n        childItems {\n            nodes{\n                id\n                databaseId\n                uri\n                label\n                cssClasses\n                parentDatabaseId\n                childItems {\n                    nodes{\n                        id\n                        databaseId\n                        uri\n                        label\n                        cssClasses\n                        parentDatabaseId\n                    }\n                }\n            }\n        }\n      }\n    ": types.NavigationMenuItemFragmentFragmentDoc,
    "\n  fragment ThirdPartySettingsFragment on ThirdPartySettings {\n    datatracEnabled\n    datatracId\n    gtmEnabled\n    gtmId\n    hotjarEnabled\n    hotjarId\n    personyzeDomains\n    personyzeEnabled\n    personyzeId\n    qualtricsEnabled\n    qualtricsId\n    salesforceEnabled\n    salesforceId\n    siteimproveEnabled\n    siteimproveId\n    spectrumEnabled\n    spectrumId\n    thirdPartySettings\n    wpengineAccountId\n    wpengineEnvId\n    wpengineToken\n  }\n": types.ThirdPartySettingsFragmentFragmentDoc,
    "\n  fragment BlogInfoFragment on GeneralSettings {\n    title\n    description\n    logo\n  }\n": types.BlogInfoFragmentFragmentDoc,
    "\n    fragment LocationPageFragment on Location {\n        id\n        slug\n        content(format: RENDERED)\n        title(format: RENDERED)\n        locationId\n        details {\n            zip\n            state\n            specialMessageType\n            specialMessageTitle\n            specialMessage\n            specialHoursHTML\n            lobbyHoursHTML\n            services\n            lng\n            lat\n            driveThruHoursHTML\n            contact\n            city\n            address\n        }\n    }": types.LocationPageFragmentFragmentDoc,
    "\n  fragment LocationSettingsFragment on LocationSettings {\n    apiBrowserKey\n    mapType\n    zoomLevel\n    urlLabel\n    emailLabel\n    phoneLabel\n    streetview\n    startLatlng\n    startMarker\n    storeMarker\n    typeControl\n    scrollwheel\n    searchRadius\n    controlPosition\n    autoZoomLevel\n    markerIconProps\n    distanceUnit\n  }\n": types.LocationSettingsFragmentFragmentDoc,
    "\n\t\n\t\n\t\n\t\n\tquery GetLocationPageData(\n\t  $headerLocation: MenuLocationEnum\n\t  $footerLocation: MenuLocationEnum\n\t) {\n\t  generalSettings {\n\t\t...BlogInfoFragment\n\t  }\n\t  headerSettings {\n\t\theaderUtilities\n\t  }\n\t  footerSettings {\n\t\tfooterUtilities\n\t\tfooterAppIcons\n\t\tfooterSocialIcons\n\t  }\n\t  thirdPartySettings {\n\t\t...ThirdPartySettingsFragment\n\t  }\n\n\t  locationSettings {\n\t\tautoLocate\n\t\tstartLatlng\n\t\tsearchRadius\n\t\tapiBrowserKey\n\t\tmapType\n\t\tzoomLevel\n\t\turlLabel\n\t\tstreetview\n\t\tstartLatlng\n\t\ttypeControl\n\t\tscrollwheel\n\t\tcontrolPosition\n\t\tmarkerIconProps\n\t\tstartMarker\n\t\tstoreMarker\n\t  }\n\t\twidgetSettings {\n\t\t\tlocationsSearch\n\t\t}\n  \n\t  cxAlerts: cXAlerts {\n\t\t  edges {\n\t\t\tnode{\n\t\t\t  ...AlertsFragment\n\t\t\t}\n\t\t  }\n\t  }\n\t  footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n\t\tnodes {\n\t\t  ...NavigationMenuItemFragment\n\t\t}\n\t  }\n\t  headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n\t\tnodes {\n\t\t  ...NavigationMenuItemFragment\n\t\t}\n\t  }\n\t}\n  ": types.GetLocationPageDataDocument,
    "\n  \n  \n  \n  \n  query GetSearchData(\n    $searchTerm: String!\n    $offset: String!\n    $postsPerPage: String!\n  ) {\n    searchwp(offset: $offset, postsPerPage: $postsPerPage, terms: $searchTerm) {\n      results {\n        id\n        uri\n        excerpt\n        categories {\n          nodes {\n            name\n            uri\n          }\n        }\n        featuredImage {\n          node {\n            id\n            sourceUrl\n            altText\n            mediaDetails {\n              width\n              height\n            }\n          }\n        }\n      }\n      total\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: PRIMARY }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: FOOTER }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n": types.GetSearchDataDocument,
    "\n  \n  \n  query GetPost(\n    $databaseId: ID!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n    $asPreview: Boolean = false\n  ) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      date\n      author {\n        node {\n          name\n        }\n      }\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n": types.GetPostDocument,
    "\n  \n  \n  \n  \n\n\n  query GetPosts(\n    $page: Int\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n  ) {\n    posts(where: {offsetPagination: {offset: $page, size: 5}}) {\n        pageInfo {\n            offsetPagination {\n                total\n            }\n        }\n        nodes {\n            id\n            uri\n            excerpt\n            categories {\n                nodes {\n                    name\n                    uri\n                }\n            }\n            featuredImage {\n                node {\n                    id\n                    sourceUrl\n                    altText\n                    mediaDetails {\n                        width\n                        height\n                    }\n                }\n            }\n        }\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    widgetSettings {\n        blogtop\n        blogSidebar\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n": types.GetPostsDocument,
    "\n  \n  \n  \n  \n  query GetCategoryPage(\n    $uri: String!\n    $page: Int\n    $categoryName: String\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n  ) {\n    nodeByUri(uri: $uri) {\n      ... on Category {\n        name\n      }\n    }\n    posts(where: {offsetPagination: {offset: $page, size: 5}, categoryName: $categoryName}) {\n        pageInfo {\n            offsetPagination {\n                total\n            }\n        }\n        nodes {\n            id\n            uri\n            excerpt\n            categories {\n                nodes {\n                    name\n                    uri\n                }\n            }\n            featuredImage {\n                node {\n                    id\n                    sourceUrl\n                    altText\n                    mediaDetails {\n                        width\n                        height\n                    }\n                }\n            }\n        }\n    }\n    widgetSettings {\n        blogtop\n        blogSidebar\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n": types.GetCategoryPageDocument,
    "\n  \n  \n  \n  \n  query GetHomePageData(\n    $databaseId: ID!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n    $asPreview: Boolean = false\n  ) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n": types.GetHomePageDataDocument,
    "\n  \n  \n  \n  \n  query GetPageData(\n    $databaseId: ID!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n    $asPreview: Boolean = false\n  ) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n": types.GetPageDataDocument,
    "\n  \n  query GetTagPage(\n    $uri: String!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n  ) {\n    nodeByUri(uri: $uri) {\n      ... on Tag {\n        name\n        posts {\n          edges {\n            node {\n              id\n              title\n              content\n              date\n              uri\n              author {\n                node {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    \n  }\n": types.GetTagPageDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\t  fragment AlertsFragment on CXAlert {\n        displayPages\n        databaseId\n        ctaButtonText\n        ctaButtonUrl\n        name\n        message\n\t  }\n\t"): (typeof documents)["\n\t  fragment AlertsFragment on CXAlert {\n        displayPages\n        databaseId\n        ctaButtonText\n        ctaButtonUrl\n        name\n        message\n\t  }\n\t"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      fragment FooterFragment on FooterSettings {\n\t\tfooterAppIcons\n\t\tfooterSocialIcons\n\t  }\n    "): (typeof documents)["\n      fragment FooterFragment on FooterSettings {\n\t\tfooterAppIcons\n\t\tfooterSocialIcons\n\t  }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      fragment NavigationMenuItemFragment on MenuItem {\n        id\n        databaseId\n        uri\n        label\n        cssClasses\n        parentDatabaseId\n        childItems {\n            nodes{\n                id\n                databaseId\n                uri\n                label\n                cssClasses\n                parentDatabaseId\n                childItems {\n                    nodes{\n                        id\n                        databaseId\n                        uri\n                        label\n                        cssClasses\n                        parentDatabaseId\n                    }\n                }\n            }\n        }\n      }\n    "): (typeof documents)["\n      fragment NavigationMenuItemFragment on MenuItem {\n        id\n        databaseId\n        uri\n        label\n        cssClasses\n        parentDatabaseId\n        childItems {\n            nodes{\n                id\n                databaseId\n                uri\n                label\n                cssClasses\n                parentDatabaseId\n                childItems {\n                    nodes{\n                        id\n                        databaseId\n                        uri\n                        label\n                        cssClasses\n                        parentDatabaseId\n                    }\n                }\n            }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ThirdPartySettingsFragment on ThirdPartySettings {\n    datatracEnabled\n    datatracId\n    gtmEnabled\n    gtmId\n    hotjarEnabled\n    hotjarId\n    personyzeDomains\n    personyzeEnabled\n    personyzeId\n    qualtricsEnabled\n    qualtricsId\n    salesforceEnabled\n    salesforceId\n    siteimproveEnabled\n    siteimproveId\n    spectrumEnabled\n    spectrumId\n    thirdPartySettings\n    wpengineAccountId\n    wpengineEnvId\n    wpengineToken\n  }\n"): (typeof documents)["\n  fragment ThirdPartySettingsFragment on ThirdPartySettings {\n    datatracEnabled\n    datatracId\n    gtmEnabled\n    gtmId\n    hotjarEnabled\n    hotjarId\n    personyzeDomains\n    personyzeEnabled\n    personyzeId\n    qualtricsEnabled\n    qualtricsId\n    salesforceEnabled\n    salesforceId\n    siteimproveEnabled\n    siteimproveId\n    spectrumEnabled\n    spectrumId\n    thirdPartySettings\n    wpengineAccountId\n    wpengineEnvId\n    wpengineToken\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BlogInfoFragment on GeneralSettings {\n    title\n    description\n    logo\n  }\n"): (typeof documents)["\n  fragment BlogInfoFragment on GeneralSettings {\n    title\n    description\n    logo\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment LocationPageFragment on Location {\n        id\n        slug\n        content(format: RENDERED)\n        title(format: RENDERED)\n        locationId\n        details {\n            zip\n            state\n            specialMessageType\n            specialMessageTitle\n            specialMessage\n            specialHoursHTML\n            lobbyHoursHTML\n            services\n            lng\n            lat\n            driveThruHoursHTML\n            contact\n            city\n            address\n        }\n    }"): (typeof documents)["\n    fragment LocationPageFragment on Location {\n        id\n        slug\n        content(format: RENDERED)\n        title(format: RENDERED)\n        locationId\n        details {\n            zip\n            state\n            specialMessageType\n            specialMessageTitle\n            specialMessage\n            specialHoursHTML\n            lobbyHoursHTML\n            services\n            lng\n            lat\n            driveThruHoursHTML\n            contact\n            city\n            address\n        }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LocationSettingsFragment on LocationSettings {\n    apiBrowserKey\n    mapType\n    zoomLevel\n    urlLabel\n    emailLabel\n    phoneLabel\n    streetview\n    startLatlng\n    startMarker\n    storeMarker\n    typeControl\n    scrollwheel\n    searchRadius\n    controlPosition\n    autoZoomLevel\n    markerIconProps\n    distanceUnit\n  }\n"): (typeof documents)["\n  fragment LocationSettingsFragment on LocationSettings {\n    apiBrowserKey\n    mapType\n    zoomLevel\n    urlLabel\n    emailLabel\n    phoneLabel\n    streetview\n    startLatlng\n    startMarker\n    storeMarker\n    typeControl\n    scrollwheel\n    searchRadius\n    controlPosition\n    autoZoomLevel\n    markerIconProps\n    distanceUnit\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\t\n\t\n\t\n\t\n\tquery GetLocationPageData(\n\t  $headerLocation: MenuLocationEnum\n\t  $footerLocation: MenuLocationEnum\n\t) {\n\t  generalSettings {\n\t\t...BlogInfoFragment\n\t  }\n\t  headerSettings {\n\t\theaderUtilities\n\t  }\n\t  footerSettings {\n\t\tfooterUtilities\n\t\tfooterAppIcons\n\t\tfooterSocialIcons\n\t  }\n\t  thirdPartySettings {\n\t\t...ThirdPartySettingsFragment\n\t  }\n\n\t  locationSettings {\n\t\tautoLocate\n\t\tstartLatlng\n\t\tsearchRadius\n\t\tapiBrowserKey\n\t\tmapType\n\t\tzoomLevel\n\t\turlLabel\n\t\tstreetview\n\t\tstartLatlng\n\t\ttypeControl\n\t\tscrollwheel\n\t\tcontrolPosition\n\t\tmarkerIconProps\n\t\tstartMarker\n\t\tstoreMarker\n\t  }\n\t\twidgetSettings {\n\t\t\tlocationsSearch\n\t\t}\n  \n\t  cxAlerts: cXAlerts {\n\t\t  edges {\n\t\t\tnode{\n\t\t\t  ...AlertsFragment\n\t\t\t}\n\t\t  }\n\t  }\n\t  footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n\t\tnodes {\n\t\t  ...NavigationMenuItemFragment\n\t\t}\n\t  }\n\t  headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n\t\tnodes {\n\t\t  ...NavigationMenuItemFragment\n\t\t}\n\t  }\n\t}\n  "): (typeof documents)["\n\t\n\t\n\t\n\t\n\tquery GetLocationPageData(\n\t  $headerLocation: MenuLocationEnum\n\t  $footerLocation: MenuLocationEnum\n\t) {\n\t  generalSettings {\n\t\t...BlogInfoFragment\n\t  }\n\t  headerSettings {\n\t\theaderUtilities\n\t  }\n\t  footerSettings {\n\t\tfooterUtilities\n\t\tfooterAppIcons\n\t\tfooterSocialIcons\n\t  }\n\t  thirdPartySettings {\n\t\t...ThirdPartySettingsFragment\n\t  }\n\n\t  locationSettings {\n\t\tautoLocate\n\t\tstartLatlng\n\t\tsearchRadius\n\t\tapiBrowserKey\n\t\tmapType\n\t\tzoomLevel\n\t\turlLabel\n\t\tstreetview\n\t\tstartLatlng\n\t\ttypeControl\n\t\tscrollwheel\n\t\tcontrolPosition\n\t\tmarkerIconProps\n\t\tstartMarker\n\t\tstoreMarker\n\t  }\n\t\twidgetSettings {\n\t\t\tlocationsSearch\n\t\t}\n  \n\t  cxAlerts: cXAlerts {\n\t\t  edges {\n\t\t\tnode{\n\t\t\t  ...AlertsFragment\n\t\t\t}\n\t\t  }\n\t  }\n\t  footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n\t\tnodes {\n\t\t  ...NavigationMenuItemFragment\n\t\t}\n\t  }\n\t  headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n\t\tnodes {\n\t\t  ...NavigationMenuItemFragment\n\t\t}\n\t  }\n\t}\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  \n  \n  query GetSearchData(\n    $searchTerm: String!\n    $offset: String!\n    $postsPerPage: String!\n  ) {\n    searchwp(offset: $offset, postsPerPage: $postsPerPage, terms: $searchTerm) {\n      results {\n        id\n        uri\n        excerpt\n        categories {\n          nodes {\n            name\n            uri\n          }\n        }\n        featuredImage {\n          node {\n            id\n            sourceUrl\n            altText\n            mediaDetails {\n              width\n              height\n            }\n          }\n        }\n      }\n      total\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: PRIMARY }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: FOOTER }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  \n  \n  query GetSearchData(\n    $searchTerm: String!\n    $offset: String!\n    $postsPerPage: String!\n  ) {\n    searchwp(offset: $offset, postsPerPage: $postsPerPage, terms: $searchTerm) {\n      results {\n        id\n        uri\n        excerpt\n        categories {\n          nodes {\n            name\n            uri\n          }\n        }\n        featuredImage {\n          node {\n            id\n            sourceUrl\n            altText\n            mediaDetails {\n              width\n              height\n            }\n          }\n        }\n      }\n      total\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: PRIMARY }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: FOOTER }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  query GetPost(\n    $databaseId: ID!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n    $asPreview: Boolean = false\n  ) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      date\n      author {\n        node {\n          name\n        }\n      }\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query GetPost(\n    $databaseId: ID!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n    $asPreview: Boolean = false\n  ) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      date\n      author {\n        node {\n          name\n        }\n      }\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  \n  \n\n\n  query GetPosts(\n    $page: Int\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n  ) {\n    posts(where: {offsetPagination: {offset: $page, size: 5}}) {\n        pageInfo {\n            offsetPagination {\n                total\n            }\n        }\n        nodes {\n            id\n            uri\n            excerpt\n            categories {\n                nodes {\n                    name\n                    uri\n                }\n            }\n            featuredImage {\n                node {\n                    id\n                    sourceUrl\n                    altText\n                    mediaDetails {\n                        width\n                        height\n                    }\n                }\n            }\n        }\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    widgetSettings {\n        blogtop\n        blogSidebar\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  \n  \n\n\n  query GetPosts(\n    $page: Int\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n  ) {\n    posts(where: {offsetPagination: {offset: $page, size: 5}}) {\n        pageInfo {\n            offsetPagination {\n                total\n            }\n        }\n        nodes {\n            id\n            uri\n            excerpt\n            categories {\n                nodes {\n                    name\n                    uri\n                }\n            }\n            featuredImage {\n                node {\n                    id\n                    sourceUrl\n                    altText\n                    mediaDetails {\n                        width\n                        height\n                    }\n                }\n            }\n        }\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    widgetSettings {\n        blogtop\n        blogSidebar\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  \n  \n  query GetCategoryPage(\n    $uri: String!\n    $page: Int\n    $categoryName: String\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n  ) {\n    nodeByUri(uri: $uri) {\n      ... on Category {\n        name\n      }\n    }\n    posts(where: {offsetPagination: {offset: $page, size: 5}, categoryName: $categoryName}) {\n        pageInfo {\n            offsetPagination {\n                total\n            }\n        }\n        nodes {\n            id\n            uri\n            excerpt\n            categories {\n                nodes {\n                    name\n                    uri\n                }\n            }\n            featuredImage {\n                node {\n                    id\n                    sourceUrl\n                    altText\n                    mediaDetails {\n                        width\n                        height\n                    }\n                }\n            }\n        }\n    }\n    widgetSettings {\n        blogtop\n        blogSidebar\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  \n  \n  query GetCategoryPage(\n    $uri: String!\n    $page: Int\n    $categoryName: String\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n  ) {\n    nodeByUri(uri: $uri) {\n      ... on Category {\n        name\n      }\n    }\n    posts(where: {offsetPagination: {offset: $page, size: 5}, categoryName: $categoryName}) {\n        pageInfo {\n            offsetPagination {\n                total\n            }\n        }\n        nodes {\n            id\n            uri\n            excerpt\n            categories {\n                nodes {\n                    name\n                    uri\n                }\n            }\n            featuredImage {\n                node {\n                    id\n                    sourceUrl\n                    altText\n                    mediaDetails {\n                        width\n                        height\n                    }\n                }\n            }\n        }\n    }\n    widgetSettings {\n        blogtop\n        blogSidebar\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  \n  \n  query GetHomePageData(\n    $databaseId: ID!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n    $asPreview: Boolean = false\n  ) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  \n  \n  query GetHomePageData(\n    $databaseId: ID!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n    $asPreview: Boolean = false\n  ) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  \n  \n  query GetPageData(\n    $databaseId: ID!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n    $asPreview: Boolean = false\n  ) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  \n  \n  query GetPageData(\n    $databaseId: ID!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n    $asPreview: Boolean = false\n  ) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    headerSettings {\n      headerUtilities\n    }\n    footerSettings {\n      footerUtilities\n      footerAppIcons\n      footerSocialIcons\n    }\n    thirdPartySettings {\n      ...ThirdPartySettingsFragment\n    }\n\n    cxAlerts: cXAlerts {\n        edges {\n          node{\n            ...AlertsFragment\n          }\n        }\n    }\n    footerMenuItems: menuItems(where: { location: $footerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n    headerMenuItems: menuItems(where: { location: $headerLocation }, first: 255) {\n      nodes {\n        ...NavigationMenuItemFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  query GetTagPage(\n    $uri: String!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n  ) {\n    nodeByUri(uri: $uri) {\n      ... on Tag {\n        name\n        posts {\n          edges {\n            node {\n              id\n              title\n              content\n              date\n              uri\n              author {\n                node {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    \n  }\n"): (typeof documents)["\n  \n  query GetTagPage(\n    $uri: String!\n    $headerLocation: MenuLocationEnum\n    $footerLocation: MenuLocationEnum\n  ) {\n    nodeByUri(uri: $uri) {\n      ... on Tag {\n        name\n        posts {\n          edges {\n            node {\n              id\n              title\n              content\n              date\n              uri\n              author {\n                node {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    generalSettings {\n      ...BlogInfoFragment\n    }\n    \n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;