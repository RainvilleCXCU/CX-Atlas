/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  BlockAttributesObject: { input: any; output: any; }
};

/** The atlasContentModelerSettings setting type */
export type AtlasContentModelerSettingsSettings = {
  __typename?: 'AtlasContentModelerSettingsSettings';
  /** Opt into anonymous usage tracking to help us make Atlas Content Modeler better. */
  atlasContentModelerUsageTracking?: Maybe<Scalars['String']['output']>;
};

/** Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from. */
export type Avatar = {
  __typename?: 'Avatar';
  /** URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo). */
  default?: Maybe<Scalars['String']['output']>;
  /** HTML attributes to insert in the IMG element. Is not sanitized. */
  extraAttr?: Maybe<Scalars['String']['output']>;
  /** Whether to always show the default image, never the Gravatar. */
  forceDefault?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the avatar was successfully found. */
  foundAvatar?: Maybe<Scalars['Boolean']['output']>;
  /** Height of the avatar image. */
  height?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order. */
  rating?: Maybe<Scalars['String']['output']>;
  /** Type of url scheme to use. Typically HTTP vs. HTTPS. */
  scheme?: Maybe<Scalars['String']['output']>;
  /** The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image. */
  size?: Maybe<Scalars['Int']['output']>;
  /** URL for the gravatar image source. */
  url?: Maybe<Scalars['String']['output']>;
  /** Width of the avatar image. */
  width?: Maybe<Scalars['Int']['output']>;
};

/** What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option */
export enum AvatarRatingEnum {
  /** Indicates a G level avatar rating level. */
  G = 'G',
  /** Indicates a PG level avatar rating level. */
  Pg = 'PG',
  /** Indicates an R level avatar rating level. */
  R = 'R',
  /** Indicates an X level avatar rating level. */
  X = 'X'
}

/** The CXAlert type */
export type CxAlert = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithPageAttributes & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {
  __typename?: 'CXAlert';
  /** Meta for the key active as a string */
  active?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  cXAlertId: Scalars['Int']['output'];
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** Meta for the key cta_button_text as a string */
  ctaButtonText?: Maybe<Scalars['String']['output']>;
  /** Meta for the key cta_button_url as a string */
  ctaButtonUrl?: Maybe<Scalars['String']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** Meta for the key display_pages as a string */
  displayPages?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Meta for the key end_date as a string */
  endDate?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the cx_alert object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key message as a string */
  message?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** Meta for the key name as a string */
  name?: Maybe<Scalars['String']['output']>;
  /** Connection between the CXAlert type and the CXAlert type */
  preview?: Maybe<CxAlertToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
  /** Connection between the CXAlert type and the CXAlert type */
  revisions?: Maybe<CxAlertToRevisionConnection>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** Meta for the key start_date as a string */
  startDate?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The CXAlert type */
export type CxAlertEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The CXAlert type */
export type CxAlertEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The CXAlert type */
export type CxAlertRevisionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CxAlertToRevisionConnectionWhereArgs>;
};


/** The CXAlert type */
export type CxAlertTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Connection to CXAlert Nodes */
export type CxAlertConnection = {
  /** A list of edges (relational context) between RootQuery and connected CXAlert Nodes */
  edges: Array<CxAlertConnectionEdge>;
  /** A list of connected CXAlert Nodes */
  nodes: Array<CxAlert>;
  /** Information about pagination in a connection. */
  pageInfo: CxAlertConnectionPageInfo;
};

/** Edge between a Node and a connected CXAlert */
export type CxAlertConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected CXAlert Node */
  node: CxAlert;
};

/** Page Info on the connected CXAlertConnectionEdge */
export type CxAlertConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum CxAlertIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the CXAlert type and the CXAlert type */
export type CxAlertToPreviewConnectionEdge = CxAlertConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'CXAlertToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: CxAlert;
};

/** Connection between the CXAlert type and the CXAlert type */
export type CxAlertToRevisionConnection = CxAlertConnection & Connection & {
  __typename?: 'CXAlertToRevisionConnection';
  /** Edges for the CXAlertToRevisionConnection connection */
  edges: Array<CxAlertToRevisionConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<CxAlert>;
  /** Information about pagination in a connection. */
  pageInfo: CxAlertToRevisionConnectionPageInfo;
};

/** An edge in a connection */
export type CxAlertToRevisionConnectionEdge = CxAlertConnectionEdge & Edge & {
  __typename?: 'CXAlertToRevisionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: CxAlert;
};

/** Page Info on the &quot;CXAlertToRevisionConnection&quot; */
export type CxAlertToRevisionConnectionPageInfo = CxAlertConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'CXAlertToRevisionConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the CXAlertToRevisionConnection connection */
export type CxAlertToRevisionConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Keys and their values, both cast as strings */
export type CxAlerts = {
  __typename?: 'CXAlerts';
  active?: Maybe<Scalars['Boolean']['output']>;
  cta_button_text?: Maybe<Scalars['String']['output']>;
  cta_button_url?: Maybe<Scalars['String']['output']>;
  display_pages?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  end_date?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  message?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  start_date?: Maybe<Scalars['String']['output']>;
};

/** The category type */
export type Category = DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {
  __typename?: 'Category';
  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<CategoryToAncestorsCategoryConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  categoryId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the category type and its children categories. */
  children?: Maybe<CategoryToCategoryConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the Category type and the ContentNode type */
  contentNodes?: Maybe<CategoryToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /** Connection between the category type and its parent category. */
  parent?: Maybe<CategoryToParentCategoryConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the Category type and the post type */
  posts?: Maybe<CategoryToPostConnection>;
  /** The Yoast SEO data of the Categories taxonomy. */
  seo?: Maybe<TaxonomySeo>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /** Connection between the Category type and the Taxonomy type */
  taxonomy?: Maybe<CategoryToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The category type */
export type CategoryAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The category type */
export type CategoryChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CategoryToCategoryConnectionWhereArgs>;
};


/** The category type */
export type CategoryContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CategoryToContentNodeConnectionWhereArgs>;
};


/** The category type */
export type CategoryEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The category type */
export type CategoryEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The category type */
export type CategoryPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CategoryToPostConnectionWhereArgs>;
};

/** Connection to category Nodes */
export type CategoryConnection = {
  /** A list of edges (relational context) between RootQuery and connected category Nodes */
  edges: Array<CategoryConnectionEdge>;
  /** A list of connected category Nodes */
  nodes: Array<Category>;
  /** Information about pagination in a connection. */
  pageInfo: CategoryConnectionPageInfo;
};

/** Edge between a Node and a connected category */
export type CategoryConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected category Node */
  node: Category;
};

/** Page Info on the connected CategoryConnectionEdge */
export type CategoryConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum CategoryIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the Category type and the category type */
export type CategoryToAncestorsCategoryConnection = CategoryConnection & Connection & {
  __typename?: 'CategoryToAncestorsCategoryConnection';
  /** Edges for the CategoryToAncestorsCategoryConnection connection */
  edges: Array<CategoryToAncestorsCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Category>;
  /** Information about pagination in a connection. */
  pageInfo: CategoryToAncestorsCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type CategoryToAncestorsCategoryConnectionEdge = CategoryConnectionEdge & Edge & {
  __typename?: 'CategoryToAncestorsCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Category;
};

/** Page Info on the &quot;CategoryToAncestorsCategoryConnection&quot; */
export type CategoryToAncestorsCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'CategoryToAncestorsCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Category type and the category type */
export type CategoryToCategoryConnection = CategoryConnection & Connection & {
  __typename?: 'CategoryToCategoryConnection';
  /** Edges for the CategoryToCategoryConnection connection */
  edges: Array<CategoryToCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Category>;
  /** Information about pagination in a connection. */
  pageInfo: CategoryToCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type CategoryToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {
  __typename?: 'CategoryToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Category;
};

/** Page Info on the &quot;CategoryToCategoryConnection&quot; */
export type CategoryToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'CategoryToCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the CategoryToCategoryConnection connection */
export type CategoryToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the Category type and the ContentNode type */
export type CategoryToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'CategoryToContentNodeConnection';
  /** Edges for the CategoryToContentNodeConnection connection */
  edges: Array<CategoryToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: CategoryToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type CategoryToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'CategoryToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Page Info on the &quot;CategoryToContentNodeConnection&quot; */
export type CategoryToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'CategoryToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the CategoryToContentNodeConnection connection */
export type CategoryToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfCategoryEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Category type and the category type */
export type CategoryToParentCategoryConnectionEdge = CategoryConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'CategoryToParentCategoryConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Category;
};

/** Connection between the Category type and the post type */
export type CategoryToPostConnection = Connection & PostConnection & {
  __typename?: 'CategoryToPostConnection';
  /** Edges for the CategoryToPostConnection connection */
  edges: Array<CategoryToPostConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: CategoryToPostConnectionPageInfo;
};

/** An edge in a connection */
export type CategoryToPostConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'CategoryToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Page Info on the &quot;CategoryToPostConnection&quot; */
export type CategoryToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'CategoryToPostConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the CategoryToPostConnection connection */
export type CategoryToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Category type and the Taxonomy type */
export type CategoryToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {
  __typename?: 'CategoryToTaxonomyConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Taxonomy;
};

/** A Comment object */
export type Comment = DatabaseIdentifier & Node & {
  __typename?: 'Comment';
  /** User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL. */
  agent?: Maybe<Scalars['String']['output']>;
  /**
   * The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL.
   * @deprecated Deprecated in favor of the `status` field
   */
  approved?: Maybe<Scalars['Boolean']['output']>;
  /** The author of the comment */
  author?: Maybe<CommentToCommenterConnectionEdge>;
  /** IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL. */
  authorIp?: Maybe<Scalars['String']['output']>;
  /**
   * ID for the comment, unique among comments.
   * @deprecated Deprecated in favor of databaseId
   */
  commentId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the Comment type and the ContentNode type */
  commentedOn?: Maybe<CommentToContentNodeConnectionEdge>;
  /** Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL. */
  content?: Maybe<Scalars['String']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL. */
  date?: Maybe<Scalars['String']['output']>;
  /** Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier for the comment object */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL. */
  karma?: Maybe<Scalars['Int']['output']>;
  /** Connection between the Comment type and the Comment type */
  parent?: Maybe<CommentToParentCommentConnectionEdge>;
  /** The database id of the parent comment node or null if it is the root comment */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent comment node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the Comment type and the Comment type */
  replies?: Maybe<CommentToCommentConnection>;
  /** The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL. */
  status?: Maybe<CommentStatusEnum>;
  /** Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL. */
  type?: Maybe<Scalars['String']['output']>;
};


/** A Comment object */
export type CommentContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** A Comment object */
export type CommentParentArgs = {
  where?: InputMaybe<CommentToParentCommentConnectionWhereArgs>;
};


/** A Comment object */
export type CommentRepliesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CommentToCommentConnectionWhereArgs>;
};

/** A Comment Author object */
export type CommentAuthor = Commenter & DatabaseIdentifier & Node & {
  __typename?: 'CommentAuthor';
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  avatar?: Maybe<Avatar>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The email for the comment author */
  email?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier for the comment author object */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** The name for the comment author. */
  name?: Maybe<Scalars['String']['output']>;
  /** The url the comment author. */
  url?: Maybe<Scalars['String']['output']>;
};


/** A Comment Author object */
export type CommentAuthorAvatarArgs = {
  forceDefault?: InputMaybe<Scalars['Boolean']['input']>;
  rating?: InputMaybe<AvatarRatingEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};

/** Connection to Comment Nodes */
export type CommentConnection = {
  /** A list of edges (relational context) between RootQuery and connected Comment Nodes */
  edges: Array<CommentConnectionEdge>;
  /** A list of connected Comment Nodes */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: CommentConnectionPageInfo;
};

/** Edge between a Node and a connected Comment */
export type CommentConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Comment Node */
  node: Comment;
};

/** Page Info on the connected CommentConnectionEdge */
export type CommentConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single comment node. Default is "ID". To be used along with the "id" field. */
export enum CommentNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID'
}

/** The status of the comment object. */
export enum CommentStatusEnum {
  /** Comments with the Approved status */
  Approve = 'APPROVE',
  /** Comments with the Unapproved status */
  Hold = 'HOLD',
  /** Comments with the Spam status */
  Spam = 'SPAM',
  /** Comments with the Trash status */
  Trash = 'TRASH'
}

/** Connection between the Comment type and the Comment type */
export type CommentToCommentConnection = CommentConnection & Connection & {
  __typename?: 'CommentToCommentConnection';
  /** Edges for the CommentToCommentConnection connection */
  edges: Array<CommentToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: CommentToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type CommentToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'CommentToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Page Info on the &quot;CommentToCommentConnection&quot; */
export type CommentToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'CommentToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the CommentToCommentConnection connection */
export type CommentToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']['input']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the Comment type and the Commenter type */
export type CommentToCommenterConnectionEdge = CommenterConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'CommentToCommenterConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Commenter;
};

/** Connection between the Comment type and the ContentNode type */
export type CommentToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'CommentToContentNodeConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: ContentNode;
};

/** Connection between the Comment type and the Comment type */
export type CommentToParentCommentConnectionEdge = CommentConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'CommentToParentCommentConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Comment;
};

/** Arguments for filtering the CommentToParentCommentConnection connection */
export type CommentToParentCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']['input']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** The author of a comment */
export type Commenter = {
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  avatar?: Maybe<Avatar>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int']['output'];
  /** The email address of the author of a comment. */
  email?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier for the comment author. */
  id: Scalars['ID']['output'];
  /** Whether the author information is considered restricted. (not fully public) */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** The name of the author of a comment. */
  name?: Maybe<Scalars['String']['output']>;
  /** The url of the author of a comment. */
  url?: Maybe<Scalars['String']['output']>;
};

/** Edge between a Node and a connected Commenter */
export type CommenterConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Commenter Node */
  node: Commenter;
};

/** Options for ordering the connection */
export enum CommentsConnectionOrderbyEnum {
  /** Order by browser user agent of the commenter. */
  CommentAgent = 'COMMENT_AGENT',
  /** Order by approval status of the comment. */
  CommentApproved = 'COMMENT_APPROVED',
  /** Order by name of the comment author. */
  CommentAuthor = 'COMMENT_AUTHOR',
  /** Order by e-mail of the comment author. */
  CommentAuthorEmail = 'COMMENT_AUTHOR_EMAIL',
  /** Order by IP address of the comment author. */
  CommentAuthorIp = 'COMMENT_AUTHOR_IP',
  /** Order by URL address of the comment author. */
  CommentAuthorUrl = 'COMMENT_AUTHOR_URL',
  /** Order by the comment contents. */
  CommentContent = 'COMMENT_CONTENT',
  /** Order by date/time timestamp of the comment. */
  CommentDate = 'COMMENT_DATE',
  /** Order by GMT timezone date/time timestamp of the comment. */
  CommentDateGmt = 'COMMENT_DATE_GMT',
  /** Order by the globally unique identifier for the comment object */
  CommentId = 'COMMENT_ID',
  /** Order by the array list of comment IDs listed in the where clause. */
  CommentIn = 'COMMENT_IN',
  /** Order by the comment karma score. */
  CommentKarma = 'COMMENT_KARMA',
  /** Order by the comment parent ID. */
  CommentParent = 'COMMENT_PARENT',
  /** Order by the post object ID. */
  CommentPostId = 'COMMENT_POST_ID',
  /** Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'. */
  CommentType = 'COMMENT_TYPE',
  /** Order by the user ID. */
  UserId = 'USER_ID'
}

/** GraphQL representation of WordPress Conditional Tags. */
export type ConditionalTags = {
  __typename?: 'ConditionalTags';
  /**
   * Determines whether the query is for an existing archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isArchive?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing attachment page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isAttachment?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing author archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isAuthor?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing category archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isCategory?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing date archive.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isDate?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing day archive.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isDay?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for the front page of the site.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isFrontPage?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for the blog homepage.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isHome?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing month archive.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isMonth?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether this site has more than one author.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isMultiAuthor?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing single page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isPage?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether currently in a page template.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isPageTemplate?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing post type archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isPostTypeArchive?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for a post or page preview.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for the Privacy Policy page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isPrivacyPolicy?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for a search.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isSearch?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing single post.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isSingle?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing single post of any post type (post, attachment, page, custom post types).
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isSingular?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether a post is sticky.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isSticky?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing tag archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isTag?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing custom taxonomy archive page.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isTax?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Determines whether the query is for an existing year archive.
   * @deprecated Deprecated in favor of using Next.js pages
   */
  isYear?: Maybe<Scalars['Boolean']['output']>;
};

/** A plural connection from one Node Type in the Graph to another Node Type, with support for relational data via &quot;edges&quot;. */
export type Connection = {
  /** A list of edges (relational context) between connected nodes */
  edges: Array<Edge>;
  /** A list of connected nodes */
  nodes: Array<Node>;
  /** Information about pagination in a connection. */
  pageInfo: PageInfo;
};

/** The contact type */
export type Contact = ContentNode & DatabaseIdentifier & Node & NodeWithAuthor & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {
  __typename?: 'Contact';
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  contactId: Scalars['Int']['output'];
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  displayName?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the contact object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  /** Connection between the Contact type and the contact type */
  preview?: Maybe<ContactToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};


/** The contact type */
export type ContactEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The contact type */
export type ContactEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The contact type */
export type ContactTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Connection to contact Nodes */
export type ContactConnection = {
  /** A list of edges (relational context) between RootQuery and connected contact Nodes */
  edges: Array<ContactConnectionEdge>;
  /** A list of connected contact Nodes */
  nodes: Array<Contact>;
  /** Information about pagination in a connection. */
  pageInfo: ContactConnectionPageInfo;
};

/** Edge between a Node and a connected contact */
export type ContactConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected contact Node */
  node: Contact;
};

/** Page Info on the connected ContactConnectionEdge */
export type ContactConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum ContactIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the Contact type and the contact type */
export type ContactToPreviewConnectionEdge = ContactConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'ContactToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Contact;
};

/** Nodes used to manage content */
export type ContentNode = {
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The ID of the node in the database. */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to a node of content */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** Nodes used to manage content */
export type ContentNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Nodes used to manage content */
export type ContentNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Connection to ContentNode Nodes */
export type ContentNodeConnection = {
  /** A list of edges (relational context) between ContentType and connected ContentNode Nodes */
  edges: Array<ContentNodeConnectionEdge>;
  /** A list of connected ContentNode Nodes */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: ContentNodeConnectionPageInfo;
};

/** Edge between a Node and a connected ContentNode */
export type ContentNodeConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected ContentNode Node */
  node: ContentNode;
};

/** Page Info on the connected ContentNodeConnectionEdge */
export type ContentNodeConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum ContentNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the ContentNode type and the ContentType type */
export type ContentNodeToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'ContentNodeToContentTypeConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: ContentType;
};

/** Connection between the ContentNode type and the User type */
export type ContentNodeToEditLastConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {
  __typename?: 'ContentNodeToEditLastConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: User;
};

/** Connection between the ContentNode type and the User type */
export type ContentNodeToEditLockConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {
  __typename?: 'ContentNodeToEditLockConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The timestamp for when the node was last edited */
  lockTimestamp?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: User;
};

/** Connection between the ContentNode type and the EnqueuedScript type */
export type ContentNodeToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {
  __typename?: 'ContentNodeToEnqueuedScriptConnection';
  /** Edges for the ContentNodeToEnqueuedScriptConnection connection */
  edges: Array<ContentNodeToEnqueuedScriptConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedScript>;
  /** Information about pagination in a connection. */
  pageInfo: ContentNodeToEnqueuedScriptConnectionPageInfo;
};

/** An edge in a connection */
export type ContentNodeToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {
  __typename?: 'ContentNodeToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedScript;
};

/** Page Info on the &quot;ContentNodeToEnqueuedScriptConnection&quot; */
export type ContentNodeToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'ContentNodeToEnqueuedScriptConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the ContentNode type and the EnqueuedStylesheet type */
export type ContentNodeToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {
  __typename?: 'ContentNodeToEnqueuedStylesheetConnection';
  /** Edges for the ContentNodeToEnqueuedStylesheetConnection connection */
  edges: Array<ContentNodeToEnqueuedStylesheetConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedStylesheet>;
  /** Information about pagination in a connection. */
  pageInfo: ContentNodeToEnqueuedStylesheetConnectionPageInfo;
};

/** An edge in a connection */
export type ContentNodeToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {
  __typename?: 'ContentNodeToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedStylesheet;
};

/** Page Info on the &quot;ContentNodeToEnqueuedStylesheetConnection&quot; */
export type ContentNodeToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'ContentNodeToEnqueuedStylesheetConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The template assigned to a node of content */
export type ContentTemplate = {
  /** The name of the template */
  templateName?: Maybe<Scalars['String']['output']>;
};

/** An Post Type object */
export type ContentType = Node & UniformResourceIdentifiable & {
  __typename?: 'ContentType';
  /** Whether this content type should can be exported. */
  canExport?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentType type and the Taxonomy type */
  connectedTaxonomies?: Maybe<ContentTypeToTaxonomyConnection>;
  /** Connection between the ContentType type and the ContentNode type */
  contentNodes?: Maybe<ContentTypeToContentNodeConnection>;
  /** Whether content of this type should be deleted when the author of it is deleted from the system. */
  deleteWithUser?: Maybe<Scalars['Boolean']['output']>;
  /** Description of the content type. */
  description?: Maybe<Scalars['String']['output']>;
  /** Whether to exclude nodes of this content type from front end search results. */
  excludeFromSearch?: Maybe<Scalars['Boolean']['output']>;
  /** The plural name of the content type within the GraphQL Schema. */
  graphqlPluralName?: Maybe<Scalars['String']['output']>;
  /** The singular name of the content type within the GraphQL Schema. */
  graphqlSingleName?: Maybe<Scalars['String']['output']>;
  /** Whether this content type should have archives. Content archives are generated by type and by date. */
  hasArchive?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the content type is hierarchical, for example pages. */
  hierarchical?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the post-type object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether this page is set to the static front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether this page is set to the blog posts page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** Display name of the content type. */
  label?: Maybe<Scalars['String']['output']>;
  /** Details about the content type labels. */
  labels?: Maybe<PostTypeLabelDetails>;
  /** The name of the icon file to display as a menu icon. */
  menuIcon?: Maybe<Scalars['String']['output']>;
  /** The position of this post type in the menu. Only applies if show_in_menu is true. */
  menuPosition?: Maybe<Scalars['Int']['output']>;
  /** The internal name of the post type. This should not be used for display purposes. */
  name?: Maybe<Scalars['String']['output']>;
  /** Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention. */
  public?: Maybe<Scalars['Boolean']['output']>;
  /** Whether queries can be performed on the front end for the content type as part of parse_request(). */
  publiclyQueryable?: Maybe<Scalars['Boolean']['output']>;
  /** Name of content type to display in REST API &quot;wp/v2&quot; namespace. */
  restBase?: Maybe<Scalars['String']['output']>;
  /** The REST Controller class assigned to handling this content type. */
  restControllerClass?: Maybe<Scalars['String']['output']>;
  /** Makes this content type available via the admin bar. */
  showInAdminBar?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to add the content type to the GraphQL Schema. */
  showInGraphql?: Maybe<Scalars['Boolean']['output']>;
  /** Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that. */
  showInMenu?: Maybe<Scalars['Boolean']['output']>;
  /** Makes this content type available for selection in navigation menus. */
  showInNavMenus?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace. */
  showInRest?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to generate and allow a UI for managing this content type in the admin. */
  showUi?: Maybe<Scalars['Boolean']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** An Post Type object */
export type ContentTypeConnectedTaxonomiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** An Post Type object */
export type ContentTypeContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContentTypeToContentNodeConnectionWhereArgs>;
};

/** Connection to ContentType Nodes */
export type ContentTypeConnection = {
  /** A list of edges (relational context) between RootQuery and connected ContentType Nodes */
  edges: Array<ContentTypeConnectionEdge>;
  /** A list of connected ContentType Nodes */
  nodes: Array<ContentType>;
  /** Information about pagination in a connection. */
  pageInfo: ContentTypeConnectionPageInfo;
};

/** Edge between a Node and a connected ContentType */
export type ContentTypeConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected ContentType Node */
  node: ContentType;
};

/** Page Info on the connected ContentTypeConnectionEdge */
export type ContentTypeConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Allowed Content Types */
export enum ContentTypeEnum {
  /** The Type of Content object */
  Attachment = 'ATTACHMENT',
  /** The Type of Content object */
  Contact = 'CONTACT',
  /** The Type of Content object */
  CxAlert = 'CX_ALERT',
  /** The Type of Content object */
  GraphqlDocument = 'GRAPHQL_DOCUMENT',
  /** The Type of Content object */
  Instruction = 'INSTRUCTION',
  /** The Type of Content object */
  LinkLibraryLinks = 'LINK_LIBRARY_LINKS',
  /** The Type of Content object */
  Page = 'PAGE',
  /** The Type of Content object */
  Post = 'POST',
  /** The Type of Content object */
  Product = 'PRODUCT',
  /** The Type of Content object */
  Rate = 'RATE',
  /** The Type of Content object */
  Service = 'SERVICE',
  /** The Type of Content object */
  Step = 'STEP',
  /** The Type of Content object */
  WpslStores = 'WPSL_STORES'
}

/** The Type of Identifier used to fetch a single Content Type node. To be used along with the "id" field. Default is "ID". */
export enum ContentTypeIdTypeEnum {
  /** The globally unique ID */
  Id = 'ID',
  /** The name of the content type. */
  Name = 'NAME'
}

/** Connection between the ContentType type and the ContentNode type */
export type ContentTypeToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'ContentTypeToContentNodeConnection';
  /** Edges for the ContentTypeToContentNodeConnection connection */
  edges: Array<ContentTypeToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: ContentTypeToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type ContentTypeToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'ContentTypeToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Page Info on the &quot;ContentTypeToContentNodeConnection&quot; */
export type ContentTypeToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'ContentTypeToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the ContentTypeToContentNodeConnection connection */
export type ContentTypeToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the ContentType type and the Taxonomy type */
export type ContentTypeToTaxonomyConnection = Connection & TaxonomyConnection & {
  __typename?: 'ContentTypeToTaxonomyConnection';
  /** Edges for the ContentTypeToTaxonomyConnection connection */
  edges: Array<ContentTypeToTaxonomyConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Taxonomy>;
  /** Information about pagination in a connection. */
  pageInfo: ContentTypeToTaxonomyConnectionPageInfo;
};

/** An edge in a connection */
export type ContentTypeToTaxonomyConnectionEdge = Edge & TaxonomyConnectionEdge & {
  __typename?: 'ContentTypeToTaxonomyConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Taxonomy;
};

/** Page Info on the &quot;ContentTypeToTaxonomyConnection&quot; */
export type ContentTypeToTaxonomyConnectionPageInfo = PageInfo & TaxonomyConnectionPageInfo & WpPageInfo & {
  __typename?: 'ContentTypeToTaxonomyConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Allowed Content Types of the Category taxonomy. */
export enum ContentTypesOfCategoryEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** Allowed Content Types of the LocationCategory taxonomy. */
export enum ContentTypesOfLocationCategoryEnum {
  /** The Type of Content object */
  WpslStores = 'WPSL_STORES'
}

/** Allowed Content Types of the PostFormat taxonomy. */
export enum ContentTypesOfPostFormatEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** Allowed Content Types of the ProductName taxonomy. */
export enum ContentTypesOfProductNameEnum {
  /** The Type of Content object */
  Rate = 'RATE'
}

/** Allowed Content Types of the Tag taxonomy. */
export enum ContentTypesOfTagEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** A block used for editing the site */
export type CoreArchives = EditorBlock & {
  __typename?: 'CoreArchives';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreArchivesAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreArchivesAttributes = {
  __typename?: 'CoreArchivesAttributes';
  /** The &quot;align&quot; field on the &quot;CoreArchives&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreArchives&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreArchives&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;displayAsDropdown&quot; field on the &quot;CoreArchives&quot; block */
  displayAsDropdown?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreArchives&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreArchives&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreArchives&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;showLabel&quot; field on the &quot;CoreArchives&quot; block */
  showLabel?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;showPostCounts&quot; field on the &quot;CoreArchives&quot; block */
  showPostCounts?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreArchives&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;CoreArchives&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreAudio = EditorBlock & {
  __typename?: 'CoreAudio';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreAudioAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreAudioAttributes = {
  __typename?: 'CoreAudioAttributes';
  /** The &quot;align&quot; field on the &quot;CoreAudio&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;autoplay&quot; field on the &quot;CoreAudio&quot; block */
  autoplay?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreAudio&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;caption&quot; field on the &quot;CoreAudio&quot; block */
  caption?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreAudio&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;id&quot; field on the &quot;CoreAudio&quot; block */
  id?: Maybe<Scalars['Float']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreAudio&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;loop&quot; field on the &quot;CoreAudio&quot; block */
  loop?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;preload&quot; field on the &quot;CoreAudio&quot; block */
  preload?: Maybe<Scalars['String']['output']>;
  /** The &quot;src&quot; field on the &quot;CoreAudio&quot; block */
  src?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreAudio&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreAvatar = EditorBlock & {
  __typename?: 'CoreAvatar';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreAvatarAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreAvatarAttributes = {
  __typename?: 'CoreAvatarAttributes';
  /** The &quot;align&quot; field on the &quot;CoreAvatar&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreAvatar&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CoreAvatar&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreAvatar&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;isLink&quot; field on the &quot;CoreAvatar&quot; block */
  isLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CoreAvatar&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreAvatar&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;size&quot; field on the &quot;CoreAvatar&quot; block */
  size?: Maybe<Scalars['Float']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreAvatar&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;userId&quot; field on the &quot;CoreAvatar&quot; block */
  userId?: Maybe<Scalars['Float']['output']>;
};

/** A block used for editing the site */
export type CoreBlock = EditorBlock & {
  __typename?: 'CoreBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreBlockAttributes = {
  __typename?: 'CoreBlockAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;ref&quot; field on the &quot;CoreBlock&quot; block */
  ref?: Maybe<Scalars['Float']['output']>;
};

/** A block used for editing the site */
export type CoreButton = EditorBlock & {
  __typename?: 'CoreButton';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreButtonAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreButtonAttributes = {
  __typename?: 'CoreButtonAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreButton&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreButton&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreButton&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreButton&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreButton&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreButton&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CoreButton&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreButton&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;placeholder&quot; field on the &quot;CoreButton&quot; block */
  placeholder?: Maybe<Scalars['String']['output']>;
  /** The &quot;rel&quot; field on the &quot;CoreButton&quot; block */
  rel?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreButton&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;text&quot; field on the &quot;CoreButton&quot; block */
  text?: Maybe<Scalars['String']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreButton&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreButton&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;title&quot; field on the &quot;CoreButton&quot; block */
  title?: Maybe<Scalars['String']['output']>;
  /** The &quot;url&quot; field on the &quot;CoreButton&quot; block */
  url?: Maybe<Scalars['String']['output']>;
  /** The &quot;width&quot; field on the &quot;CoreButton&quot; block */
  width?: Maybe<Scalars['Float']['output']>;
};

/** A block used for editing the site */
export type CoreButtons = EditorBlock & {
  __typename?: 'CoreButtons';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreButtonsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreButtonsAttributes = {
  __typename?: 'CoreButtonsAttributes';
  /** The &quot;align&quot; field on the &quot;CoreButtons&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreButtons&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreButtons&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreButtons&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreButtons&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;layout&quot; field on the &quot;CoreButtons&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreButtons&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreButtons&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreCalendar = EditorBlock & {
  __typename?: 'CoreCalendar';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCalendarAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCalendarAttributes = {
  __typename?: 'CoreCalendarAttributes';
  /** The &quot;align&quot; field on the &quot;CoreCalendar&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCalendar&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCalendar&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCalendar&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCalendar&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCalendar&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCalendar&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;month&quot; field on the &quot;CoreCalendar&quot; block */
  month?: Maybe<Scalars['Int']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCalendar&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreCalendar&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;year&quot; field on the &quot;CoreCalendar&quot; block */
  year?: Maybe<Scalars['Int']['output']>;
};

/** A block used for editing the site */
export type CoreCategories = EditorBlock & {
  __typename?: 'CoreCategories';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCategoriesAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCategoriesAttributes = {
  __typename?: 'CoreCategoriesAttributes';
  /** The &quot;align&quot; field on the &quot;CoreCategories&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCategories&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCategories&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;displayAsDropdown&quot; field on the &quot;CoreCategories&quot; block */
  displayAsDropdown?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCategories&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCategories&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCategories&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;showEmpty&quot; field on the &quot;CoreCategories&quot; block */
  showEmpty?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;showHierarchy&quot; field on the &quot;CoreCategories&quot; block */
  showHierarchy?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;showOnlyTopLevel&quot; field on the &quot;CoreCategories&quot; block */
  showOnlyTopLevel?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;showPostCounts&quot; field on the &quot;CoreCategories&quot; block */
  showPostCounts?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCategories&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreCode = EditorBlock & {
  __typename?: 'CoreCode';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCodeAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCodeAttributes = {
  __typename?: 'CoreCodeAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCode&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCode&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CoreCode&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCode&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content&quot; field on the &quot;CoreCode&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;cssClassName&quot; field on the &quot;CoreCode&quot; block */
  cssClassName?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCode&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCode&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCode&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCode&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCode&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreCode&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreColumn = EditorBlock & {
  __typename?: 'CoreColumn';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreColumnAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreColumnAttributes = {
  __typename?: 'CoreColumnAttributes';
  /** The &quot;allowedBlocks&quot; field on the &quot;CoreColumn&quot; block */
  allowedBlocks?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreColumn&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreColumn&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CoreColumn&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreColumn&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;cssClassName&quot; field on the &quot;CoreColumn&quot; block */
  cssClassName?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreColumn&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreColumn&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreColumn&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;layout&quot; field on the &quot;CoreColumn&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreColumn&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreColumn&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreColumn&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;verticalAlignment&quot; field on the &quot;CoreColumn&quot; block */
  verticalAlignment?: Maybe<Scalars['String']['output']>;
  /** The &quot;width&quot; field on the &quot;CoreColumn&quot; block */
  width?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreColumns = EditorBlock & {
  __typename?: 'CoreColumns';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreColumnsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreColumnsAttributes = {
  __typename?: 'CoreColumnsAttributes';
  /** The &quot;align&quot; field on the &quot;CoreColumns&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreColumns&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreColumns&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CoreColumns&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreColumns&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;cssClassName&quot; field on the &quot;CoreColumns&quot; block */
  cssClassName?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreColumns&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreColumns&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreColumns&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;isStackedOnMobile&quot; field on the &quot;CoreColumns&quot; block */
  isStackedOnMobile?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;layout&quot; field on the &quot;CoreColumns&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreColumns&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreColumns&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreColumns&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;verticalAlignment&quot; field on the &quot;CoreColumns&quot; block */
  verticalAlignment?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreCommentAuthorName = EditorBlock & {
  __typename?: 'CoreCommentAuthorName';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentAuthorNameAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentAuthorNameAttributes = {
  __typename?: 'CoreCommentAuthorNameAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;isLink&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  isLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreCommentAuthorName&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreCommentContent = EditorBlock & {
  __typename?: 'CoreCommentContent';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentContentAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentContentAttributes = {
  __typename?: 'CoreCommentContentAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentContent&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCommentContent&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCommentContent&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentContent&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCommentContent&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCommentContent&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCommentContent&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCommentContent&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreCommentContent&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreCommentContent&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreCommentDate = EditorBlock & {
  __typename?: 'CoreCommentDate';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentDateAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentDateAttributes = {
  __typename?: 'CoreCommentDateAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentDate&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCommentDate&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCommentDate&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentDate&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCommentDate&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;format&quot; field on the &quot;CoreCommentDate&quot; block */
  format?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCommentDate&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;isLink&quot; field on the &quot;CoreCommentDate&quot; block */
  isLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCommentDate&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCommentDate&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreCommentDate&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreCommentEditLink = EditorBlock & {
  __typename?: 'CoreCommentEditLink';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentEditLinkAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentEditLinkAttributes = {
  __typename?: 'CoreCommentEditLinkAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentEditLink&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCommentEditLink&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCommentEditLink&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentEditLink&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCommentEditLink&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCommentEditLink&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CoreCommentEditLink&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCommentEditLink&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCommentEditLink&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreCommentEditLink&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreCommentReplyLink = EditorBlock & {
  __typename?: 'CoreCommentReplyLink';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentReplyLinkAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentReplyLinkAttributes = {
  __typename?: 'CoreCommentReplyLinkAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentReplyLink&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCommentReplyLink&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCommentReplyLink&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentReplyLink&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCommentReplyLink&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCommentReplyLink&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCommentReplyLink&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCommentReplyLink&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreCommentReplyLink&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreCommentTemplate = EditorBlock & {
  __typename?: 'CoreCommentTemplate';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentTemplateAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentTemplateAttributes = {
  __typename?: 'CoreCommentTemplateAttributes';
  /** The &quot;align&quot; field on the &quot;CoreCommentTemplate&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCommentTemplate&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCommentTemplate&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentTemplate&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCommentTemplate&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCommentTemplate&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCommentTemplate&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreComments = EditorBlock & {
  __typename?: 'CoreComments';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentsAttributes = {
  __typename?: 'CoreCommentsAttributes';
  /** The &quot;align&quot; field on the &quot;CoreComments&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreComments&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreComments&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreComments&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreComments&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreComments&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreComments&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;legacy&quot; field on the &quot;CoreComments&quot; block */
  legacy?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreComments&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreComments&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;tagName&quot; field on the &quot;CoreComments&quot; block */
  tagName?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreComments&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreCommentsPagination = EditorBlock & {
  __typename?: 'CoreCommentsPagination';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentsPaginationAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentsPaginationAttributes = {
  __typename?: 'CoreCommentsPaginationAttributes';
  /** The &quot;align&quot; field on the &quot;CoreCommentsPagination&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPagination&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCommentsPagination&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCommentsPagination&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPagination&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPagination&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPagination&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;layout&quot; field on the &quot;CoreCommentsPagination&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCommentsPagination&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;paginationArrow&quot; field on the &quot;CoreCommentsPagination&quot; block */
  paginationArrow?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCommentsPagination&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreCommentsPagination&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreCommentsPaginationNext = EditorBlock & {
  __typename?: 'CoreCommentsPaginationNext';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentsPaginationNextAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentsPaginationNextAttributes = {
  __typename?: 'CoreCommentsPaginationNextAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;label&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */
  label?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCommentsPaginationNext&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreCommentsPaginationNumbers = EditorBlock & {
  __typename?: 'CoreCommentsPaginationNumbers';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentsPaginationNumbersAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentsPaginationNumbersAttributes = {
  __typename?: 'CoreCommentsPaginationNumbersAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCommentsPaginationNumbers&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreCommentsPaginationPrevious = EditorBlock & {
  __typename?: 'CoreCommentsPaginationPrevious';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentsPaginationPreviousAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentsPaginationPreviousAttributes = {
  __typename?: 'CoreCommentsPaginationPreviousAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;label&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */
  label?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCommentsPaginationPrevious&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreCommentsTitle = EditorBlock & {
  __typename?: 'CoreCommentsTitle';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCommentsTitleAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCommentsTitleAttributes = {
  __typename?: 'CoreCommentsTitleAttributes';
  /** The &quot;align&quot; field on the &quot;CoreCommentsTitle&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreCommentsTitle&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCommentsTitle&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CoreCommentsTitle&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCommentsTitle&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCommentsTitle&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCommentsTitle&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCommentsTitle&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;level&quot; field on the &quot;CoreCommentsTitle&quot; block */
  level?: Maybe<Scalars['Float']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCommentsTitle&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;showCommentsCount&quot; field on the &quot;CoreCommentsTitle&quot; block */
  showCommentsCount?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;showPostTitle&quot; field on the &quot;CoreCommentsTitle&quot; block */
  showPostTitle?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCommentsTitle&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreCommentsTitle&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreCommentsTitle&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreCover = EditorBlock & {
  __typename?: 'CoreCover';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreCoverAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreCoverAttributes = {
  __typename?: 'CoreCoverAttributes';
  /** The &quot;align&quot; field on the &quot;CoreCover&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;allowedBlocks&quot; field on the &quot;CoreCover&quot; block */
  allowedBlocks?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;alt&quot; field on the &quot;CoreCover&quot; block */
  alt?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundType&quot; field on the &quot;CoreCover&quot; block */
  backgroundType?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreCover&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreCover&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;contentPosition&quot; field on the &quot;CoreCover&quot; block */
  contentPosition?: Maybe<Scalars['String']['output']>;
  /** The &quot;customGradient&quot; field on the &quot;CoreCover&quot; block */
  customGradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;customOverlayColor&quot; field on the &quot;CoreCover&quot; block */
  customOverlayColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;dimRatio&quot; field on the &quot;CoreCover&quot; block */
  dimRatio?: Maybe<Scalars['Float']['output']>;
  /** The &quot;focalPoint&quot; field on the &quot;CoreCover&quot; block */
  focalPoint?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreCover&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreCover&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreCover&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;hasParallax&quot; field on the &quot;CoreCover&quot; block */
  hasParallax?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;id&quot; field on the &quot;CoreCover&quot; block */
  id?: Maybe<Scalars['Float']['output']>;
  /** The &quot;isDark&quot; field on the &quot;CoreCover&quot; block */
  isDark?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;isRepeated&quot; field on the &quot;CoreCover&quot; block */
  isRepeated?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreCover&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;minHeight&quot; field on the &quot;CoreCover&quot; block */
  minHeight?: Maybe<Scalars['Float']['output']>;
  /** The &quot;minHeightUnit&quot; field on the &quot;CoreCover&quot; block */
  minHeightUnit?: Maybe<Scalars['String']['output']>;
  /** The &quot;overlayColor&quot; field on the &quot;CoreCover&quot; block */
  overlayColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreCover&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;tagName&quot; field on the &quot;CoreCover&quot; block */
  tagName?: Maybe<Scalars['String']['output']>;
  /** The &quot;url&quot; field on the &quot;CoreCover&quot; block */
  url?: Maybe<Scalars['String']['output']>;
  /** The &quot;useFeaturedImage&quot; field on the &quot;CoreCover&quot; block */
  useFeaturedImage?: Maybe<Scalars['Boolean']['output']>;
};

/** A block used for editing the site */
export type CoreEmbed = EditorBlock & {
  __typename?: 'CoreEmbed';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreEmbedAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreEmbedAttributes = {
  __typename?: 'CoreEmbedAttributes';
  /** The &quot;align&quot; field on the &quot;CoreEmbed&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;allowResponsive&quot; field on the &quot;CoreEmbed&quot; block */
  allowResponsive?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreEmbed&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;caption&quot; field on the &quot;CoreEmbed&quot; block */
  caption?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreEmbed&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreEmbed&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;previewable&quot; field on the &quot;CoreEmbed&quot; block */
  previewable?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;providerNameSlug&quot; field on the &quot;CoreEmbed&quot; block */
  providerNameSlug?: Maybe<Scalars['String']['output']>;
  /** The &quot;responsive&quot; field on the &quot;CoreEmbed&quot; block */
  responsive?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;type&quot; field on the &quot;CoreEmbed&quot; block */
  type?: Maybe<Scalars['String']['output']>;
  /** The &quot;url&quot; field on the &quot;CoreEmbed&quot; block */
  url?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreFile = EditorBlock & {
  __typename?: 'CoreFile';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreFileAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreFileAttributes = {
  __typename?: 'CoreFileAttributes';
  /** The &quot;align&quot; field on the &quot;CoreFile&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreFile&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreFile&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;displayPreview&quot; field on the &quot;CoreFile&quot; block */
  displayPreview?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;downloadButtonText&quot; field on the &quot;CoreFile&quot; block */
  downloadButtonText?: Maybe<Scalars['String']['output']>;
  /** The &quot;fileId&quot; field on the &quot;CoreFile&quot; block */
  fileId?: Maybe<Scalars['String']['output']>;
  /** The &quot;fileName&quot; field on the &quot;CoreFile&quot; block */
  fileName?: Maybe<Scalars['String']['output']>;
  /** The &quot;href&quot; field on the &quot;CoreFile&quot; block */
  href?: Maybe<Scalars['String']['output']>;
  /** The &quot;id&quot; field on the &quot;CoreFile&quot; block */
  id?: Maybe<Scalars['Float']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreFile&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;previewHeight&quot; field on the &quot;CoreFile&quot; block */
  previewHeight?: Maybe<Scalars['Float']['output']>;
  /** The &quot;showDownloadButton&quot; field on the &quot;CoreFile&quot; block */
  showDownloadButton?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;textLinkHref&quot; field on the &quot;CoreFile&quot; block */
  textLinkHref?: Maybe<Scalars['String']['output']>;
  /** The &quot;textLinkTarget&quot; field on the &quot;CoreFile&quot; block */
  textLinkTarget?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreFreeform = EditorBlock & {
  __typename?: 'CoreFreeform';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreFreeformAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreFreeformAttributes = {
  __typename?: 'CoreFreeformAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreFreeform&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;content&quot; field on the &quot;CoreFreeform&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreFreeform&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreGallery = EditorBlock & {
  __typename?: 'CoreGallery';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreGalleryAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreGalleryAttributes = {
  __typename?: 'CoreGalleryAttributes';
  /** The &quot;align&quot; field on the &quot;CoreGallery&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;allowResize&quot; field on the &quot;CoreGallery&quot; block */
  allowResize?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreGallery&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreGallery&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;caption&quot; field on the &quot;CoreGallery&quot; block */
  caption?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreGallery&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;columns&quot; field on the &quot;CoreGallery&quot; block */
  columns?: Maybe<Scalars['Float']['output']>;
  /** The &quot;fixedHeight&quot; field on the &quot;CoreGallery&quot; block */
  fixedHeight?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreGallery&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;ids&quot; field on the &quot;CoreGallery&quot; block */
  ids?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;imageCrop&quot; field on the &quot;CoreGallery&quot; block */
  imageCrop?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;images&quot; field on the &quot;CoreGallery&quot; block */
  images?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;layout&quot; field on the &quot;CoreGallery&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CoreGallery&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;linkTo&quot; field on the &quot;CoreGallery&quot; block */
  linkTo?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreGallery&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;shortCodeTransforms&quot; field on the &quot;CoreGallery&quot; block */
  shortCodeTransforms?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;sizeSlug&quot; field on the &quot;CoreGallery&quot; block */
  sizeSlug?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreGallery&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreGroup = EditorBlock & {
  __typename?: 'CoreGroup';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreGroupAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreGroupAttributes = {
  __typename?: 'CoreGroupAttributes';
  /** The &quot;align&quot; field on the &quot;CoreGroup&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreGroup&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreGroup&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CoreGroup&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreGroup&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreGroup&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreGroup&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreGroup&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;layout&quot; field on the &quot;CoreGroup&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreGroup&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreGroup&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;tagName&quot; field on the &quot;CoreGroup&quot; block */
  tagName?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreGroup&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreHeading = EditorBlock & {
  __typename?: 'CoreHeading';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreHeadingAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreHeadingAttributes = {
  __typename?: 'CoreHeadingAttributes';
  /** The &quot;align&quot; field on the &quot;CoreHeading&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreHeading&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreHeading&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreHeading&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content&quot; field on the &quot;CoreHeading&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreHeading&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreHeading&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreHeading&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;level&quot; field on the &quot;CoreHeading&quot; block */
  level?: Maybe<Scalars['Float']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreHeading&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;placeholder&quot; field on the &quot;CoreHeading&quot; block */
  placeholder?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreHeading&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreHeading&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreHeading&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreHomeLink = EditorBlock & {
  __typename?: 'CoreHomeLink';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreHomeLinkAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreHomeLinkAttributes = {
  __typename?: 'CoreHomeLinkAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreHomeLink&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreHomeLink&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreHomeLink&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreHomeLink&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;label&quot; field on the &quot;CoreHomeLink&quot; block */
  label?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreHomeLink&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreHomeLink&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreHtml = EditorBlock & {
  __typename?: 'CoreHtml';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreHtmlAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreHtmlAttributes = {
  __typename?: 'CoreHtmlAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreHtml&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;content&quot; field on the &quot;CoreHtml&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreHtml&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreImage = EditorBlock & {
  __typename?: 'CoreImage';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreImageAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreImageAttributes = {
  __typename?: 'CoreImageAttributes';
  /** The &quot;align&quot; field on the &quot;CoreImage&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;alt&quot; field on the &quot;CoreImage&quot; block */
  alt?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreImage&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CoreImage&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;caption&quot; field on the &quot;CoreImage&quot; block */
  caption?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreImage&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;height&quot; field on the &quot;CoreImage&quot; block */
  height?: Maybe<Scalars['Float']['output']>;
  /** The &quot;href&quot; field on the &quot;CoreImage&quot; block */
  href?: Maybe<Scalars['String']['output']>;
  /** The &quot;id&quot; field on the &quot;CoreImage&quot; block */
  id?: Maybe<Scalars['Float']['output']>;
  /** The &quot;linkClass&quot; field on the &quot;CoreImage&quot; block */
  linkClass?: Maybe<Scalars['String']['output']>;
  /** The &quot;linkDestination&quot; field on the &quot;CoreImage&quot; block */
  linkDestination?: Maybe<Scalars['String']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CoreImage&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreImage&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;rel&quot; field on the &quot;CoreImage&quot; block */
  rel?: Maybe<Scalars['String']['output']>;
  /** The &quot;sizeSlug&quot; field on the &quot;CoreImage&quot; block */
  sizeSlug?: Maybe<Scalars['String']['output']>;
  /** The &quot;src&quot; field on the &quot;CoreImage&quot; block */
  src?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreImage&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;title&quot; field on the &quot;CoreImage&quot; block */
  title?: Maybe<Scalars['String']['output']>;
  /** The &quot;url&quot; field on the &quot;CoreImage&quot; block */
  url?: Maybe<Scalars['String']['output']>;
  /** The &quot;width&quot; field on the &quot;CoreImage&quot; block */
  width?: Maybe<Scalars['Float']['output']>;
};

/** A block used for editing the site */
export type CoreLatestComments = EditorBlock & {
  __typename?: 'CoreLatestComments';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreLatestCommentsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreLatestCommentsAttributes = {
  __typename?: 'CoreLatestCommentsAttributes';
  /** The &quot;align&quot; field on the &quot;CoreLatestComments&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreLatestComments&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreLatestComments&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;commentsToShow&quot; field on the &quot;CoreLatestComments&quot; block */
  commentsToShow?: Maybe<Scalars['Float']['output']>;
  /** The &quot;displayAvatar&quot; field on the &quot;CoreLatestComments&quot; block */
  displayAvatar?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayDate&quot; field on the &quot;CoreLatestComments&quot; block */
  displayDate?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayExcerpt&quot; field on the &quot;CoreLatestComments&quot; block */
  displayExcerpt?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreLatestComments&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreLatestComments&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreLatestPosts = EditorBlock & {
  __typename?: 'CoreLatestPosts';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreLatestPostsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreLatestPostsAttributes = {
  __typename?: 'CoreLatestPostsAttributes';
  /** The &quot;addLinkToFeaturedImage&quot; field on the &quot;CoreLatestPosts&quot; block */
  addLinkToFeaturedImage?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;align&quot; field on the &quot;CoreLatestPosts&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreLatestPosts&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreLatestPosts&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;categories&quot; field on the &quot;CoreLatestPosts&quot; block */
  categories?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreLatestPosts&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;columns&quot; field on the &quot;CoreLatestPosts&quot; block */
  columns?: Maybe<Scalars['Float']['output']>;
  /** The &quot;displayAuthor&quot; field on the &quot;CoreLatestPosts&quot; block */
  displayAuthor?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayFeaturedImage&quot; field on the &quot;CoreLatestPosts&quot; block */
  displayFeaturedImage?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayPostContent&quot; field on the &quot;CoreLatestPosts&quot; block */
  displayPostContent?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayPostContentRadio&quot; field on the &quot;CoreLatestPosts&quot; block */
  displayPostContentRadio?: Maybe<Scalars['String']['output']>;
  /** The &quot;displayPostDate&quot; field on the &quot;CoreLatestPosts&quot; block */
  displayPostDate?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;excerptLength&quot; field on the &quot;CoreLatestPosts&quot; block */
  excerptLength?: Maybe<Scalars['Float']['output']>;
  /** The &quot;featuredImageAlign&quot; field on the &quot;CoreLatestPosts&quot; block */
  featuredImageAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;featuredImageSizeHeight&quot; field on the &quot;CoreLatestPosts&quot; block */
  featuredImageSizeHeight?: Maybe<Scalars['Float']['output']>;
  /** The &quot;featuredImageSizeSlug&quot; field on the &quot;CoreLatestPosts&quot; block */
  featuredImageSizeSlug?: Maybe<Scalars['String']['output']>;
  /** The &quot;featuredImageSizeWidth&quot; field on the &quot;CoreLatestPosts&quot; block */
  featuredImageSizeWidth?: Maybe<Scalars['Float']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreLatestPosts&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreLatestPosts&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreLatestPosts&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreLatestPosts&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;order&quot; field on the &quot;CoreLatestPosts&quot; block */
  order?: Maybe<Scalars['String']['output']>;
  /** The &quot;orderBy&quot; field on the &quot;CoreLatestPosts&quot; block */
  orderBy?: Maybe<Scalars['String']['output']>;
  /** The &quot;postLayout&quot; field on the &quot;CoreLatestPosts&quot; block */
  postLayout?: Maybe<Scalars['String']['output']>;
  /** The &quot;postsToShow&quot; field on the &quot;CoreLatestPosts&quot; block */
  postsToShow?: Maybe<Scalars['Float']['output']>;
  /** The &quot;selectedAuthor&quot; field on the &quot;CoreLatestPosts&quot; block */
  selectedAuthor?: Maybe<Scalars['Float']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreLatestPosts&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreLatestPosts&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreLegacyWidget = EditorBlock & {
  __typename?: 'CoreLegacyWidget';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreLegacyWidgetAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreLegacyWidgetAttributes = {
  __typename?: 'CoreLegacyWidgetAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreLegacyWidget&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;id&quot; field on the &quot;CoreLegacyWidget&quot; block */
  id?: Maybe<Scalars['String']['output']>;
  /** The &quot;idBase&quot; field on the &quot;CoreLegacyWidget&quot; block */
  idBase?: Maybe<Scalars['String']['output']>;
  /** The &quot;instance&quot; field on the &quot;CoreLegacyWidget&quot; block */
  instance?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreLegacyWidget&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreList = EditorBlock & {
  __typename?: 'CoreList';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreListAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreListAttributes = {
  __typename?: 'CoreListAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreList&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreList&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreList&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreList&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreList&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreList&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreList&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;ordered&quot; field on the &quot;CoreList&quot; block */
  ordered?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;placeholder&quot; field on the &quot;CoreList&quot; block */
  placeholder?: Maybe<Scalars['String']['output']>;
  /** The &quot;reversed&quot; field on the &quot;CoreList&quot; block */
  reversed?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;start&quot; field on the &quot;CoreList&quot; block */
  start?: Maybe<Scalars['Float']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreList&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreList&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;type&quot; field on the &quot;CoreList&quot; block */
  type?: Maybe<Scalars['String']['output']>;
  /** The &quot;values&quot; field on the &quot;CoreList&quot; block */
  values?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreListItem = EditorBlock & {
  __typename?: 'CoreListItem';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreListItemAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreListItemAttributes = {
  __typename?: 'CoreListItemAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreListItem&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreListItem&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content&quot; field on the &quot;CoreListItem&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreListItem&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreListItem&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreListItem&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;placeholder&quot; field on the &quot;CoreListItem&quot; block */
  placeholder?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreListItem&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreLoginout = EditorBlock & {
  __typename?: 'CoreLoginout';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreLoginoutAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreLoginoutAttributes = {
  __typename?: 'CoreLoginoutAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreLoginout&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreLoginout&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;displayLoginAsForm&quot; field on the &quot;CoreLoginout&quot; block */
  displayLoginAsForm?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreLoginout&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;redirectToCurrent&quot; field on the &quot;CoreLoginout&quot; block */
  redirectToCurrent?: Maybe<Scalars['Boolean']['output']>;
};

/** A block used for editing the site */
export type CoreMediaText = EditorBlock & {
  __typename?: 'CoreMediaText';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreMediaTextAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreMediaTextAttributes = {
  __typename?: 'CoreMediaTextAttributes';
  /** The &quot;align&quot; field on the &quot;CoreMediaText&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreMediaText&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreMediaText&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreMediaText&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;focalPoint&quot; field on the &quot;CoreMediaText&quot; block */
  focalPoint?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreMediaText&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreMediaText&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreMediaText&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;href&quot; field on the &quot;CoreMediaText&quot; block */
  href?: Maybe<Scalars['String']['output']>;
  /** The &quot;imageFill&quot; field on the &quot;CoreMediaText&quot; block */
  imageFill?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;isStackedOnMobile&quot; field on the &quot;CoreMediaText&quot; block */
  isStackedOnMobile?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;linkClass&quot; field on the &quot;CoreMediaText&quot; block */
  linkClass?: Maybe<Scalars['String']['output']>;
  /** The &quot;linkDestination&quot; field on the &quot;CoreMediaText&quot; block */
  linkDestination?: Maybe<Scalars['String']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CoreMediaText&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreMediaText&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;mediaAlt&quot; field on the &quot;CoreMediaText&quot; block */
  mediaAlt?: Maybe<Scalars['String']['output']>;
  /** The &quot;mediaId&quot; field on the &quot;CoreMediaText&quot; block */
  mediaId?: Maybe<Scalars['Float']['output']>;
  /** The &quot;mediaLink&quot; field on the &quot;CoreMediaText&quot; block */
  mediaLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;mediaPosition&quot; field on the &quot;CoreMediaText&quot; block */
  mediaPosition?: Maybe<Scalars['String']['output']>;
  /** The &quot;mediaSizeSlug&quot; field on the &quot;CoreMediaText&quot; block */
  mediaSizeSlug?: Maybe<Scalars['String']['output']>;
  /** The &quot;mediaType&quot; field on the &quot;CoreMediaText&quot; block */
  mediaType?: Maybe<Scalars['String']['output']>;
  /** The &quot;mediaUrl&quot; field on the &quot;CoreMediaText&quot; block */
  mediaUrl?: Maybe<Scalars['String']['output']>;
  /** The &quot;mediaWidth&quot; field on the &quot;CoreMediaText&quot; block */
  mediaWidth?: Maybe<Scalars['Float']['output']>;
  /** The &quot;rel&quot; field on the &quot;CoreMediaText&quot; block */
  rel?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreMediaText&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreMediaText&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;verticalAlignment&quot; field on the &quot;CoreMediaText&quot; block */
  verticalAlignment?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreMissing = EditorBlock & {
  __typename?: 'CoreMissing';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreMissingAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreMissingAttributes = {
  __typename?: 'CoreMissingAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreMissing&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreMissing&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;originalContent&quot; field on the &quot;CoreMissing&quot; block */
  originalContent?: Maybe<Scalars['String']['output']>;
  /** The &quot;originalName&quot; field on the &quot;CoreMissing&quot; block */
  originalName?: Maybe<Scalars['String']['output']>;
  /** The &quot;originalUndelimitedContent&quot; field on the &quot;CoreMissing&quot; block */
  originalUndelimitedContent?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreMore = EditorBlock & {
  __typename?: 'CoreMore';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreMoreAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreMoreAttributes = {
  __typename?: 'CoreMoreAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreMore&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;customText&quot; field on the &quot;CoreMore&quot; block */
  customText?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreMore&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;noTeaser&quot; field on the &quot;CoreMore&quot; block */
  noTeaser?: Maybe<Scalars['Boolean']['output']>;
};

/** A block used for editing the site */
export type CoreNavigation = EditorBlock & {
  __typename?: 'CoreNavigation';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreNavigationAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreNavigationAttributes = {
  __typename?: 'CoreNavigationAttributes';
  /** The &quot;align&quot; field on the &quot;CoreNavigation&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreNavigation&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreNavigation&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreNavigation&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;customBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */
  customBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;customOverlayBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */
  customOverlayBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;customOverlayTextColor&quot; field on the &quot;CoreNavigation&quot; block */
  customOverlayTextColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;customTextColor&quot; field on the &quot;CoreNavigation&quot; block */
  customTextColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreNavigation&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreNavigation&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;hasIcon&quot; field on the &quot;CoreNavigation&quot; block */
  hasIcon?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;icon&quot; field on the &quot;CoreNavigation&quot; block */
  icon?: Maybe<Scalars['String']['output']>;
  /** The &quot;layout&quot; field on the &quot;CoreNavigation&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreNavigation&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;maxNestingLevel&quot; field on the &quot;CoreNavigation&quot; block */
  maxNestingLevel?: Maybe<Scalars['Float']['output']>;
  /** The &quot;openSubmenusOnClick&quot; field on the &quot;CoreNavigation&quot; block */
  openSubmenusOnClick?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;overlayBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */
  overlayBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;overlayMenu&quot; field on the &quot;CoreNavigation&quot; block */
  overlayMenu?: Maybe<Scalars['String']['output']>;
  /** The &quot;overlayTextColor&quot; field on the &quot;CoreNavigation&quot; block */
  overlayTextColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;ref&quot; field on the &quot;CoreNavigation&quot; block */
  ref?: Maybe<Scalars['Float']['output']>;
  /** The &quot;rgbBackgroundColor&quot; field on the &quot;CoreNavigation&quot; block */
  rgbBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;rgbTextColor&quot; field on the &quot;CoreNavigation&quot; block */
  rgbTextColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;showSubmenuIcon&quot; field on the &quot;CoreNavigation&quot; block */
  showSubmenuIcon?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreNavigation&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreNavigation&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;__unstableLocation&quot; field on the &quot;CoreNavigation&quot; block */
  unstableLocation?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreNavigationLink = EditorBlock & {
  __typename?: 'CoreNavigationLink';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreNavigationLinkAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreNavigationLinkAttributes = {
  __typename?: 'CoreNavigationLinkAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreNavigationLink&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreNavigationLink&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;description&quot; field on the &quot;CoreNavigationLink&quot; block */
  description?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreNavigationLink&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreNavigationLink&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;id&quot; field on the &quot;CoreNavigationLink&quot; block */
  id?: Maybe<Scalars['Float']['output']>;
  /** The &quot;isTopLevelLink&quot; field on the &quot;CoreNavigationLink&quot; block */
  isTopLevelLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;kind&quot; field on the &quot;CoreNavigationLink&quot; block */
  kind?: Maybe<Scalars['String']['output']>;
  /** The &quot;label&quot; field on the &quot;CoreNavigationLink&quot; block */
  label?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreNavigationLink&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;opensInNewTab&quot; field on the &quot;CoreNavigationLink&quot; block */
  opensInNewTab?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;rel&quot; field on the &quot;CoreNavigationLink&quot; block */
  rel?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreNavigationLink&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;title&quot; field on the &quot;CoreNavigationLink&quot; block */
  title?: Maybe<Scalars['String']['output']>;
  /** The &quot;type&quot; field on the &quot;CoreNavigationLink&quot; block */
  type?: Maybe<Scalars['String']['output']>;
  /** The &quot;url&quot; field on the &quot;CoreNavigationLink&quot; block */
  url?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreNavigationSubmenu = EditorBlock & {
  __typename?: 'CoreNavigationSubmenu';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreNavigationSubmenuAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreNavigationSubmenuAttributes = {
  __typename?: 'CoreNavigationSubmenuAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;description&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  description?: Maybe<Scalars['String']['output']>;
  /** The &quot;id&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  id?: Maybe<Scalars['Float']['output']>;
  /** The &quot;isTopLevelItem&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  isTopLevelItem?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;kind&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  kind?: Maybe<Scalars['String']['output']>;
  /** The &quot;label&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  label?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;opensInNewTab&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  opensInNewTab?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;rel&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  rel?: Maybe<Scalars['String']['output']>;
  /** The &quot;title&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  title?: Maybe<Scalars['String']['output']>;
  /** The &quot;type&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  type?: Maybe<Scalars['String']['output']>;
  /** The &quot;url&quot; field on the &quot;CoreNavigationSubmenu&quot; block */
  url?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreNextpage = EditorBlock & {
  __typename?: 'CoreNextpage';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreNextpageAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreNextpageAttributes = {
  __typename?: 'CoreNextpageAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreNextpage&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreNextpage&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CorePageList = EditorBlock & {
  __typename?: 'CorePageList';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePageListAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePageListAttributes = {
  __typename?: 'CorePageListAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CorePageList&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePageList&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePageList&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePageList&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;isNested&quot; field on the &quot;CorePageList&quot; block */
  isNested?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePageList&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;parentPageID&quot; field on the &quot;CorePageList&quot; block */
  parentPageID?: Maybe<Scalars['Int']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePageList&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CorePageListItem = EditorBlock & {
  __typename?: 'CorePageListItem';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePageListItemAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePageListItemAttributes = {
  __typename?: 'CorePageListItemAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CorePageListItem&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePageListItem&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;hasChildren&quot; field on the &quot;CorePageListItem&quot; block */
  hasChildren?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;id&quot; field on the &quot;CorePageListItem&quot; block */
  id?: Maybe<Scalars['Float']['output']>;
  /** The &quot;label&quot; field on the &quot;CorePageListItem&quot; block */
  label?: Maybe<Scalars['String']['output']>;
  /** The &quot;link&quot; field on the &quot;CorePageListItem&quot; block */
  link?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePageListItem&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;title&quot; field on the &quot;CorePageListItem&quot; block */
  title?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreParagraph = EditorBlock & {
  __typename?: 'CoreParagraph';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreParagraphAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreParagraphAttributes = {
  __typename?: 'CoreParagraphAttributes';
  /** The &quot;align&quot; field on the &quot;CoreParagraph&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreParagraph&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreParagraph&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreParagraph&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content&quot; field on the &quot;CoreParagraph&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;cssClassName&quot; field on the &quot;CoreParagraph&quot; block */
  cssClassName?: Maybe<Scalars['String']['output']>;
  /** The &quot;direction&quot; field on the &quot;CoreParagraph&quot; block */
  direction?: Maybe<Scalars['String']['output']>;
  /** The &quot;dropCap&quot; field on the &quot;CoreParagraph&quot; block */
  dropCap?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreParagraph&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreParagraph&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreParagraph&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreParagraph&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;placeholder&quot; field on the &quot;CoreParagraph&quot; block */
  placeholder?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreParagraph&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreParagraph&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePattern = EditorBlock & {
  __typename?: 'CorePattern';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePatternAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePatternAttributes = {
  __typename?: 'CorePatternAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CorePattern&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePattern&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePattern&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;slug&quot; field on the &quot;CorePattern&quot; block */
  slug?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostAuthor = EditorBlock & {
  __typename?: 'CorePostAuthor';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostAuthorAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostAuthorAttributes = {
  __typename?: 'CorePostAuthorAttributes';
  /** The &quot;avatarSize&quot; field on the &quot;CorePostAuthor&quot; block */
  avatarSize?: Maybe<Scalars['Float']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CorePostAuthor&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostAuthor&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;byline&quot; field on the &quot;CorePostAuthor&quot; block */
  byline?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostAuthor&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePostAuthor&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostAuthor&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePostAuthor&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;isLink&quot; field on the &quot;CorePostAuthor&quot; block */
  isLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CorePostAuthor&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostAuthor&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;showAvatar&quot; field on the &quot;CorePostAuthor&quot; block */
  showAvatar?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;showBio&quot; field on the &quot;CorePostAuthor&quot; block */
  showBio?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostAuthor&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CorePostAuthor&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePostAuthor&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostAuthorBiography = EditorBlock & {
  __typename?: 'CorePostAuthorBiography';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostAuthorBiographyAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostAuthorBiographyAttributes = {
  __typename?: 'CorePostAuthorBiographyAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CorePostAuthorBiography&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostAuthorBiography&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostAuthorBiography&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePostAuthorBiography&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostAuthorBiography&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePostAuthorBiography&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostAuthorBiography&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostAuthorBiography&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CorePostAuthorBiography&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePostAuthorBiography&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostAuthorName = EditorBlock & {
  __typename?: 'CorePostAuthorName';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostAuthorNameAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostAuthorNameAttributes = {
  __typename?: 'CorePostAuthorNameAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CorePostAuthorName&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostAuthorName&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostAuthorName&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePostAuthorName&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostAuthorName&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePostAuthorName&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;isLink&quot; field on the &quot;CorePostAuthorName&quot; block */
  isLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CorePostAuthorName&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostAuthorName&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostAuthorName&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CorePostAuthorName&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePostAuthorName&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostComments = EditorBlock & {
  __typename?: 'CorePostComments';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostCommentsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostCommentsAttributes = {
  __typename?: 'CorePostCommentsAttributes';
  /** The &quot;align&quot; field on the &quot;CorePostComments&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CorePostComments&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostComments&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostComments&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostComments&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePostComments&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostComments&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostComments&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CorePostComments&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePostComments&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostCommentsForm = EditorBlock & {
  __typename?: 'CorePostCommentsForm';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostCommentsFormAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostCommentsFormAttributes = {
  __typename?: 'CorePostCommentsFormAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CorePostCommentsForm&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostCommentsForm&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostCommentsForm&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostCommentsForm&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePostCommentsForm&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostCommentsForm&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostCommentsForm&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CorePostCommentsForm&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePostCommentsForm&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostContent = EditorBlock & {
  __typename?: 'CorePostContent';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostContentAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostContentAttributes = {
  __typename?: 'CorePostContentAttributes';
  /** The &quot;align&quot; field on the &quot;CorePostContent&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostContent&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostContent&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePostContent&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostContent&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;layout&quot; field on the &quot;CorePostContent&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostContent&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostContent&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CorePostDate = EditorBlock & {
  __typename?: 'CorePostDate';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostDateAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostDateAttributes = {
  __typename?: 'CorePostDateAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CorePostDate&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostDate&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostDate&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;displayType&quot; field on the &quot;CorePostDate&quot; block */
  displayType?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePostDate&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostDate&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;format&quot; field on the &quot;CorePostDate&quot; block */
  format?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePostDate&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;isLink&quot; field on the &quot;CorePostDate&quot; block */
  isLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostDate&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostDate&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CorePostDate&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePostDate&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostExcerpt = EditorBlock & {
  __typename?: 'CorePostExcerpt';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostExcerptAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostExcerptAttributes = {
  __typename?: 'CorePostExcerptAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CorePostExcerpt&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostExcerpt&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostExcerpt&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePostExcerpt&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostExcerpt&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePostExcerpt&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostExcerpt&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;moreText&quot; field on the &quot;CorePostExcerpt&quot; block */
  moreText?: Maybe<Scalars['String']['output']>;
  /** The &quot;showMoreOnNewLine&quot; field on the &quot;CorePostExcerpt&quot; block */
  showMoreOnNewLine?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostExcerpt&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CorePostExcerpt&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePostExcerpt&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostFeaturedImage = EditorBlock & {
  __typename?: 'CorePostFeaturedImage';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostFeaturedImageAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostFeaturedImageAttributes = {
  __typename?: 'CorePostFeaturedImageAttributes';
  /** The &quot;align&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;customGradient&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  customGradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;customOverlayColor&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  customOverlayColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;dimRatio&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  dimRatio?: Maybe<Scalars['Float']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;height&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  height?: Maybe<Scalars['String']['output']>;
  /** The &quot;isLink&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  isLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;overlayColor&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  overlayColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;rel&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  rel?: Maybe<Scalars['String']['output']>;
  /** The &quot;scale&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  scale?: Maybe<Scalars['String']['output']>;
  /** The &quot;sizeSlug&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  sizeSlug?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;width&quot; field on the &quot;CorePostFeaturedImage&quot; block */
  width?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostNavigationLink = EditorBlock & {
  __typename?: 'CorePostNavigationLink';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostNavigationLinkAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostNavigationLinkAttributes = {
  __typename?: 'CorePostNavigationLinkAttributes';
  /** The &quot;arrow&quot; field on the &quot;CorePostNavigationLink&quot; block */
  arrow?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CorePostNavigationLink&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostNavigationLink&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostNavigationLink&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePostNavigationLink&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostNavigationLink&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;label&quot; field on the &quot;CorePostNavigationLink&quot; block */
  label?: Maybe<Scalars['String']['output']>;
  /** The &quot;linkLabel&quot; field on the &quot;CorePostNavigationLink&quot; block */
  linkLabel?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostNavigationLink&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;showTitle&quot; field on the &quot;CorePostNavigationLink&quot; block */
  showTitle?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostNavigationLink&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CorePostNavigationLink&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePostNavigationLink&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;type&quot; field on the &quot;CorePostNavigationLink&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostTemplate = EditorBlock & {
  __typename?: 'CorePostTemplate';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostTemplateAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostTemplateAttributes = {
  __typename?: 'CorePostTemplateAttributes';
  /** The &quot;align&quot; field on the &quot;CorePostTemplate&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CorePostTemplate&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostTemplate&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostTemplate&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePostTemplate&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostTemplate&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePostTemplate&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;layout&quot; field on the &quot;CorePostTemplate&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostTemplate&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostTemplate&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePostTemplate&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostTerms = EditorBlock & {
  __typename?: 'CorePostTerms';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostTermsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostTermsAttributes = {
  __typename?: 'CorePostTermsAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CorePostTerms&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostTerms&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostTerms&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePostTerms&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostTerms&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePostTerms&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostTerms&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;prefix&quot; field on the &quot;CorePostTerms&quot; block */
  prefix?: Maybe<Scalars['String']['output']>;
  /** The &quot;separator&quot; field on the &quot;CorePostTerms&quot; block */
  separator?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostTerms&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;suffix&quot; field on the &quot;CorePostTerms&quot; block */
  suffix?: Maybe<Scalars['String']['output']>;
  /** The &quot;term&quot; field on the &quot;CorePostTerms&quot; block */
  term?: Maybe<Scalars['String']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CorePostTerms&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePostTerms&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePostTitle = EditorBlock & {
  __typename?: 'CorePostTitle';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePostTitleAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePostTitleAttributes = {
  __typename?: 'CorePostTitleAttributes';
  /** The &quot;align&quot; field on the &quot;CorePostTitle&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CorePostTitle&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePostTitle&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePostTitle&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePostTitle&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePostTitle&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePostTitle&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;isLink&quot; field on the &quot;CorePostTitle&quot; block */
  isLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;level&quot; field on the &quot;CorePostTitle&quot; block */
  level?: Maybe<Scalars['Float']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CorePostTitle&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePostTitle&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;rel&quot; field on the &quot;CorePostTitle&quot; block */
  rel?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePostTitle&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CorePostTitle&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePostTitle&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePreformatted = EditorBlock & {
  __typename?: 'CorePreformatted';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePreformattedAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePreformattedAttributes = {
  __typename?: 'CorePreformattedAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CorePreformatted&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePreformatted&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePreformatted&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content&quot; field on the &quot;CorePreformatted&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePreformatted&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePreformatted&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePreformatted&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePreformatted&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePreformatted&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePreformatted&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CorePullquote = EditorBlock & {
  __typename?: 'CorePullquote';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CorePullquoteAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CorePullquoteAttributes = {
  __typename?: 'CorePullquoteAttributes';
  /** The &quot;align&quot; field on the &quot;CorePullquote&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CorePullquote&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CorePullquote&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CorePullquote&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;citation&quot; field on the &quot;CorePullquote&quot; block */
  citation?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CorePullquote&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CorePullquote&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CorePullquote&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CorePullquote&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CorePullquote&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CorePullquote&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CorePullquote&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CorePullquote&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;value&quot; field on the &quot;CorePullquote&quot; block */
  value?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreQuery = EditorBlock & {
  __typename?: 'CoreQuery';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreQueryAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreQueryAttributes = {
  __typename?: 'CoreQueryAttributes';
  /** The &quot;align&quot; field on the &quot;CoreQuery&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreQuery&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreQuery&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;displayLayout&quot; field on the &quot;CoreQuery&quot; block */
  displayLayout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;layout&quot; field on the &quot;CoreQuery&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreQuery&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;namespace&quot; field on the &quot;CoreQuery&quot; block */
  namespace?: Maybe<Scalars['String']['output']>;
  /** The &quot;query&quot; field on the &quot;CoreQuery&quot; block */
  query?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;queryId&quot; field on the &quot;CoreQuery&quot; block */
  queryId?: Maybe<Scalars['Float']['output']>;
  /** The &quot;tagName&quot; field on the &quot;CoreQuery&quot; block */
  tagName?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreQueryNoResults = EditorBlock & {
  __typename?: 'CoreQueryNoResults';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreQueryNoResultsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreQueryNoResultsAttributes = {
  __typename?: 'CoreQueryNoResultsAttributes';
  /** The &quot;align&quot; field on the &quot;CoreQueryNoResults&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryNoResults&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreQueryNoResults&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreQueryNoResults&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryNoResults&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreQueryNoResults&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreQueryNoResults&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreQueryNoResults&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreQueryNoResults&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreQueryNoResults&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreQueryPagination = EditorBlock & {
  __typename?: 'CoreQueryPagination';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreQueryPaginationAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreQueryPaginationAttributes = {
  __typename?: 'CoreQueryPaginationAttributes';
  /** The &quot;align&quot; field on the &quot;CoreQueryPagination&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPagination&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreQueryPagination&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreQueryPagination&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPagination&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPagination&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreQueryPagination&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;layout&quot; field on the &quot;CoreQueryPagination&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreQueryPagination&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;paginationArrow&quot; field on the &quot;CoreQueryPagination&quot; block */
  paginationArrow?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreQueryPagination&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreQueryPagination&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreQueryPaginationNext = EditorBlock & {
  __typename?: 'CoreQueryPaginationNext';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreQueryPaginationNextAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreQueryPaginationNextAttributes = {
  __typename?: 'CoreQueryPaginationNextAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationNext&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreQueryPaginationNext&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreQueryPaginationNext&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationNext&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationNext&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreQueryPaginationNext&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;label&quot; field on the &quot;CoreQueryPaginationNext&quot; block */
  label?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreQueryPaginationNext&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreQueryPaginationNext&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreQueryPaginationNumbers = EditorBlock & {
  __typename?: 'CoreQueryPaginationNumbers';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreQueryPaginationNumbersAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreQueryPaginationNumbersAttributes = {
  __typename?: 'CoreQueryPaginationNumbersAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreQueryPaginationNumbers&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreQueryPaginationPrevious = EditorBlock & {
  __typename?: 'CoreQueryPaginationPrevious';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreQueryPaginationPreviousAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreQueryPaginationPreviousAttributes = {
  __typename?: 'CoreQueryPaginationPreviousAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;label&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */
  label?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreQueryPaginationPrevious&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreQueryTitle = EditorBlock & {
  __typename?: 'CoreQueryTitle';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreQueryTitleAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreQueryTitleAttributes = {
  __typename?: 'CoreQueryTitleAttributes';
  /** The &quot;align&quot; field on the &quot;CoreQueryTitle&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreQueryTitle&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreQueryTitle&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreQueryTitle&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreQueryTitle&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreQueryTitle&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreQueryTitle&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;level&quot; field on the &quot;CoreQueryTitle&quot; block */
  level?: Maybe<Scalars['Float']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreQueryTitle&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;showPrefix&quot; field on the &quot;CoreQueryTitle&quot; block */
  showPrefix?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;showSearchTerm&quot; field on the &quot;CoreQueryTitle&quot; block */
  showSearchTerm?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreQueryTitle&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreQueryTitle&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreQueryTitle&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;type&quot; field on the &quot;CoreQueryTitle&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreQuote = EditorBlock & {
  __typename?: 'CoreQuote';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreQuoteAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreQuoteAttributes = {
  __typename?: 'CoreQuoteAttributes';
  /** The &quot;align&quot; field on the &quot;CoreQuote&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreQuote&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreQuote&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;citation&quot; field on the &quot;CoreQuote&quot; block */
  citation?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreQuote&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreQuote&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreQuote&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreQuote&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreQuote&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreQuote&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreQuote&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;value&quot; field on the &quot;CoreQuote&quot; block */
  value?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreReadMore = EditorBlock & {
  __typename?: 'CoreReadMore';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreReadMoreAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreReadMoreAttributes = {
  __typename?: 'CoreReadMoreAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreReadMore&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreReadMore&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CoreReadMore&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreReadMore&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content&quot; field on the &quot;CoreReadMore&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreReadMore&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreReadMore&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreReadMore&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CoreReadMore&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreReadMore&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreReadMore&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreReadMore&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreRss = EditorBlock & {
  __typename?: 'CoreRss';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreRssAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreRssAttributes = {
  __typename?: 'CoreRssAttributes';
  /** The &quot;align&quot; field on the &quot;CoreRss&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockLayout&quot; field on the &quot;CoreRss&quot; block */
  blockLayout?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreRss&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreRss&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;columns&quot; field on the &quot;CoreRss&quot; block */
  columns?: Maybe<Scalars['Float']['output']>;
  /** The &quot;displayAuthor&quot; field on the &quot;CoreRss&quot; block */
  displayAuthor?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayDate&quot; field on the &quot;CoreRss&quot; block */
  displayDate?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayExcerpt&quot; field on the &quot;CoreRss&quot; block */
  displayExcerpt?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;excerptLength&quot; field on the &quot;CoreRss&quot; block */
  excerptLength?: Maybe<Scalars['Float']['output']>;
  /** The &quot;feedURL&quot; field on the &quot;CoreRss&quot; block */
  feedURL?: Maybe<Scalars['String']['output']>;
  /** The &quot;itemsToShow&quot; field on the &quot;CoreRss&quot; block */
  itemsToShow?: Maybe<Scalars['Float']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreRss&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreSearch = EditorBlock & {
  __typename?: 'CoreSearch';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreSearchAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreSearchAttributes = {
  __typename?: 'CoreSearchAttributes';
  /** The &quot;align&quot; field on the &quot;CoreSearch&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreSearch&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreSearch&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CoreSearch&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;buttonPosition&quot; field on the &quot;CoreSearch&quot; block */
  buttonPosition?: Maybe<Scalars['String']['output']>;
  /** The &quot;buttonText&quot; field on the &quot;CoreSearch&quot; block */
  buttonText?: Maybe<Scalars['String']['output']>;
  /** The &quot;buttonUseIcon&quot; field on the &quot;CoreSearch&quot; block */
  buttonUseIcon?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreSearch&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreSearch&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreSearch&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreSearch&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;label&quot; field on the &quot;CoreSearch&quot; block */
  label?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreSearch&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;placeholder&quot; field on the &quot;CoreSearch&quot; block */
  placeholder?: Maybe<Scalars['String']['output']>;
  /** The &quot;query&quot; field on the &quot;CoreSearch&quot; block */
  query?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;showLabel&quot; field on the &quot;CoreSearch&quot; block */
  showLabel?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreSearch&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreSearch&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;width&quot; field on the &quot;CoreSearch&quot; block */
  width?: Maybe<Scalars['Float']['output']>;
  /** The &quot;widthUnit&quot; field on the &quot;CoreSearch&quot; block */
  widthUnit?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreSeparator = EditorBlock & {
  __typename?: 'CoreSeparator';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreSeparatorAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreSeparatorAttributes = {
  __typename?: 'CoreSeparatorAttributes';
  /** The &quot;align&quot; field on the &quot;CoreSeparator&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreSeparator&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreSeparator&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreSeparator&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreSeparator&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreSeparator&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;opacity&quot; field on the &quot;CoreSeparator&quot; block */
  opacity?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreSeparator&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreShortcode = EditorBlock & {
  __typename?: 'CoreShortcode';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreShortcodeAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreShortcodeAttributes = {
  __typename?: 'CoreShortcodeAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreShortcode&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreShortcode&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;text&quot; field on the &quot;CoreShortcode&quot; block */
  text?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreSiteLogo = EditorBlock & {
  __typename?: 'CoreSiteLogo';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreSiteLogoAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreSiteLogoAttributes = {
  __typename?: 'CoreSiteLogoAttributes';
  /** The &quot;align&quot; field on the &quot;CoreSiteLogo&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreSiteLogo&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreSiteLogo&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;isLink&quot; field on the &quot;CoreSiteLogo&quot; block */
  isLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CoreSiteLogo&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreSiteLogo&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;shouldSyncIcon&quot; field on the &quot;CoreSiteLogo&quot; block */
  shouldSyncIcon?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreSiteLogo&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;width&quot; field on the &quot;CoreSiteLogo&quot; block */
  width?: Maybe<Scalars['Float']['output']>;
};

/** A block used for editing the site */
export type CoreSiteTagline = EditorBlock & {
  __typename?: 'CoreSiteTagline';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreSiteTaglineAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreSiteTaglineAttributes = {
  __typename?: 'CoreSiteTaglineAttributes';
  /** The &quot;align&quot; field on the &quot;CoreSiteTagline&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreSiteTagline&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreSiteTagline&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreSiteTagline&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreSiteTagline&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreSiteTagline&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreSiteTagline&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreSiteTagline&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreSiteTagline&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreSiteTagline&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreSiteTagline&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreSiteTitle = EditorBlock & {
  __typename?: 'CoreSiteTitle';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreSiteTitleAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreSiteTitleAttributes = {
  __typename?: 'CoreSiteTitleAttributes';
  /** The &quot;align&quot; field on the &quot;CoreSiteTitle&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreSiteTitle&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreSiteTitle&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreSiteTitle&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreSiteTitle&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreSiteTitle&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreSiteTitle&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;isLink&quot; field on the &quot;CoreSiteTitle&quot; block */
  isLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;level&quot; field on the &quot;CoreSiteTitle&quot; block */
  level?: Maybe<Scalars['Float']['output']>;
  /** The &quot;linkTarget&quot; field on the &quot;CoreSiteTitle&quot; block */
  linkTarget?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreSiteTitle&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreSiteTitle&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreSiteTitle&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreSiteTitle&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreSocialLink = EditorBlock & {
  __typename?: 'CoreSocialLink';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreSocialLinkAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreSocialLinkAttributes = {
  __typename?: 'CoreSocialLinkAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreSocialLink&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreSocialLink&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;label&quot; field on the &quot;CoreSocialLink&quot; block */
  label?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreSocialLink&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;rel&quot; field on the &quot;CoreSocialLink&quot; block */
  rel?: Maybe<Scalars['String']['output']>;
  /** The &quot;service&quot; field on the &quot;CoreSocialLink&quot; block */
  service?: Maybe<Scalars['String']['output']>;
  /** The &quot;url&quot; field on the &quot;CoreSocialLink&quot; block */
  url?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreSocialLinks = EditorBlock & {
  __typename?: 'CoreSocialLinks';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreSocialLinksAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreSocialLinksAttributes = {
  __typename?: 'CoreSocialLinksAttributes';
  /** The &quot;align&quot; field on the &quot;CoreSocialLinks&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreSocialLinks&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreSocialLinks&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreSocialLinks&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;customIconBackgroundColor&quot; field on the &quot;CoreSocialLinks&quot; block */
  customIconBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;customIconColor&quot; field on the &quot;CoreSocialLinks&quot; block */
  customIconColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreSocialLinks&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;iconBackgroundColor&quot; field on the &quot;CoreSocialLinks&quot; block */
  iconBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;iconBackgroundColorValue&quot; field on the &quot;CoreSocialLinks&quot; block */
  iconBackgroundColorValue?: Maybe<Scalars['String']['output']>;
  /** The &quot;iconColor&quot; field on the &quot;CoreSocialLinks&quot; block */
  iconColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;iconColorValue&quot; field on the &quot;CoreSocialLinks&quot; block */
  iconColorValue?: Maybe<Scalars['String']['output']>;
  /** The &quot;layout&quot; field on the &quot;CoreSocialLinks&quot; block */
  layout?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreSocialLinks&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;openInNewTab&quot; field on the &quot;CoreSocialLinks&quot; block */
  openInNewTab?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;showLabels&quot; field on the &quot;CoreSocialLinks&quot; block */
  showLabels?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;size&quot; field on the &quot;CoreSocialLinks&quot; block */
  size?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreSocialLinks&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreSpacer = EditorBlock & {
  __typename?: 'CoreSpacer';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreSpacerAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreSpacerAttributes = {
  __typename?: 'CoreSpacerAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreSpacer&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreSpacer&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;height&quot; field on the &quot;CoreSpacer&quot; block */
  height?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreSpacer&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreSpacer&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;width&quot; field on the &quot;CoreSpacer&quot; block */
  width?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreTable = EditorBlock & {
  __typename?: 'CoreTable';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreTableAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreTableAttributes = {
  __typename?: 'CoreTableAttributes';
  /** The &quot;align&quot; field on the &quot;CoreTable&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreTable&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreTable&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;body&quot; field on the &quot;CoreTable&quot; block */
  body?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;borderColor&quot; field on the &quot;CoreTable&quot; block */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;caption&quot; field on the &quot;CoreTable&quot; block */
  caption?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreTable&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreTable&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreTable&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;foot&quot; field on the &quot;CoreTable&quot; block */
  foot?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreTable&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;hasFixedLayout&quot; field on the &quot;CoreTable&quot; block */
  hasFixedLayout?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;head&quot; field on the &quot;CoreTable&quot; block */
  head?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreTable&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreTable&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreTable&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreTagCloud = EditorBlock & {
  __typename?: 'CoreTagCloud';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreTagCloudAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreTagCloudAttributes = {
  __typename?: 'CoreTagCloudAttributes';
  /** The &quot;align&quot; field on the &quot;CoreTagCloud&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreTagCloud&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreTagCloud&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreTagCloud&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;largestFontSize&quot; field on the &quot;CoreTagCloud&quot; block */
  largestFontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreTagCloud&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;numberOfTags&quot; field on the &quot;CoreTagCloud&quot; block */
  numberOfTags?: Maybe<Scalars['Float']['output']>;
  /** The &quot;showTagCounts&quot; field on the &quot;CoreTagCloud&quot; block */
  showTagCounts?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;smallestFontSize&quot; field on the &quot;CoreTagCloud&quot; block */
  smallestFontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreTagCloud&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;taxonomy&quot; field on the &quot;CoreTagCloud&quot; block */
  taxonomy?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreTemplatePart = EditorBlock & {
  __typename?: 'CoreTemplatePart';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreTemplatePartAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreTemplatePartAttributes = {
  __typename?: 'CoreTemplatePartAttributes';
  /** The &quot;align&quot; field on the &quot;CoreTemplatePart&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;area&quot; field on the &quot;CoreTemplatePart&quot; block */
  area?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreTemplatePart&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreTemplatePart&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreTemplatePart&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;slug&quot; field on the &quot;CoreTemplatePart&quot; block */
  slug?: Maybe<Scalars['String']['output']>;
  /** The &quot;tagName&quot; field on the &quot;CoreTemplatePart&quot; block */
  tagName?: Maybe<Scalars['String']['output']>;
  /** The &quot;theme&quot; field on the &quot;CoreTemplatePart&quot; block */
  theme?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreTermDescription = EditorBlock & {
  __typename?: 'CoreTermDescription';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreTermDescriptionAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreTermDescriptionAttributes = {
  __typename?: 'CoreTermDescriptionAttributes';
  /** The &quot;align&quot; field on the &quot;CoreTermDescription&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;backgroundColor&quot; field on the &quot;CoreTermDescription&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreTermDescription&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreTermDescription&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreTermDescription&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreTermDescription&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreTermDescription&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreTermDescription&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreTermDescription&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreTermDescription&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreTextColumns = EditorBlock & {
  __typename?: 'CoreTextColumns';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreTextColumnsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreTextColumnsAttributes = {
  __typename?: 'CoreTextColumnsAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreTextColumns&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreTextColumns&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;columns&quot; field on the &quot;CoreTextColumns&quot; block */
  columns?: Maybe<Scalars['Float']['output']>;
  /** The &quot;content&quot; field on the &quot;CoreTextColumns&quot; block */
  content?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreTextColumns&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;width&quot; field on the &quot;CoreTextColumns&quot; block */
  width?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreVerse = EditorBlock & {
  __typename?: 'CoreVerse';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreVerseAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreVerseAttributes = {
  __typename?: 'CoreVerseAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;CoreVerse&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreVerse&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreVerse&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content&quot; field on the &quot;CoreVerse&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontFamily&quot; field on the &quot;CoreVerse&quot; block */
  fontFamily?: Maybe<Scalars['String']['output']>;
  /** The &quot;fontSize&quot; field on the &quot;CoreVerse&quot; block */
  fontSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;gradient&quot; field on the &quot;CoreVerse&quot; block */
  gradient?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreVerse&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreVerse&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;textAlign&quot; field on the &quot;CoreVerse&quot; block */
  textAlign?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;CoreVerse&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type CoreVideo = EditorBlock & {
  __typename?: 'CoreVideo';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreVideoAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreVideoAttributes = {
  __typename?: 'CoreVideoAttributes';
  /** The &quot;align&quot; field on the &quot;CoreVideo&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;autoplay&quot; field on the &quot;CoreVideo&quot; block */
  autoplay?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;CoreVideo&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;caption&quot; field on the &quot;CoreVideo&quot; block */
  caption?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreVideo&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;controls&quot; field on the &quot;CoreVideo&quot; block */
  controls?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;id&quot; field on the &quot;CoreVideo&quot; block */
  id?: Maybe<Scalars['Float']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreVideo&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;loop&quot; field on the &quot;CoreVideo&quot; block */
  loop?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;muted&quot; field on the &quot;CoreVideo&quot; block */
  muted?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;playsInline&quot; field on the &quot;CoreVideo&quot; block */
  playsInline?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;poster&quot; field on the &quot;CoreVideo&quot; block */
  poster?: Maybe<Scalars['String']['output']>;
  /** The &quot;preload&quot; field on the &quot;CoreVideo&quot; block */
  preload?: Maybe<Scalars['String']['output']>;
  /** The &quot;src&quot; field on the &quot;CoreVideo&quot; block */
  src?: Maybe<Scalars['String']['output']>;
  /** The &quot;style&quot; field on the &quot;CoreVideo&quot; block */
  style?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;tracks&quot; field on the &quot;CoreVideo&quot; block */
  tracks?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type CoreWidgetGroup = EditorBlock & {
  __typename?: 'CoreWidgetGroup';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<CoreWidgetGroupAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type CoreWidgetGroupAttributes = {
  __typename?: 'CoreWidgetGroupAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;CoreWidgetGroup&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;CoreWidgetGroup&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;CoreWidgetGroup&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;title&quot; field on the &quot;CoreWidgetGroup&quot; block */
  title?: Maybe<Scalars['String']['output']>;
};

/** Input for the createCXAlert mutation. */
export type CreateCxAlertInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createCXAlert mutation. */
export type CreateCxAlertPayload = {
  __typename?: 'CreateCXAlertPayload';
  /** The Post object mutation type. */
  cXAlert?: Maybe<CxAlert>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the createCategory mutation. */
export type CreateCategoryInput = {
  /** The slug that the category will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the category object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The name of the category object to mutate */
  name: Scalars['String']['input'];
  /** The ID of the category that should be set as the parent */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createCategory mutation. */
export type CreateCategoryPayload = {
  __typename?: 'CreateCategoryPayload';
  /** The created category */
  category?: Maybe<Category>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the createComment mutation. */
export type CreateCommentInput = {
  /** The approval status of the comment. */
  approved?: InputMaybe<Scalars['String']['input']>;
  /** The name of the comment's author. */
  author?: InputMaybe<Scalars['String']['input']>;
  /** The email of the comment's author. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** The url of the comment's author. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The database ID of the post object the comment belongs to. */
  commentOn?: InputMaybe<Scalars['Int']['input']>;
  /** Content of the comment. */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** Parent comment ID of current comment. */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** The approval status of the comment */
  status?: InputMaybe<CommentStatusEnum>;
  /** Type of comment. */
  type?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createComment mutation. */
export type CreateCommentPayload = {
  __typename?: 'CreateCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The comment that was created */
  comment?: Maybe<Comment>;
  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Input for the createContact mutation. */
export type CreateContactInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createContact mutation. */
export type CreateContactPayload = {
  __typename?: 'CreateContactPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  contact?: Maybe<Contact>;
};

/** Input for the createGraphqlDocument mutation. */
export type CreateGraphqlDocumentInput = {
  /** Alias names for saved GraphQL query documents */
  alias?: InputMaybe<Array<Scalars['String']['input']>>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** Description for the saved GraphQL document */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Allow, deny or default access grant for specific query */
  grant?: InputMaybe<Scalars['String']['input']>;
  /** HTTP Cache-Control max-age directive for a saved GraphQL document */
  maxAgeHeader?: InputMaybe<Scalars['Int']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createGraphqlDocument mutation. */
export type CreateGraphqlDocumentPayload = {
  __typename?: 'CreateGraphqlDocumentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  graphqlDocument?: Maybe<GraphqlDocument>;
};

/** Input for the createInstruction mutation. */
export type CreateInstructionInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  displayName: Scalars['String']['input'];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createInstruction mutation. */
export type CreateInstructionPayload = {
  __typename?: 'CreateInstructionPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  instruction?: Maybe<Instruction>;
};

/** Input for the createLinklibrary mutation. */
export type CreateLinklibraryInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createLinklibrary mutation. */
export type CreateLinklibraryPayload = {
  __typename?: 'CreateLinklibraryPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  linklibrary?: Maybe<Linklibrary>;
};

/** Input for the createLocationCategory mutation. */
export type CreateLocationCategoryInput = {
  /** The slug that the wpsl_store_category will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the wpsl_store_category object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The name of the wpsl_store_category object to mutate */
  name: Scalars['String']['input'];
  /** The ID of the wpsl_store_category that should be set as the parent */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createLocationCategory mutation. */
export type CreateLocationCategoryPayload = {
  __typename?: 'CreateLocationCategoryPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created wpsl_store_category */
  locationCategory?: Maybe<LocationCategory>;
};

/** Input for the createLocation mutation. */
export type CreateLocationInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']['input']>;
  /** Set connections between the location and locationCategories */
  locationCategories?: InputMaybe<LocationLocationCategoriesInput>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createLocation mutation. */
export type CreateLocationPayload = {
  __typename?: 'CreateLocationPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  location?: Maybe<Location>;
};

/** Input for the createMediaItem mutation. */
export type CreateMediaItemInput = {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: InputMaybe<Scalars['String']['input']>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** The caption for the mediaItem */
  caption?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the mediaItem */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The date of the mediaItem */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: InputMaybe<Scalars['String']['input']>;
  /** Description of the mediaItem */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The file name of the mediaItem */
  filePath?: InputMaybe<Scalars['String']['input']>;
  /** The file type of the mediaItem */
  fileType?: InputMaybe<MimeTypeEnum>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The ping status for the mediaItem */
  pingStatus?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the mediaItem */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the mediaItem */
  status?: InputMaybe<MediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createMediaItem mutation. */
export type CreateMediaItemPayload = {
  __typename?: 'CreateMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The MediaItem object mutation type. */
  mediaItem?: Maybe<MediaItem>;
};

/** Input for the createPage mutation. */
export type CreatePageInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createPage mutation. */
export type CreatePagePayload = {
  __typename?: 'CreatePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  page?: Maybe<Page>;
};

/** Input for the createPostFormat mutation. */
export type CreatePostFormatInput = {
  /** The slug that the post_format will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the post_format object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The name of the post_format object to mutate */
  name: Scalars['String']['input'];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createPostFormat mutation. */
export type CreatePostFormatPayload = {
  __typename?: 'CreatePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created post_format */
  postFormat?: Maybe<PostFormat>;
};

/** Input for the createPost mutation. */
export type CreatePostInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** Set connections between the post and categories */
  categories?: InputMaybe<PostCategoriesInput>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The ping status for the object */
  pingStatus?: InputMaybe<Scalars['String']['input']>;
  /** URLs that have been pinged. */
  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Set connections between the post and postFormats */
  postFormats?: InputMaybe<PostPostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** Set connections between the post and tags */
  tags?: InputMaybe<PostTagsInput>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
  /** URLs queued to be pinged. */
  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

/** The payload for the createPost mutation. */
export type CreatePostPayload = {
  __typename?: 'CreatePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  post?: Maybe<Post>;
};

/** Input for the createProduct mutation. */
export type CreateProductInput = {
  accurateDate?: InputMaybe<Scalars['String']['input']>;
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  bookNowURL?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  dataSource?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  datatracID?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  displayName: Scalars['String']['input'];
  loanBasedAmount?: InputMaybe<Scalars['String']['input']>;
  memberApplyNowURL?: InputMaybe<Scalars['String']['input']>;
  memberQuickApplyMobileURL?: InputMaybe<Scalars['String']['input']>;
  memberQuickApplyURL?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  minorMemberApplyNowURL?: InputMaybe<Scalars['String']['input']>;
  minorNonMemberApplyNowURL?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  nonMemberApplyNowURL?: InputMaybe<Scalars['String']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  productApplyURL?: InputMaybe<Scalars['String']['input']>;
  productPageURL?: InputMaybe<Scalars['String']['input']>;
  ratesTableID?: InputMaybe<Scalars['Float']['input']>;
  showRatesInDigitalBanking?: InputMaybe<Scalars['Boolean']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Input for the createProductName mutation. */
export type CreateProductNameInput = {
  /** The slug that the productname will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the productname object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The name of the productname object to mutate */
  name: Scalars['String']['input'];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createProductName mutation. */
export type CreateProductNamePayload = {
  __typename?: 'CreateProductNamePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created productname */
  productName?: Maybe<ProductName>;
};

/** The payload for the createProduct mutation. */
export type CreateProductPayload = {
  __typename?: 'CreateProductPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  product?: Maybe<Product>;
};

/** Input for the createRate mutation. */
export type CreateRateInput = {
  aprapy?: InputMaybe<Scalars['String']['input']>;
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  displayName: Scalars['String']['input'];
  externalName?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  minimumBalance?: InputMaybe<Scalars['Float']['input']>;
  name: Scalars['String']['input'];
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  payment?: InputMaybe<Scalars['Float']['input']>;
  /** Set connections between the rate and productNames */
  productNames?: InputMaybe<RateProductNamesInput>;
  rate?: InputMaybe<Scalars['Float']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  term?: InputMaybe<Scalars['String']['input']>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createRate mutation. */
export type CreateRatePayload = {
  __typename?: 'CreateRatePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  rate?: Maybe<Rate>;
};

/** Input for the createService mutation. */
export type CreateServiceInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName: Scalars['String']['input'];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createService mutation. */
export type CreateServicePayload = {
  __typename?: 'CreateServicePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  service?: Maybe<Service>;
};

/** Input for the createStep mutation. */
export type CreateStepInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  copy?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  heading: Scalars['String']['input'];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  step?: InputMaybe<Scalars['Float']['input']>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createStep mutation. */
export type CreateStepPayload = {
  __typename?: 'CreateStepPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  step?: Maybe<Step>;
};

/** Input for the createTag mutation. */
export type CreateTagInput = {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the post_tag object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The name of the post_tag object to mutate */
  name: Scalars['String']['input'];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createTag mutation. */
export type CreateTagPayload = {
  __typename?: 'CreateTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created post_tag */
  tag?: Maybe<Tag>;
};

/** Input for the createUser mutation. */
export type CreateUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']['input']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']['input']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']['input']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']['input']>;
  /** An array of roles to be assigned to the user. */
  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** A string that contains the user's username for logging in. */
  username: Scalars['String']['input'];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']['input']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the createUser mutation. */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The User object mutation type. */
  user?: Maybe<User>;
};

/** Object that can be identified with a Database ID */
export type DatabaseIdentifier = {
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
};

/** Date values */
export type DateInput = {
  /** Day of the month (from 1 to 31) */
  day?: InputMaybe<Scalars['Int']['input']>;
  /** Month number (from 1 to 12) */
  month?: InputMaybe<Scalars['Int']['input']>;
  /** 4 digit year (e.g. 2017) */
  year?: InputMaybe<Scalars['Int']['input']>;
};

/** Filter the connection based on input */
export type DateQueryInput = {
  /** Nodes should be returned after this date */
  after?: InputMaybe<DateInput>;
  /** Nodes should be returned before this date */
  before?: InputMaybe<DateInput>;
  /** Column to query against */
  column?: InputMaybe<PostObjectsConnectionDateColumnEnum>;
  /** For after/before, whether exact value should be matched or not */
  compare?: InputMaybe<Scalars['String']['input']>;
  /** Day of the month (from 1 to 31) */
  day?: InputMaybe<Scalars['Int']['input']>;
  /** Hour (from 0 to 23) */
  hour?: InputMaybe<Scalars['Int']['input']>;
  /** For after/before, whether exact value should be matched or not */
  inclusive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Minute (from 0 to 59) */
  minute?: InputMaybe<Scalars['Int']['input']>;
  /** Month number (from 1 to 12) */
  month?: InputMaybe<Scalars['Int']['input']>;
  /** OR or AND, how the sub-arrays should be compared */
  relation?: InputMaybe<RelationEnum>;
  /** Second (0 to 59) */
  second?: InputMaybe<Scalars['Int']['input']>;
  /** Week of the year (from 0 to 53) */
  week?: InputMaybe<Scalars['Int']['input']>;
  /** 4 digit year (e.g. 2017) */
  year?: InputMaybe<Scalars['Int']['input']>;
};

/** The template assigned to the node */
export type DefaultTemplate = ContentTemplate & {
  __typename?: 'DefaultTemplate';
  /** The name of the template */
  templateName?: Maybe<Scalars['String']['output']>;
};

/** Input for the deleteCXAlert mutation. */
export type DeleteCxAlertInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the CXAlert to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteCXAlert mutation. */
export type DeleteCxAlertPayload = {
  __typename?: 'DeleteCXAlertPayload';
  /** The object before it was deleted */
  cXAlert?: Maybe<CxAlert>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteCategory mutation. */
export type DeleteCategoryInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the category to delete */
  id: Scalars['ID']['input'];
};

/** The payload for the deleteCategory mutation. */
export type DeleteCategoryPayload = {
  __typename?: 'DeleteCategoryPayload';
  /** The deleted term object */
  category?: Maybe<Category>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteComment mutation. */
export type DeleteCommentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the comment should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The deleted comment ID */
  id: Scalars['ID']['input'];
};

/** The payload for the deleteComment mutation. */
export type DeleteCommentPayload = {
  __typename?: 'DeleteCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The deleted comment object */
  comment?: Maybe<Comment>;
  /** The deleted comment ID */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteContact mutation. */
export type DeleteContactInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the contact to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteContact mutation. */
export type DeleteContactPayload = {
  __typename?: 'DeleteContactPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The object before it was deleted */
  contact?: Maybe<Contact>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
};

/** Input for the deleteGraphqlDocument mutation. */
export type DeleteGraphqlDocumentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the graphqlDocument to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteGraphqlDocument mutation. */
export type DeleteGraphqlDocumentPayload = {
  __typename?: 'DeleteGraphqlDocumentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  graphqlDocument?: Maybe<GraphqlDocument>;
};

/** Input for the deleteInstruction mutation. */
export type DeleteInstructionInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the instruction to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteInstruction mutation. */
export type DeleteInstructionPayload = {
  __typename?: 'DeleteInstructionPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  instruction?: Maybe<Instruction>;
};

/** Input for the deleteLinklibrary mutation. */
export type DeleteLinklibraryInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the linklibrary to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteLinklibrary mutation. */
export type DeleteLinklibraryPayload = {
  __typename?: 'DeleteLinklibraryPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  linklibrary?: Maybe<Linklibrary>;
};

/** Input for the deleteLocationCategory mutation. */
export type DeleteLocationCategoryInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the locationCategory to delete */
  id: Scalars['ID']['input'];
};

/** The payload for the deleteLocationCategory mutation. */
export type DeleteLocationCategoryPayload = {
  __typename?: 'DeleteLocationCategoryPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The deleted term object */
  locationCategory?: Maybe<LocationCategory>;
};

/** Input for the deleteLocation mutation. */
export type DeleteLocationInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the location to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteLocation mutation. */
export type DeleteLocationPayload = {
  __typename?: 'DeleteLocationPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  location?: Maybe<Location>;
};

/** Input for the deleteMediaItem mutation. */
export type DeleteMediaItemInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the mediaItem should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the mediaItem to delete */
  id: Scalars['ID']['input'];
};

/** The payload for the deleteMediaItem mutation. */
export type DeleteMediaItemPayload = {
  __typename?: 'DeleteMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted mediaItem */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The mediaItem before it was deleted */
  mediaItem?: Maybe<MediaItem>;
};

/** Input for the deletePage mutation. */
export type DeletePageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the page to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deletePage mutation. */
export type DeletePagePayload = {
  __typename?: 'DeletePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  page?: Maybe<Page>;
};

/** Input for the deletePostFormat mutation. */
export type DeletePostFormatInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the postFormat to delete */
  id: Scalars['ID']['input'];
};

/** The payload for the deletePostFormat mutation. */
export type DeletePostFormatPayload = {
  __typename?: 'DeletePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The deleted term object */
  postFormat?: Maybe<PostFormat>;
};

/** Input for the deletePost mutation. */
export type DeletePostInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the post to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deletePost mutation. */
export type DeletePostPayload = {
  __typename?: 'DeletePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  post?: Maybe<Post>;
};

/** Input for the deleteProduct mutation. */
export type DeleteProductInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the product to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Input for the deleteProductName mutation. */
export type DeleteProductNameInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the productName to delete */
  id: Scalars['ID']['input'];
};

/** The payload for the deleteProductName mutation. */
export type DeleteProductNamePayload = {
  __typename?: 'DeleteProductNamePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The deleted term object */
  productName?: Maybe<ProductName>;
};

/** The payload for the deleteProduct mutation. */
export type DeleteProductPayload = {
  __typename?: 'DeleteProductPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  product?: Maybe<Product>;
};

/** Input for the deleteRate mutation. */
export type DeleteRateInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the rate to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteRate mutation. */
export type DeleteRatePayload = {
  __typename?: 'DeleteRatePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  rate?: Maybe<Rate>;
};

/** Input for the deleteService mutation. */
export type DeleteServiceInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the service to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteService mutation. */
export type DeleteServicePayload = {
  __typename?: 'DeleteServicePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  service?: Maybe<Service>;
};

/** Input for the deleteStep mutation. */
export type DeleteStepInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the step to delete */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the deleteStep mutation. */
export type DeleteStepPayload = {
  __typename?: 'DeleteStepPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The object before it was deleted */
  step?: Maybe<Step>;
};

/** Input for the deleteTag mutation. */
export type DeleteTagInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the tag to delete */
  id: Scalars['ID']['input'];
};

/** The payload for the deleteTag mutation. */
export type DeleteTagPayload = {
  __typename?: 'DeleteTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The deleted term object */
  tag?: Maybe<Tag>;
};

/** Input for the deleteUser mutation. */
export type DeleteUserInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the user you want to delete */
  id: Scalars['ID']['input'];
  /** Reassign posts and links to new User ID. */
  reassignId?: InputMaybe<Scalars['ID']['input']>;
};

/** The payload for the deleteUser mutation. */
export type DeleteUserPayload = {
  __typename?: 'DeleteUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The ID of the user that you just deleted */
  deletedId?: Maybe<Scalars['ID']['output']>;
  /** The deleted user object */
  user?: Maybe<User>;
};

/** The discussion setting type */
export type DiscussionSettings = {
  __typename?: 'DiscussionSettings';
  /** Allow people to submit comments on new posts. */
  defaultCommentStatus?: Maybe<Scalars['String']['output']>;
  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
  defaultPingStatus?: Maybe<Scalars['String']['output']>;
};

/** Relational context between connected nodes */
export type Edge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected node */
  node: Node;
};

/** Blocks that can be edited to create content and layouts */
export type EditorBlock = {
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the Block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Asset enqueued by the CMS */
export type EnqueuedAsset = {
  /** The inline code to be run after the asset is loaded. */
  after?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /**
   * Deprecated
   * @deprecated Use `EnqueuedAsset.media` instead.
   */
  args?: Maybe<Scalars['Boolean']['output']>;
  /** The inline code to be run before the asset is loaded. */
  before?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc */
  conditional?: Maybe<Scalars['String']['output']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<EnqueuedAsset>>>;
  /**
   * Extra information needed for the script
   * @deprecated Use `EnqueuedScript.extraData` instead.
   */
  extra?: Maybe<Scalars['String']['output']>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']['output']>;
  /** The ID of the enqueued asset */
  id: Scalars['ID']['output'];
  /** The source of the asset */
  src?: Maybe<Scalars['String']['output']>;
  /** The version of the enqueued asset */
  version?: Maybe<Scalars['String']['output']>;
};

/** Script enqueued by the CMS */
export type EnqueuedScript = EnqueuedAsset & Node & {
  __typename?: 'EnqueuedScript';
  /** The inline code to be run after the asset is loaded. */
  after?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /**
   * Deprecated
   * @deprecated Use `EnqueuedAsset.media` instead.
   */
  args?: Maybe<Scalars['Boolean']['output']>;
  /** The inline code to be run before the asset is loaded. */
  before?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc */
  conditional?: Maybe<Scalars['String']['output']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;
  /**
   * Extra information needed for the script
   * @deprecated Use `EnqueuedScript.extraData` instead.
   */
  extra?: Maybe<Scalars['String']['output']>;
  /** Extra data supplied to the enqueued script */
  extraData?: Maybe<Scalars['String']['output']>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']['output']>;
  /** The global ID of the enqueued script */
  id: Scalars['ID']['output'];
  /** The source of the asset */
  src?: Maybe<Scalars['String']['output']>;
  /** The loading strategy to use on the script tag */
  strategy?: Maybe<ScriptLoadingStrategyEnum>;
  /** The version of the enqueued script */
  version?: Maybe<Scalars['String']['output']>;
};

/** Connection to EnqueuedScript Nodes */
export type EnqueuedScriptConnection = {
  /** A list of edges (relational context) between ContentNode and connected EnqueuedScript Nodes */
  edges: Array<EnqueuedScriptConnectionEdge>;
  /** A list of connected EnqueuedScript Nodes */
  nodes: Array<EnqueuedScript>;
  /** Information about pagination in a connection. */
  pageInfo: EnqueuedScriptConnectionPageInfo;
};

/** Edge between a Node and a connected EnqueuedScript */
export type EnqueuedScriptConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected EnqueuedScript Node */
  node: EnqueuedScript;
};

/** Page Info on the connected EnqueuedScriptConnectionEdge */
export type EnqueuedScriptConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Stylesheet enqueued by the CMS */
export type EnqueuedStylesheet = EnqueuedAsset & Node & {
  __typename?: 'EnqueuedStylesheet';
  /** The inline code to be run after the asset is loaded. */
  after?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /**
   * Deprecated
   * @deprecated Use `EnqueuedAsset.media` instead.
   */
  args?: Maybe<Scalars['Boolean']['output']>;
  /** The inline code to be run before the asset is loaded. */
  before?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc */
  conditional?: Maybe<Scalars['String']['output']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<EnqueuedStylesheet>>>;
  /**
   * Extra information needed for the script
   * @deprecated Use `EnqueuedScript.extraData` instead.
   */
  extra?: Maybe<Scalars['String']['output']>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']['output']>;
  /** The global ID of the enqueued stylesheet */
  id: Scalars['ID']['output'];
  /** Whether the enqueued style is RTL or not */
  isRtl?: Maybe<Scalars['Boolean']['output']>;
  /** The media attribute to use for the link */
  media?: Maybe<Scalars['String']['output']>;
  /** The absolute path to the enqueued style. Set when the stylesheet is meant to load inline. */
  path?: Maybe<Scalars['String']['output']>;
  /** The `rel` attribute to use for the link */
  rel?: Maybe<Scalars['String']['output']>;
  /** The source of the asset */
  src?: Maybe<Scalars['String']['output']>;
  /** Optional suffix, used in combination with RTL */
  suffix?: Maybe<Scalars['String']['output']>;
  /** The title of the enqueued style. Used for preferred/alternate stylesheets. */
  title?: Maybe<Scalars['String']['output']>;
  /** The version of the enqueued style */
  version?: Maybe<Scalars['String']['output']>;
};

/** Connection to EnqueuedStylesheet Nodes */
export type EnqueuedStylesheetConnection = {
  /** A list of edges (relational context) between ContentNode and connected EnqueuedStylesheet Nodes */
  edges: Array<EnqueuedStylesheetConnectionEdge>;
  /** A list of connected EnqueuedStylesheet Nodes */
  nodes: Array<EnqueuedStylesheet>;
  /** Information about pagination in a connection. */
  pageInfo: EnqueuedStylesheetConnectionPageInfo;
};

/** Edge between a Node and a connected EnqueuedStylesheet */
export type EnqueuedStylesheetConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected EnqueuedStylesheet Node */
  node: EnqueuedStylesheet;
};

/** Page Info on the connected EnqueuedStylesheetConnectionEdge */
export type EnqueuedStylesheetConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Keys and their values, both cast as strings */
export type FaQs = {
  __typename?: 'FAQs';
  content?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type FilebirdBlockFilebirdGallery = EditorBlock & {
  __typename?: 'FilebirdBlockFilebirdGallery';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<FilebirdBlockFilebirdGalleryAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type FilebirdBlockFilebirdGalleryAttributes = {
  __typename?: 'FilebirdBlockFilebirdGalleryAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;captions&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  captions?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;columns&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  columns?: Maybe<Scalars['Int']['output']>;
  /** The &quot;hasCaption&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  hasCaption?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;images&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  images?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;imagesRemoved&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  imagesRemoved?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;isCropped&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  isCropped?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;linkTo&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  linkTo?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;selectedFolder&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  selectedFolder?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;sortBy&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  sortBy?: Maybe<Scalars['String']['output']>;
  /** The &quot;sortType&quot; field on the &quot;FilebirdBlockFilebirdGallery&quot; block */
  sortType?: Maybe<Scalars['String']['output']>;
};

/** The footer setting type */
export type FooterSettings = {
  __typename?: 'FooterSettings';
  /** Genesis Footer App */
  footerAppIcons?: Maybe<Scalars['String']['output']>;
  /** The string Settings Group */
  footerSettings?: Maybe<Scalars['String']['output']>;
  /** Genesis Footer Social */
  footerSocialIcons?: Maybe<Scalars['String']['output']>;
  /** Genesis Footer Utilities */
  footerUtilities?: Maybe<Scalars['String']['output']>;
};

/** Keys and their values, both cast as strings */
export type Form = {
  __typename?: 'Form';
  actions?: Maybe<Scalars['String']['output']>;
  ajaxNonce?: Maybe<Scalars['String']['output']>;
  fields?: Maybe<Scalars['String']['output']>;
  objects?: Maybe<Scalars['String']['output']>;
  settings?: Maybe<Scalars['String']['output']>;
};

/** The general setting type */
export type GeneralSettings = {
  __typename?: 'GeneralSettings';
  /** A date format for all date strings. */
  dateFormat?: Maybe<Scalars['String']['output']>;
  /** Site tagline. */
  description?: Maybe<Scalars['String']['output']>;
  /** This address is used for admin purposes, like new user notification. */
  email?: Maybe<Scalars['String']['output']>;
  /** Genesis Footer Text */
  footerText?: Maybe<Scalars['String']['output']>;
  /** WordPress locale code. */
  language?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  logo?: Maybe<Scalars['String']['output']>;
  /** A day number of the week that the week should start on. */
  startOfWeek?: Maybe<Scalars['Int']['output']>;
  /** The number of votes */
  styleguideVersion?: Maybe<Scalars['String']['output']>;
  /** A time format for all time strings. */
  timeFormat?: Maybe<Scalars['String']['output']>;
  /** A city in the same timezone as you. */
  timezone?: Maybe<Scalars['String']['output']>;
  /** Site title. */
  title?: Maybe<Scalars['String']['output']>;
  /** Site URL. */
  url?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  wpNonce?: Maybe<Scalars['String']['output']>;
};

/** Input for the generateAuthorizationCode mutation. */
export type GenerateAuthorizationCodeInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Email for WordPress user */
  email?: InputMaybe<Scalars['String']['input']>;
  /** Password for WordPress user */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Username for WordPress user */
  username?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the generateAuthorizationCode mutation. */
export type GenerateAuthorizationCodePayload = {
  __typename?: 'GenerateAuthorizationCodePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Authorization code used for requesting refresh/access tokens */
  code?: Maybe<Scalars['String']['output']>;
  /** Error encountered during user authentication, if any */
  error?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisBlocksGbNewsletter = EditorBlock & {
  __typename?: 'GenesisBlocksGbNewsletter';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisBlocksGbNewsletterAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisBlocksGbNewsletterAttributes = {
  __typename?: 'GenesisBlocksGbNewsletterAttributes';
  /** The &quot;backgroundColor&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  backgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;buttonAlignment&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  buttonAlignment?: Maybe<Scalars['String']['output']>;
  /** The &quot;buttonBackgroundColor&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  buttonBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;buttonClass&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  buttonClass?: Maybe<Scalars['String']['output']>;
  /** The &quot;buttonShape&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  buttonShape?: Maybe<Scalars['String']['output']>;
  /** The &quot;buttonSize&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  buttonSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;buttonText&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  buttonText?: Maybe<Scalars['String']['output']>;
  /** The &quot;buttonTextColor&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  buttonTextColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;buttonTextProcessing&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  buttonTextProcessing?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;containerMarginBottom&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  containerMarginBottom?: Maybe<Scalars['Float']['output']>;
  /** The &quot;containerMarginTop&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  containerMarginTop?: Maybe<Scalars['Float']['output']>;
  /** The &quot;containerPadding&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  containerPadding?: Maybe<Scalars['Float']['output']>;
  /** The &quot;customBackgroundColor&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  customBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;customButtonBackgroundColor&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  customButtonBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;customButtonTextColor&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  customButtonTextColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;customTextColor&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  customTextColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;doubleOptIn&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  doubleOptIn?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;emailInputLabel&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  emailInputLabel?: Maybe<Scalars['String']['output']>;
  /** The &quot;instanceId&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  instanceId?: Maybe<Scalars['Float']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;mailingList&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  mailingList?: Maybe<Scalars['String']['output']>;
  /** The &quot;mailingListProvider&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  mailingListProvider?: Maybe<Scalars['String']['output']>;
  /** The &quot;successMessage&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  successMessage?: Maybe<Scalars['String']['output']>;
  /** The &quot;textColor&quot; field on the &quot;GenesisBlocksGbNewsletter&quot; block */
  textColor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisBlocksGbPostGrid = EditorBlock & {
  __typename?: 'GenesisBlocksGbPostGrid';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisBlocksGbPostGridAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisBlocksGbPostGridAttributes = {
  __typename?: 'GenesisBlocksGbPostGridAttributes';
  /** The &quot;align&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;categories&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  categories?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;columns&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  columns?: Maybe<Scalars['Float']['output']>;
  /** The &quot;displayPostAuthor&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  displayPostAuthor?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayPostDate&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  displayPostDate?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayPostExcerpt&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  displayPostExcerpt?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayPostImage&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  displayPostImage?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayPostLink&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  displayPostLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayPostTitle&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  displayPostTitle?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displaySectionTitle&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  displaySectionTitle?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;excerptLength&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  excerptLength?: Maybe<Scalars['Float']['output']>;
  /** The &quot;id&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  id?: Maybe<Scalars['Float']['output']>;
  /** The &quot;imageSize&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  imageSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;offset&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  offset?: Maybe<Scalars['Float']['output']>;
  /** The &quot;order&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  order?: Maybe<Scalars['String']['output']>;
  /** The &quot;orderBy&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  orderBy?: Maybe<Scalars['String']['output']>;
  /** The &quot;postLayout&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  postLayout?: Maybe<Scalars['String']['output']>;
  /** The &quot;postTitleTag&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  postTitleTag?: Maybe<Scalars['String']['output']>;
  /** The &quot;postType&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  postType?: Maybe<Scalars['String']['output']>;
  /** The &quot;postsToShow&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  postsToShow?: Maybe<Scalars['Float']['output']>;
  /** The &quot;readMoreText&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  readMoreText?: Maybe<Scalars['String']['output']>;
  /** The &quot;sectionTag&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  sectionTag?: Maybe<Scalars['String']['output']>;
  /** The &quot;sectionTitle&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  sectionTitle?: Maybe<Scalars['String']['output']>;
  /** The &quot;sectionTitleTag&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  sectionTitleTag?: Maybe<Scalars['String']['output']>;
  /** The &quot;selectedPages&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  selectedPages?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;url&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  url?: Maybe<Scalars['String']['output']>;
  /** The &quot;width&quot; field on the &quot;GenesisBlocksGbPostGrid&quot; block */
  width?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisBlocksGbSharing = EditorBlock & {
  __typename?: 'GenesisBlocksGbSharing';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisBlocksGbSharingAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisBlocksGbSharingAttributes = {
  __typename?: 'GenesisBlocksGbSharingAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;clientId&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** The &quot;email&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  email?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;facebook&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  facebook?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;linkedin&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  linkedin?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;pinterest&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  pinterest?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;reddit&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  reddit?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;shareAlignment&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  shareAlignment?: Maybe<Scalars['String']['output']>;
  /** The &quot;shareButtonColor&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  shareButtonColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;shareButtonShape&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  shareButtonShape?: Maybe<Scalars['String']['output']>;
  /** The &quot;shareButtonSize&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  shareButtonSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;shareButtonStyle&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  shareButtonStyle?: Maybe<Scalars['String']['output']>;
  /** The &quot;twitter&quot; field on the &quot;GenesisBlocksGbSharing&quot; block */
  twitter?: Maybe<Scalars['Boolean']['output']>;
};

/** The genesisBlocksGlobalSettings setting type */
export type GenesisBlocksGlobalSettingsSettings = {
  __typename?: 'GenesisBlocksGlobalSettingsSettings';
  /** The string Settings Group */
  genesisBlocksMailchimpApiKey?: Maybe<Scalars['String']['output']>;
  /** The string Settings Group */
  genesisProSubscriptionKey?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksAccordion = EditorBlock & {
  __typename?: 'GenesisCustomBlocksAccordion';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksAccordionAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksAccordionAttributes = {
  __typename?: 'GenesisCustomBlocksAccordionAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksAccordion&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksAccordion&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content&quot; field on the &quot;GenesisCustomBlocksAccordion&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksAccordion&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;id&quot; field on the &quot;GenesisCustomBlocksAccordion&quot; block */
  id?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksAccordion&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;start_open&quot; field on the &quot;GenesisCustomBlocksAccordion&quot; block */
  startOpen?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;stay_open&quot; field on the &quot;GenesisCustomBlocksAccordion&quot; block */
  stayOpen?: Maybe<Scalars['Boolean']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksBio = EditorBlock & {
  __typename?: 'GenesisCustomBlocksBio';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksBioAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksBioAttributes = {
  __typename?: 'GenesisCustomBlocksBioAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksBio&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksBio&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksBio&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksBio&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksBlogContentSection = EditorBlock & {
  __typename?: 'GenesisCustomBlocksBlogContentSection';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksBlogContentSectionAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksBlogContentSectionAttributes = {
  __typename?: 'GenesisCustomBlocksBlogContentSectionAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksBlogContentSection&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksBlogContentSection&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksBlogContentSection&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksButton = EditorBlock & {
  __typename?: 'GenesisCustomBlocksButton';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksButtonAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksButtonAttributes = {
  __typename?: 'GenesisCustomBlocksButtonAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;btn-position&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  btnPosition?: Maybe<Scalars['String']['output']>;
  /** The &quot;btnlink-color&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  btnlinkColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;btnlink-onclick&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  btnlinkOnclick?: Maybe<Scalars['String']['output']>;
  /** The &quot;btnlink-rewrite&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  btnlinkRewrite?: Maybe<Scalars['String']['output']>;
  /** The &quot;btnlink-size&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  btnlinkSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;btnlink-text&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  btnlinkText?: Maybe<Scalars['String']['output']>;
  /** The &quot;btnlink-type&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  btnlinkType?: Maybe<Scalars['String']['output']>;
  /** The &quot;btnlink-url&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  btnlinkUrl?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;open-new-tab&quot; field on the &quot;GenesisCustomBlocksButton&quot; block */
  openNewTab?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCalculator = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCalculator';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCalculatorAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCalculatorAttributes = {
  __typename?: 'GenesisCustomBlocksCalculatorAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCalculator&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCalculator&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCalculator&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCalculator&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCalculatorResults = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCalculatorResults';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCalculatorResultsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCalculatorResultsAttributes = {
  __typename?: 'GenesisCustomBlocksCalculatorResultsAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCalculatorResults&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCalculatorResults&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;compound-label&quot; field on the &quot;GenesisCustomBlocksCalculatorResults&quot; block */
  compoundLabel?: Maybe<Scalars['String']['output']>;
  /** The &quot;compound-tooltip&quot; field on the &quot;GenesisCustomBlocksCalculatorResults&quot; block */
  compoundTooltip?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-custom-link&quot; field on the &quot;GenesisCustomBlocksCalculatorResults&quot; block */
  ctaCustomLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-link&quot; field on the &quot;GenesisCustomBlocksCalculatorResults&quot; block */
  ctaLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-text&quot; field on the &quot;GenesisCustomBlocksCalculatorResults&quot; block */
  ctaText?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksCalculatorResults&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCalculatorResults&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;summary&quot; field on the &quot;GenesisCustomBlocksCalculatorResults&quot; block */
  summary?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCaption = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCaption';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCaptionAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCaptionAttributes = {
  __typename?: 'GenesisCustomBlocksCaptionAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCaption&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;caption&quot; field on the &quot;GenesisCustomBlocksCaption&quot; block */
  caption?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCaption&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksCaption&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;image-alt-text&quot; field on the &quot;GenesisCustomBlocksCaption&quot; block */
  imageAltText?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCaption&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardAppointment = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardAppointment';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardAppointmentAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardAppointmentAttributes = {
  __typename?: 'GenesisCustomBlocksCardAppointmentAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardAppointment&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardAppointment&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardAppointment&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCardAppointment&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardArticle = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardArticle';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardArticleAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardArticleAttributes = {
  __typename?: 'GenesisCustomBlocksCardArticleAttributes';
  /** The &quot;articles&quot; field on the &quot;GenesisCustomBlocksCardArticle&quot; block */
  articles?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardArticle&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardArticle&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardArticle&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCardArticle&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardCalculators = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardCalculators';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardCalculatorsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardCalculatorsAttributes = {
  __typename?: 'GenesisCustomBlocksCardCalculatorsAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardCalculators&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;calculators&quot; field on the &quot;GenesisCustomBlocksCardCalculators&quot; block */
  calculators?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardCalculators&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardCalculators&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCardCalculators&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardCareer = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardCareer';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardCareerAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardCareerAttributes = {
  __typename?: 'GenesisCustomBlocksCardCareerAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardCareer&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardCareer&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;department&quot; field on the &quot;GenesisCustomBlocksCardCareer&quot; block */
  department?: Maybe<Scalars['String']['output']>;
  /** The &quot;job-post-url&quot; field on the &quot;GenesisCustomBlocksCardCareer&quot; block */
  jobPostUrl?: Maybe<Scalars['String']['output']>;
  /** The &quot;job-title&quot; field on the &quot;GenesisCustomBlocksCardCareer&quot; block */
  jobTitle?: Maybe<Scalars['String']['output']>;
  /** The &quot;location&quot; field on the &quot;GenesisCustomBlocksCardCareer&quot; block */
  location?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardCareer&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;position-status&quot; field on the &quot;GenesisCustomBlocksCardCareer&quot; block */
  positionStatus?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardCares = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardCares';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardCaresAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardCaresAttributes = {
  __typename?: 'GenesisCustomBlocksCardCaresAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardCares&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardCares&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksCardCares&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;links&quot; field on the &quot;GenesisCustomBlocksCardCares&quot; block */
  links?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardCares&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCardCares&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardContact = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardContact';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardContactAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardContactAttributes = {
  __typename?: 'GenesisCustomBlocksCardContactAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardContact&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardContact&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardContact&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCardContact&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardFact = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardFact';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardFactAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardFactAttributes = {
  __typename?: 'GenesisCustomBlocksCardFactAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardFact&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardFact&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;graphic&quot; field on the &quot;GenesisCustomBlocksCardFact&quot; block */
  graphic?: Maybe<Scalars['Int']['output']>;
  /** The &quot;header-text&quot; field on the &quot;GenesisCustomBlocksCardFact&quot; block */
  headerText?: Maybe<Scalars['String']['output']>;
  /** The &quot;icon&quot; field on the &quot;GenesisCustomBlocksCardFact&quot; block */
  icon?: Maybe<Scalars['String']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksCardFact&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardFact&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;title&quot; field on the &quot;GenesisCustomBlocksCardFact&quot; block */
  title?: Maybe<Scalars['String']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCardFact&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardForms = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardForms';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardFormsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardFormsAttributes = {
  __typename?: 'GenesisCustomBlocksCardFormsAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardForms&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardForms&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;forms&quot; field on the &quot;GenesisCustomBlocksCardForms&quot; block */
  forms?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardForms&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCardForms&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardGeneric = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardGeneric';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardGenericAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardGenericAttributes = {
  __typename?: 'GenesisCustomBlocksCardGenericAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardGeneric&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardGeneric&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content&quot; field on the &quot;GenesisCustomBlocksCardGeneric&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;content-color&quot; field on the &quot;GenesisCustomBlocksCardGeneric&quot; block */
  contentColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;content-text-color&quot; field on the &quot;GenesisCustomBlocksCardGeneric&quot; block */
  contentTextColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading-color&quot; field on the &quot;GenesisCustomBlocksCardGeneric&quot; block */
  headingColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading-text-color&quot; field on the &quot;GenesisCustomBlocksCardGeneric&quot; block */
  headingTextColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;hide-heading&quot; field on the &quot;GenesisCustomBlocksCardGeneric&quot; block */
  hideHeading?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;icon&quot; field on the &quot;GenesisCustomBlocksCardGeneric&quot; block */
  icon?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardGeneric&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCardGeneric&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardPromo = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardPromo';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardPromoAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardPromoAttributes = {
  __typename?: 'GenesisCustomBlocksCardPromoAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardPromo&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardPromo&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;graphic&quot; field on the &quot;GenesisCustomBlocksCardPromo&quot; block */
  graphic?: Maybe<Scalars['Int']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksCardPromo&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardPromo&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCardPromo&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardRecognition = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardRecognition';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardRecognitionAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardRecognitionAttributes = {
  __typename?: 'GenesisCustomBlocksCardRecognitionAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardRecognition&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardRecognition&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksCardRecognition&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardRecognition&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCardRecognition&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCardTestimonial = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCardTestimonial';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCardTestimonialAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCardTestimonialAttributes = {
  __typename?: 'GenesisCustomBlocksCardTestimonialAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCardTestimonial&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCardTestimonial&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;full-height&quot; field on the &quot;GenesisCustomBlocksCardTestimonial&quot; block */
  fullHeight?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;hide-heading&quot; field on the &quot;GenesisCustomBlocksCardTestimonial&quot; block */
  hideHeading?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksCardTestimonial&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCardTestimonial&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksCardTestimonial&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksComparison = EditorBlock & {
  __typename?: 'GenesisCustomBlocksComparison';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksComparisonAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksComparisonAttributes = {
  __typename?: 'GenesisCustomBlocksComparisonAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksComparison&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;choose-product&quot; field on the &quot;GenesisCustomBlocksComparison&quot; block */
  chooseProduct?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksComparison&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;compare-type&quot; field on the &quot;GenesisCustomBlocksComparison&quot; block */
  compareType?: Maybe<Scalars['String']['output']>;
  /** The &quot;dbhide&quot; field on the &quot;GenesisCustomBlocksComparison&quot; block */
  dbhide?: Maybe<Scalars['String']['output']>;
  /** The &quot;decimals&quot; field on the &quot;GenesisCustomBlocksComparison&quot; block */
  decimals?: Maybe<Scalars['String']['output']>;
  /** The &quot;hidebuttons&quot; field on the &quot;GenesisCustomBlocksComparison&quot; block */
  hidebuttons?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksComparison&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;product-name&quot; field on the &quot;GenesisCustomBlocksComparison&quot; block */
  productName?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksContentToggle = EditorBlock & {
  __typename?: 'GenesisCustomBlocksContentToggle';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksContentToggleAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksContentToggleAttributes = {
  __typename?: 'GenesisCustomBlocksContentToggleAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksContentToggle&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksContentToggle&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content-name&quot; field on the &quot;GenesisCustomBlocksContentToggle&quot; block */
  contentName?: Maybe<Scalars['String']['output']>;
  /** The &quot;left-content&quot; field on the &quot;GenesisCustomBlocksContentToggle&quot; block */
  leftContent?: Maybe<Scalars['Int']['output']>;
  /** The &quot;left-label&quot; field on the &quot;GenesisCustomBlocksContentToggle&quot; block */
  leftLabel?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksContentToggle&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;right-content&quot; field on the &quot;GenesisCustomBlocksContentToggle&quot; block */
  rightContent?: Maybe<Scalars['Int']['output']>;
  /** The &quot;right-label&quot; field on the &quot;GenesisCustomBlocksContentToggle&quot; block */
  rightLabel?: Maybe<Scalars['String']['output']>;
  /** The &quot;toggle-animate&quot; field on the &quot;GenesisCustomBlocksContentToggle&quot; block */
  toggleAnimate?: Maybe<Scalars['Boolean']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCxContentLink = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCxContentLink';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCxContentLinkAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCxContentLinkAttributes = {
  __typename?: 'GenesisCustomBlocksCxContentLinkAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCxContentLink&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCxContentLink&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;link-content&quot; field on the &quot;GenesisCustomBlocksCxContentLink&quot; block */
  linkContent?: Maybe<Scalars['String']['output']>;
  /** The &quot;link-url&quot; field on the &quot;GenesisCustomBlocksCxContentLink&quot; block */
  linkUrl?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCxContentLink&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCxLink = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCxLink';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCxLinkAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCxLinkAttributes = {
  __typename?: 'GenesisCustomBlocksCxLinkAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCxLink&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCxLink&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;classes&quot; field on the &quot;GenesisCustomBlocksCxLink&quot; block */
  classes?: Maybe<Scalars['String']['output']>;
  /** The &quot;icon&quot; field on the &quot;GenesisCustomBlocksCxLink&quot; block */
  icon?: Maybe<Scalars['String']['output']>;
  /** The &quot;link-text&quot; field on the &quot;GenesisCustomBlocksCxLink&quot; block */
  linkText?: Maybe<Scalars['String']['output']>;
  /** The &quot;link-url&quot; field on the &quot;GenesisCustomBlocksCxLink&quot; block */
  linkUrl?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCxLink&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCxPdfLinks = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCxPdfLinks';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCxPdfLinksAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCxPdfLinksAttributes = {
  __typename?: 'GenesisCustomBlocksCxPdfLinksAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCxPdfLinks&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCxPdfLinks&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCxPdfLinks&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;pdfs&quot; field on the &quot;GenesisCustomBlocksCxPdfLinks&quot; block */
  pdfs?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksCxSvg = EditorBlock & {
  __typename?: 'GenesisCustomBlocksCxSvg';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksCxSvgAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksCxSvgAttributes = {
  __typename?: 'GenesisCustomBlocksCxSvgAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksCxSvg&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksCxSvg&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksCxSvg&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;svg&quot; field on the &quot;GenesisCustomBlocksCxSvg&quot; block */
  svg?: Maybe<Scalars['Int']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksDatatrac = EditorBlock & {
  __typename?: 'GenesisCustomBlocksDatatrac';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksDatatracAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksDatatracAttributes = {
  __typename?: 'GenesisCustomBlocksDatatracAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksDatatrac&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;choose-product&quot; field on the &quot;GenesisCustomBlocksDatatrac&quot; block */
  chooseProduct?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksDatatrac&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksDatatrac&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksDisclosures = EditorBlock & {
  __typename?: 'GenesisCustomBlocksDisclosures';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksDisclosuresAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksDisclosuresAttributes = {
  __typename?: 'GenesisCustomBlocksDisclosuresAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksDisclosures&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksDisclosures&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;decimals&quot; field on the &quot;GenesisCustomBlocksDisclosures&quot; block */
  decimals?: Maybe<Scalars['String']['output']>;
  /** The &quot;disclaimer&quot; field on the &quot;GenesisCustomBlocksDisclosures&quot; block */
  disclaimer?: Maybe<Scalars['String']['output']>;
  /** The &quot;disclaimer-2&quot; field on the &quot;GenesisCustomBlocksDisclosures&quot; block */
  disclaimer2?: Maybe<Scalars['String']['output']>;
  /** The &quot;disclosures&quot; field on the &quot;GenesisCustomBlocksDisclosures&quot; block */
  disclosures?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksDisclosures&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;product&quot; field on the &quot;GenesisCustomBlocksDisclosures&quot; block */
  product?: Maybe<Scalars['String']['output']>;
  /** The &quot;title&quot; field on the &quot;GenesisCustomBlocksDisclosures&quot; block */
  title?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksFaqs = EditorBlock & {
  __typename?: 'GenesisCustomBlocksFaqs';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksFaqsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksFaqsAttributes = {
  __typename?: 'GenesisCustomBlocksFaqsAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksFaqs&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;categories&quot; field on the &quot;GenesisCustomBlocksFaqs&quot; block */
  categories?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksFaqs&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksFaqs&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksFigure = EditorBlock & {
  __typename?: 'GenesisCustomBlocksFigure';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksFigureAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksFigureAttributes = {
  __typename?: 'GenesisCustomBlocksFigureAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksFigure&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksFigure&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;figure-alt&quot; field on the &quot;GenesisCustomBlocksFigure&quot; block */
  figureAlt?: Maybe<Scalars['String']['output']>;
  /** The &quot;figure-caption&quot; field on the &quot;GenesisCustomBlocksFigure&quot; block */
  figureCaption?: Maybe<Scalars['String']['output']>;
  /** The &quot;figure-img&quot; field on the &quot;GenesisCustomBlocksFigure&quot; block */
  figureImg?: Maybe<Scalars['Int']['output']>;
  /** The &quot;has-box-shadow&quot; field on the &quot;GenesisCustomBlocksFigure&quot; block */
  hasBoxShadow?: Maybe<Scalars['String']['output']>;
  /** The &quot;has-caption&quot; field on the &quot;GenesisCustomBlocksFigure&quot; block */
  hasCaption?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksFigure&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksGump = EditorBlock & {
  __typename?: 'GenesisCustomBlocksGump';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksGumpAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksGumpAttributes = {
  __typename?: 'GenesisCustomBlocksGumpAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksGump&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;body&quot; field on the &quot;GenesisCustomBlocksGump&quot; block */
  body?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksGump&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-1-link&quot; field on the &quot;GenesisCustomBlocksGump&quot; block */
  cta1Link?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-1-text&quot; field on the &quot;GenesisCustomBlocksGump&quot; block */
  cta1Text?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-2-link&quot; field on the &quot;GenesisCustomBlocksGump&quot; block */
  cta2Link?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-2-text&quot; field on the &quot;GenesisCustomBlocksGump&quot; block */
  cta2Text?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksGump&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksGump&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;second-cta&quot; field on the &quot;GenesisCustomBlocksGump&quot; block */
  secondCta?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksHero = EditorBlock & {
  __typename?: 'GenesisCustomBlocksHero';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksHeroAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksHeroAttributes = {
  __typename?: 'GenesisCustomBlocksHeroAttributes';
  /** The &quot;alt-text&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  altText?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-custom-link&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  ctaCustomLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-custom-link-2&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  ctaCustomLink2?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-link&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  ctaLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-link-2&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  ctaLink2?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-text&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  ctaText?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-text-2&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  ctaText2?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;hero-body&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  heroBody?: Maybe<Scalars['String']['output']>;
  /** The &quot;hero-color&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  heroColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;hero-image&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  heroImage?: Maybe<Scalars['Int']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;open-new-tab&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  openNewTab?: Maybe<Scalars['String']['output']>;
  /** The &quot;open-new-tab-secondary&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  openNewTabSecondary?: Maybe<Scalars['String']['output']>;
  /** The &quot;preheading&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  preheading?: Maybe<Scalars['String']['output']>;
  /** The &quot;secondary-btnlink-color&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  secondaryBtnlinkColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;secondary-btnlink-type&quot; field on the &quot;GenesisCustomBlocksHero&quot; block */
  secondaryBtnlinkType?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksHeroImage = EditorBlock & {
  __typename?: 'GenesisCustomBlocksHeroImage';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksHeroImageAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksHeroImageAttributes = {
  __typename?: 'GenesisCustomBlocksHeroImageAttributes';
  /** The &quot;alt-text&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  altText?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-custom-link&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  ctaCustomLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-link&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  ctaLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-text&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  ctaText?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;hero-body&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  heroBody?: Maybe<Scalars['String']['output']>;
  /** The &quot;hero-color&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  heroColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;hero-image&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  heroImage?: Maybe<Scalars['Int']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;open-new-tab&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  openNewTab?: Maybe<Scalars['String']['output']>;
  /** The &quot;preheading&quot; field on the &quot;GenesisCustomBlocksHeroImage&quot; block */
  preheading?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksHeroProduct = EditorBlock & {
  __typename?: 'GenesisCustomBlocksHeroProduct';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksHeroProductAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksHeroProductAttributes = {
  __typename?: 'GenesisCustomBlocksHeroProductAttributes';
  /** The &quot;alt-text&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  altText?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-link&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  ctaLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-text&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  ctaText?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;hero-body&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  heroBody?: Maybe<Scalars['String']['output']>;
  /** The &quot;hero-color&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  heroColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;hero-image&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  heroImage?: Maybe<Scalars['Int']['output']>;
  /** The &quot;hero-type&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  heroType?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;open-new-tab&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  openNewTab?: Maybe<Scalars['String']['output']>;
  /** The &quot;outlined-cta-link&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  outlinedCtaLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;outlined-cta-text&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  outlinedCtaText?: Maybe<Scalars['String']['output']>;
  /** The &quot;preheading&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  preheading?: Maybe<Scalars['String']['output']>;
  /** The &quot;second-cta&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  secondCta?: Maybe<Scalars['String']['output']>;
  /** The &quot;secondary-cta-1-icon&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  secondaryCta1Icon?: Maybe<Scalars['String']['output']>;
  /** The &quot;secondary-cta-1-link&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  secondaryCta1Link?: Maybe<Scalars['String']['output']>;
  /** The &quot;secondary-cta-1-text&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  secondaryCta1Text?: Maybe<Scalars['String']['output']>;
  /** The &quot;secondary-cta-2-icon&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  secondaryCta2Icon?: Maybe<Scalars['String']['output']>;
  /** The &quot;secondary-cta-2-link&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  secondaryCta2Link?: Maybe<Scalars['String']['output']>;
  /** The &quot;secondary-cta-2-text&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  secondaryCta2Text?: Maybe<Scalars['String']['output']>;
  /** The &quot;secondary-cta-body&quot; field on the &quot;GenesisCustomBlocksHeroProduct&quot; block */
  secondaryCtaBody?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksHours = EditorBlock & {
  __typename?: 'GenesisCustomBlocksHours';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksHoursAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksHoursAttributes = {
  __typename?: 'GenesisCustomBlocksHoursAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksHours&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksHours&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;hours&quot; field on the &quot;GenesisCustomBlocksHours&quot; block */
  hours?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksHours&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksHoursToggle = EditorBlock & {
  __typename?: 'GenesisCustomBlocksHoursToggle';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksHoursToggleAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksHoursToggleAttributes = {
  __typename?: 'GenesisCustomBlocksHoursToggleAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksHoursToggle&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksHoursToggle&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content&quot; field on the &quot;GenesisCustomBlocksHoursToggle&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;hours&quot; field on the &quot;GenesisCustomBlocksHoursToggle&quot; block */
  hours?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksHoursToggle&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksIconSection = EditorBlock & {
  __typename?: 'GenesisCustomBlocksIconSection';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksIconSectionAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksIconSectionAttributes = {
  __typename?: 'GenesisCustomBlocksIconSectionAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksIconSection&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksIconSection&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;content&quot; field on the &quot;GenesisCustomBlocksIconSection&quot; block */
  content?: Maybe<Scalars['String']['output']>;
  /** The &quot;hide-heading&quot; field on the &quot;GenesisCustomBlocksIconSection&quot; block */
  hideHeading?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;icon&quot; field on the &quot;GenesisCustomBlocksIconSection&quot; block */
  icon?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksIconSection&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksIcons = EditorBlock & {
  __typename?: 'GenesisCustomBlocksIcons';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksIconsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksIconsAttributes = {
  __typename?: 'GenesisCustomBlocksIconsAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksIcons&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksIcons&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;icon&quot; field on the &quot;GenesisCustomBlocksIcons&quot; block */
  icon?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksIcons&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksInstructions = EditorBlock & {
  __typename?: 'GenesisCustomBlocksInstructions';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksInstructionsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksInstructionsAttributes = {
  __typename?: 'GenesisCustomBlocksInstructionsAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksInstructions&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksInstructions&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;hideMobileHeading&quot; field on the &quot;GenesisCustomBlocksInstructions&quot; block */
  hideMobileHeading?: Maybe<Scalars['String']['output']>;
  /** The &quot;instructions&quot; field on the &quot;GenesisCustomBlocksInstructions&quot; block */
  instructions?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksInstructions&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;title&quot; field on the &quot;GenesisCustomBlocksInstructions&quot; block */
  title?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksLede = EditorBlock & {
  __typename?: 'GenesisCustomBlocksLede';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksLedeAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksLedeAttributes = {
  __typename?: 'GenesisCustomBlocksLedeAttributes';
  /** The &quot;bg-color&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  bgColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;copy&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  copy?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-custom-link&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  ctaCustomLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-link&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  ctaLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;cta-text&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  ctaText?: Maybe<Scalars['String']['output']>;
  /** The &quot;hide-image-mobile&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  hideImageMobile?: Maybe<Scalars['String']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;image-alignment&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  imageAlignment?: Maybe<Scalars['String']['output']>;
  /** The &quot;image_alt&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  imageAlt?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;title&quot; field on the &quot;GenesisCustomBlocksLede&quot; block */
  title?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksLinkLibrary = EditorBlock & {
  __typename?: 'GenesisCustomBlocksLinkLibrary';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksLinkLibraryAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksLinkLibraryAttributes = {
  __typename?: 'GenesisCustomBlocksLinkLibraryAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksLinkLibrary&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;categories&quot; field on the &quot;GenesisCustomBlocksLinkLibrary&quot; block */
  categories?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksLinkLibrary&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksLinkLibrary&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksListContentSection = EditorBlock & {
  __typename?: 'GenesisCustomBlocksListContentSection';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksListContentSectionAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksListContentSectionAttributes = {
  __typename?: 'GenesisCustomBlocksListContentSectionAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lcs-alt&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  lcsAlt?: Maybe<Scalars['String']['output']>;
  /** The &quot;lcs-description&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  lcsDescription?: Maybe<Scalars['String']['output']>;
  /** The &quot;lcs-has-link&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  lcsHasLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;lcs-heading&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  lcsHeading?: Maybe<Scalars['String']['output']>;
  /** The &quot;lcs-image&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  lcsImage?: Maybe<Scalars['Int']['output']>;
  /** The &quot;lcs-link-text&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  lcsLinkText?: Maybe<Scalars['String']['output']>;
  /** The &quot;lcs-link-url&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  lcsLinkUrl?: Maybe<Scalars['String']['output']>;
  /** The &quot;lcs-type&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  lcsType?: Maybe<Scalars['String']['output']>;
  /** The &quot;link-heading&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  linkHeading?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksListContentSection&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksPageTitle = EditorBlock & {
  __typename?: 'GenesisCustomBlocksPageTitle';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksPageTitleAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksPageTitleAttributes = {
  __typename?: 'GenesisCustomBlocksPageTitleAttributes';
  /** The &quot;alt-text&quot; field on the &quot;GenesisCustomBlocksPageTitle&quot; block */
  altText?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksPageTitle&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksPageTitle&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksPageTitle&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;page-image&quot; field on the &quot;GenesisCustomBlocksPageTitle&quot; block */
  pageImage?: Maybe<Scalars['Int']['output']>;
  /** The &quot;title-body&quot; field on the &quot;GenesisCustomBlocksPageTitle&quot; block */
  titleBody?: Maybe<Scalars['String']['output']>;
  /** The &quot;title-color&quot; field on the &quot;GenesisCustomBlocksPageTitle&quot; block */
  titleColor?: Maybe<Scalars['String']['output']>;
  /** The &quot;title-has-body&quot; field on the &quot;GenesisCustomBlocksPageTitle&quot; block */
  titleHasBody?: Maybe<Scalars['String']['output']>;
  /** The &quot;title-heading&quot; field on the &quot;GenesisCustomBlocksPageTitle&quot; block */
  titleHeading?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksPerk = EditorBlock & {
  __typename?: 'GenesisCustomBlocksPerk';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksPerkAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksPerkAttributes = {
  __typename?: 'GenesisCustomBlocksPerkAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksPerk&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksPerk&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;copy&quot; field on the &quot;GenesisCustomBlocksPerk&quot; block */
  copy?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksPerk&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksPerk&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;perk-image&quot; field on the &quot;GenesisCustomBlocksPerk&quot; block */
  perkImage?: Maybe<Scalars['Int']['output']>;
  /** The &quot;stacked&quot; field on the &quot;GenesisCustomBlocksPerk&quot; block */
  stacked?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksPostContent = EditorBlock & {
  __typename?: 'GenesisCustomBlocksPostContent';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksPostContentAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksPostContentAttributes = {
  __typename?: 'GenesisCustomBlocksPostContentAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksPostContent&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksPostContent&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksPostContent&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksProductBenefits = EditorBlock & {
  __typename?: 'GenesisCustomBlocksProductBenefits';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksProductBenefitsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksProductBenefitsAttributes = {
  __typename?: 'GenesisCustomBlocksProductBenefitsAttributes';
  /** The &quot;apply_button_text&quot; field on the &quot;GenesisCustomBlocksProductBenefits&quot; block */
  applyButtonText?: Maybe<Scalars['String']['output']>;
  /** The &quot;benefits&quot; field on the &quot;GenesisCustomBlocksProductBenefits&quot; block */
  benefits?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksProductBenefits&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksProductBenefits&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksProductBenefits&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;product&quot; field on the &quot;GenesisCustomBlocksProductBenefits&quot; block */
  product?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksPromo = EditorBlock & {
  __typename?: 'GenesisCustomBlocksPromo';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksPromoAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksPromoAttributes = {
  __typename?: 'GenesisCustomBlocksPromoAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;CTA1_link&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  cTA1Link?: Maybe<Scalars['String']['output']>;
  /** The &quot;CTA1_text&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  cTA1Text?: Maybe<Scalars['String']['output']>;
  /** The &quot;CTA2_link&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  cTA2Link?: Maybe<Scalars['String']['output']>;
  /** The &quot;CTA2_text&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  cTA2Text?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;copy&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  copy?: Maybe<Scalars['String']['output']>;
  /** The &quot;graphicImage&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  graphicImage?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;image_alt&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  imageAlt?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;perks&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  perks?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;showCTA2&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  showCTA2?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;showImage&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  showImage?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;showPerks&quot; field on the &quot;GenesisCustomBlocksPromo&quot; block */
  showPerks?: Maybe<Scalars['Boolean']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksQualtrics = EditorBlock & {
  __typename?: 'GenesisCustomBlocksQualtrics';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksQualtricsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksQualtricsAttributes = {
  __typename?: 'GenesisCustomBlocksQualtricsAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksQualtrics&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksQualtrics&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksQualtrics&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;page&quot; field on the &quot;GenesisCustomBlocksQualtrics&quot; block */
  page?: Maybe<Scalars['String']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksQualtrics&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksQuicklink = EditorBlock & {
  __typename?: 'GenesisCustomBlocksQuicklink';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksQuicklinkAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksQuicklinkAttributes = {
  __typename?: 'GenesisCustomBlocksQuicklinkAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksQuicklink&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksQuicklink&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksQuicklink&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;icon&quot; field on the &quot;GenesisCustomBlocksQuicklink&quot; block */
  icon?: Maybe<Scalars['Int']['output']>;
  /** The &quot;link&quot; field on the &quot;GenesisCustomBlocksQuicklink&quot; block */
  link?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksQuicklink&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksRatesTable = EditorBlock & {
  __typename?: 'GenesisCustomBlocksRatesTable';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksRatesTableAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksRatesTableAttributes = {
  __typename?: 'GenesisCustomBlocksRatesTableAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksRatesTable&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksRatesTable&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksRatesTable&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;product&quot; field on the &quot;GenesisCustomBlocksRatesTable&quot; block */
  product?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksScheduler = EditorBlock & {
  __typename?: 'GenesisCustomBlocksScheduler';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksSchedulerAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksSchedulerAttributes = {
  __typename?: 'GenesisCustomBlocksSchedulerAttributes';
  /** The &quot;anyResourceText&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  anyResourceText?: Maybe<Scalars['String']['output']>;
  /** The &quot;appUrl&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  appUrl?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;finishImage&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  finishImage?: Maybe<Scalars['Int']['output']>;
  /** The &quot;finishText&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  finishText?: Maybe<Scalars['String']['output']>;
  /** The &quot;flowId&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  flowId?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;resourceHeading&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  resourceHeading?: Maybe<Scalars['String']['output']>;
  /** The &quot;resourceImage&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  resourceImage?: Maybe<Scalars['Int']['output']>;
  /** The &quot;resourcePageHeading&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  resourcePageHeading?: Maybe<Scalars['String']['output']>;
  /** The &quot;reviewHeading&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  reviewHeading?: Maybe<Scalars['String']['output']>;
  /** The &quot;scheduledTimeHeading&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  scheduledTimeHeading?: Maybe<Scalars['String']['output']>;
  /** The &quot;selectResourceText&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  selectResourceText?: Maybe<Scalars['String']['output']>;
  /** The &quot;selectSubjectText&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  selectSubjectText?: Maybe<Scalars['String']['output']>;
  /** The &quot;viewMoreButton&quot; field on the &quot;GenesisCustomBlocksScheduler&quot; block */
  viewMoreButton?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksSidekick = EditorBlock & {
  __typename?: 'GenesisCustomBlocksSidekick';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksSidekickAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksSidekickAttributes = {
  __typename?: 'GenesisCustomBlocksSidekickAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksSidekick&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;button-link&quot; field on the &quot;GenesisCustomBlocksSidekick&quot; block */
  buttonLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;button-text&quot; field on the &quot;GenesisCustomBlocksSidekick&quot; block */
  buttonText?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksSidekick&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;description&quot; field on the &quot;GenesisCustomBlocksSidekick&quot; block */
  description?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksSidekick&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksSidekick&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;image-alt&quot; field on the &quot;GenesisCustomBlocksSidekick&quot; block */
  imageAlt?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksSidekick&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksStatement = EditorBlock & {
  __typename?: 'GenesisCustomBlocksStatement';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksStatementAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksStatementAttributes = {
  __typename?: 'GenesisCustomBlocksStatementAttributes';
  /** The &quot;alt-text&quot; field on the &quot;GenesisCustomBlocksStatement&quot; block */
  altText?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksStatement&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;body&quot; field on the &quot;GenesisCustomBlocksStatement&quot; block */
  body?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksStatement&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksStatement&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading-link&quot; field on the &quot;GenesisCustomBlocksStatement&quot; block */
  headingLink?: Maybe<Scalars['String']['output']>;
  /** The &quot;heading-linked&quot; field on the &quot;GenesisCustomBlocksStatement&quot; block */
  headingLinked?: Maybe<Scalars['String']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksStatement&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksStatement&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;statement-type&quot; field on the &quot;GenesisCustomBlocksStatement&quot; block */
  statementType?: Maybe<Scalars['String']['output']>;
  /** The &quot;subheading&quot; field on the &quot;GenesisCustomBlocksStatement&quot; block */
  subheading?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksTabbed = EditorBlock & {
  __typename?: 'GenesisCustomBlocksTabbed';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksTabbedAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksTabbedAttributes = {
  __typename?: 'GenesisCustomBlocksTabbedAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksTabbed&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksTabbed&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksTabbed&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;tabs&quot; field on the &quot;GenesisCustomBlocksTabbed&quot; block */
  tabs?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksTable = EditorBlock & {
  __typename?: 'GenesisCustomBlocksTable';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksTableAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksTableAttributes = {
  __typename?: 'GenesisCustomBlocksTableAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksTable&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;cellpadding&quot; field on the &quot;GenesisCustomBlocksTable&quot; block */
  cellpadding?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksTable&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;header&quot; field on the &quot;GenesisCustomBlocksTable&quot; block */
  header?: Maybe<Scalars['String']['output']>;
  /** The &quot;id&quot; field on the &quot;GenesisCustomBlocksTable&quot; block */
  id?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksTable&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;rows&quot; field on the &quot;GenesisCustomBlocksTable&quot; block */
  rows?: Maybe<Scalars['String']['output']>;
  /** The &quot;table-font&quot; field on the &quot;GenesisCustomBlocksTable&quot; block */
  tableFont?: Maybe<Scalars['String']['output']>;
  /** The &quot;table-width&quot; field on the &quot;GenesisCustomBlocksTable&quot; block */
  tableWidth?: Maybe<Scalars['String']['output']>;
  /** The &quot;variant&quot; field on the &quot;GenesisCustomBlocksTable&quot; block */
  variant?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksTaglessText = EditorBlock & {
  __typename?: 'GenesisCustomBlocksTaglessText';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksTaglessTextAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksTaglessTextAttributes = {
  __typename?: 'GenesisCustomBlocksTaglessTextAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksTaglessText&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksTaglessText&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksTaglessText&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;text&quot; field on the &quot;GenesisCustomBlocksTaglessText&quot; block */
  text?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksUsp = EditorBlock & {
  __typename?: 'GenesisCustomBlocksUsp';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksUspAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksUspAttributes = {
  __typename?: 'GenesisCustomBlocksUspAttributes';
  /** The &quot;alt-text&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  altText?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;body&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  body?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;ctas&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  ctas?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;heading&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  heading?: Maybe<Scalars['String']['output']>;
  /** The &quot;image&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  image?: Maybe<Scalars['Int']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;open-new-tab&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  openNewTab?: Maybe<Scalars['String']['output']>;
  /** The &quot;video-or-image&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  videoOrImage?: Maybe<Scalars['String']['output']>;
  /** The &quot;vimeoID&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  vimeoID?: Maybe<Scalars['String']['output']>;
  /** The &quot;youtubeID&quot; field on the &quot;GenesisCustomBlocksUsp&quot; block */
  youtubeID?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksUtterances = EditorBlock & {
  __typename?: 'GenesisCustomBlocksUtterances';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksUtterancesAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksUtterancesAttributes = {
  __typename?: 'GenesisCustomBlocksUtterancesAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksUtterances&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksUtterances&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksUtterances&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;utterances&quot; field on the &quot;GenesisCustomBlocksUtterances&quot; block */
  utterances?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksVimeo = EditorBlock & {
  __typename?: 'GenesisCustomBlocksVimeo';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksVimeoAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksVimeoAttributes = {
  __typename?: 'GenesisCustomBlocksVimeoAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksVimeo&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksVimeo&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;description&quot; field on the &quot;GenesisCustomBlocksVimeo&quot; block */
  description?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksVimeo&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;title&quot; field on the &quot;GenesisCustomBlocksVimeo&quot; block */
  title?: Maybe<Scalars['String']['output']>;
  /** The &quot;video-type&quot; field on the &quot;GenesisCustomBlocksVimeo&quot; block */
  videoType?: Maybe<Scalars['String']['output']>;
  /** The &quot;vimeo-id&quot; field on the &quot;GenesisCustomBlocksVimeo&quot; block */
  vimeoId?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisCustomBlocksXp2Calculator = EditorBlock & {
  __typename?: 'GenesisCustomBlocksXp2Calculator';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisCustomBlocksXp2CalculatorAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisCustomBlocksXp2CalculatorAttributes = {
  __typename?: 'GenesisCustomBlocksXp2CalculatorAttributes';
  /** The &quot;apy-label&quot; field on the &quot;GenesisCustomBlocksXp2Calculator&quot; block */
  apyLabel?: Maybe<Scalars['String']['output']>;
  /** The &quot;apy-tooltip&quot; field on the &quot;GenesisCustomBlocksXp2Calculator&quot; block */
  apyTooltip?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisCustomBlocksXp2Calculator&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisCustomBlocksXp2Calculator&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisCustomBlocksXp2Calculator&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;product&quot; field on the &quot;GenesisCustomBlocksXp2Calculator&quot; block */
  product?: Maybe<Scalars['String']['output']>;
  /** The &quot;type&quot; field on the &quot;GenesisCustomBlocksXp2Calculator&quot; block */
  type?: Maybe<Scalars['String']['output']>;
  /** The &quot;withdraw-label&quot; field on the &quot;GenesisCustomBlocksXp2Calculator&quot; block */
  withdrawLabel?: Maybe<Scalars['String']['output']>;
  /** The &quot;withdraw-tooltip&quot; field on the &quot;GenesisCustomBlocksXp2Calculator&quot; block */
  withdrawTooltip?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type GenesisPageBuilderGpbPortfolioGrid = EditorBlock & {
  __typename?: 'GenesisPageBuilderGpbPortfolioGrid';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<GenesisPageBuilderGpbPortfolioGridAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type GenesisPageBuilderGpbPortfolioGridAttributes = {
  __typename?: 'GenesisPageBuilderGpbPortfolioGridAttributes';
  /** The &quot;align&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;categories&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  categories?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;columns&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  columns?: Maybe<Scalars['Float']['output']>;
  /** The &quot;displayPostExcerpt&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  displayPostExcerpt?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayPostImage&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  displayPostImage?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayPostLink&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  displayPostLink?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displayPostTitle&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  displayPostTitle?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;displaySectionTitle&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  displaySectionTitle?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;excerptLength&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  excerptLength?: Maybe<Scalars['Float']['output']>;
  /** The &quot;id&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  id?: Maybe<Scalars['Float']['output']>;
  /** The &quot;imageSize&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  imageSize?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;offset&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  offset?: Maybe<Scalars['Float']['output']>;
  /** The &quot;order&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  order?: Maybe<Scalars['String']['output']>;
  /** The &quot;orderBy&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  orderBy?: Maybe<Scalars['String']['output']>;
  /** The &quot;postLayout&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  postLayout?: Maybe<Scalars['String']['output']>;
  /** The &quot;postTitleTag&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  postTitleTag?: Maybe<Scalars['String']['output']>;
  /** The &quot;postsToShow&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  postsToShow?: Maybe<Scalars['Float']['output']>;
  /** The &quot;readMoreText&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  readMoreText?: Maybe<Scalars['String']['output']>;
  /** The &quot;sectionTag&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  sectionTag?: Maybe<Scalars['String']['output']>;
  /** The &quot;sectionTitle&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  sectionTitle?: Maybe<Scalars['String']['output']>;
  /** The &quot;sectionTitleTag&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  sectionTitleTag?: Maybe<Scalars['String']['output']>;
  /** The &quot;url&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  url?: Maybe<Scalars['String']['output']>;
  /** The &quot;width&quot; field on the &quot;GenesisPageBuilderGpbPortfolioGrid&quot; block */
  width?: Maybe<Scalars['String']['output']>;
};

/** The graphqlDocument type */
export type GraphqlDocument = ContentNode & DatabaseIdentifier & Node & NodeWithContentEditor & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable & {
  __typename?: 'GraphqlDocument';
  /** Alias names for saved GraphQL query documents */
  alias?: Maybe<Array<Scalars['String']['output']>>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** Description for the saved GraphQL document */
  description?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** Allow, deny or default access grant for specific query */
  grant?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  graphqlDocumentId: Scalars['Int']['output'];
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the graphql_document object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** HTTP Cache-Control max-age directive for a saved GraphQL document */
  maxAgeHeader?: Maybe<Scalars['Int']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * Connection between the GraphqlDocument type and the graphqlDocument type
   * @deprecated The &quot;GraphqlDocument&quot; Type is not publicly queryable and does not support previews. This field will be removed in the future.
   */
  preview?: Maybe<GraphqlDocumentToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The graphqlDocument type */
export type GraphqlDocumentContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** The graphqlDocument type */
export type GraphqlDocumentEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The graphqlDocument type */
export type GraphqlDocumentEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The graphqlDocument type */
export type GraphqlDocumentTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Connection to graphqlDocument Nodes */
export type GraphqlDocumentConnection = {
  /** A list of edges (relational context) between RootQuery and connected graphqlDocument Nodes */
  edges: Array<GraphqlDocumentConnectionEdge>;
  /** A list of connected graphqlDocument Nodes */
  nodes: Array<GraphqlDocument>;
  /** Information about pagination in a connection. */
  pageInfo: GraphqlDocumentConnectionPageInfo;
};

/** Edge between a Node and a connected graphqlDocument */
export type GraphqlDocumentConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected graphqlDocument Node */
  node: GraphqlDocument;
};

/** Page Info on the connected GraphqlDocumentConnectionEdge */
export type GraphqlDocumentConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum GraphqlDocumentIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the GraphqlDocument type and the graphqlDocument type */
export type GraphqlDocumentToPreviewConnectionEdge = Edge & GraphqlDocumentConnectionEdge & OneToOneConnection & {
  __typename?: 'GraphqlDocumentToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated The &quot;GraphqlDocument&quot; Type is not publicly queryable and does not support previews. This field will be removed in the future.
   */
  node: GraphqlDocument;
};

/** The header setting type */
export type HeaderSettings = {
  __typename?: 'HeaderSettings';
  /** The string Settings Group */
  headerSettings?: Maybe<Scalars['String']['output']>;
  /** Genesis Header Utilities */
  headerUtilities?: Maybe<Scalars['String']['output']>;
  /** Genesis Header Mobile Utilities */
  headerUtilitiesMobile?: Maybe<Scalars['String']['output']>;
};

/** Content node with hierarchical (parent/child) relationships */
export type HierarchicalContentNode = {
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to a node of content */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** Content node with hierarchical (parent/child) relationships */
export type HierarchicalContentNodeAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** Content node with hierarchical (parent/child) relationships */
export type HierarchicalContentNodeChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** Content node with hierarchical (parent/child) relationships */
export type HierarchicalContentNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Content node with hierarchical (parent/child) relationships */
export type HierarchicalContentNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type HierarchicalContentNodeToContentNodeAncestorsConnection = Connection & ContentNodeConnection & {
  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnection';
  /** Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection */
  edges: Array<HierarchicalContentNodeToContentNodeAncestorsConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo;
};

/** An edge in a connection */
export type HierarchicalContentNodeToContentNodeAncestorsConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Page Info on the &quot;HierarchicalContentNodeToContentNodeAncestorsConnection&quot; */
export type HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection */
export type HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type HierarchicalContentNodeToContentNodeChildrenConnection = Connection & ContentNodeConnection & {
  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnection';
  /** Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection */
  edges: Array<HierarchicalContentNodeToContentNodeChildrenConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo;
};

/** An edge in a connection */
export type HierarchicalContentNodeToContentNodeChildrenConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Page Info on the &quot;HierarchicalContentNodeToContentNodeChildrenConnection&quot; */
export type HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection */
export type HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type HierarchicalContentNodeToParentContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'HierarchicalContentNodeToParentContentNodeConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: ContentNode;
};

/** Node with hierarchical (parent/child) relationships */
export type HierarchicalNode = {
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
};

/** Term node with hierarchical (parent/child) relationships */
export type HierarchicalTermNode = {
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** Term node with hierarchical (parent/child) relationships */
export type HierarchicalTermNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Term node with hierarchical (parent/child) relationships */
export type HierarchicalTermNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The instruction type */
export type Instruction = ContentNode & DatabaseIdentifier & Node & NodeWithAuthor & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {
  __typename?: 'Instruction';
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  displayName?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the instruction object. */
  id: Scalars['ID']['output'];
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  instructionId: Scalars['Int']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  /** Connection between the Instruction type and the instruction type */
  preview?: Maybe<InstructionToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** Connection between the instruction type and the step type */
  steps?: Maybe<InstructionToStepConnection>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The instruction type */
export type InstructionEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The instruction type */
export type InstructionEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The instruction type */
export type InstructionStepsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The instruction type */
export type InstructionTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Connection to instruction Nodes */
export type InstructionConnection = {
  /** A list of edges (relational context) between RootQuery and connected instruction Nodes */
  edges: Array<InstructionConnectionEdge>;
  /** A list of connected instruction Nodes */
  nodes: Array<Instruction>;
  /** Information about pagination in a connection. */
  pageInfo: InstructionConnectionPageInfo;
};

/** Edge between a Node and a connected instruction */
export type InstructionConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected instruction Node */
  node: Instruction;
};

/** Page Info on the connected InstructionConnectionEdge */
export type InstructionConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum InstructionIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the Instruction type and the instruction type */
export type InstructionToPreviewConnectionEdge = Edge & InstructionConnectionEdge & OneToOneConnection & {
  __typename?: 'InstructionToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Instruction;
};

/** Connection between the instruction type and the step type */
export type InstructionToStepConnection = Connection & StepConnection & {
  __typename?: 'InstructionToStepConnection';
  /** Edges for the InstructionToStepConnection connection */
  edges: Array<InstructionToStepConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Step>;
  /** Information about pagination in a connection. */
  pageInfo: InstructionToStepConnectionPageInfo;
};

/** An edge in a connection */
export type InstructionToStepConnectionEdge = Edge & StepConnectionEdge & {
  __typename?: 'InstructionToStepConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Step;
};

/** Page Info on the &quot;InstructionToStepConnection&quot; */
export type InstructionToStepConnectionPageInfo = PageInfo & StepConnectionPageInfo & WpPageInfo & {
  __typename?: 'InstructionToStepConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type LinkLibraryAddlinkBlock = EditorBlock & {
  __typename?: 'LinkLibraryAddlinkBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<LinkLibraryAddlinkBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type LinkLibraryAddlinkBlockAttributes = {
  __typename?: 'LinkLibraryAddlinkBlockAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;LinkLibraryAddlinkBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;LinkLibraryAddlinkBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;LinkLibraryAddlinkBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;settings&quot; field on the &quot;LinkLibraryAddlinkBlock&quot; block */
  settings?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type LinkLibraryCatsBlock = EditorBlock & {
  __typename?: 'LinkLibraryCatsBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<LinkLibraryCatsBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type LinkLibraryCatsBlockAttributes = {
  __typename?: 'LinkLibraryCatsBlockAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;LinkLibraryCatsBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;categorylistoverride&quot; field on the &quot;LinkLibraryCatsBlock&quot; block */
  categorylistoverride?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;categorylistoverrideCSV&quot; field on the &quot;LinkLibraryCatsBlock&quot; block */
  categorylistoverrideCSV?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;LinkLibraryCatsBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;excludecategoryoverride&quot; field on the &quot;LinkLibraryCatsBlock&quot; block */
  excludecategoryoverride?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;excludecategoryoverrideCSV&quot; field on the &quot;LinkLibraryCatsBlock&quot; block */
  excludecategoryoverrideCSV?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;LinkLibraryCatsBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;settings&quot; field on the &quot;LinkLibraryCatsBlock&quot; block */
  settings?: Maybe<Scalars['String']['output']>;
  /** The &quot;taglistoverride&quot; field on the &quot;LinkLibraryCatsBlock&quot; block */
  taglistoverride?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;taglistoverrideCSV&quot; field on the &quot;LinkLibraryCatsBlock&quot; block */
  taglistoverrideCSV?: Maybe<Scalars['String']['output']>;
  /** The &quot;targetlibrary&quot; field on the &quot;LinkLibraryCatsBlock&quot; block */
  targetlibrary?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type LinkLibraryCountBlock = EditorBlock & {
  __typename?: 'LinkLibraryCountBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<LinkLibraryCountBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type LinkLibraryCountBlockAttributes = {
  __typename?: 'LinkLibraryCountBlockAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;LinkLibraryCountBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;LinkLibraryCountBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;LinkLibraryCountBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;settings&quot; field on the &quot;LinkLibraryCountBlock&quot; block */
  settings?: Maybe<Scalars['String']['output']>;
};

/** Keys and their values, both cast as strings */
export type LinkLibraryLink = {
  __typename?: 'LinkLibraryLink';
  date?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type LinkLibraryLinkBlock = EditorBlock & {
  __typename?: 'LinkLibraryLinkBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<LinkLibraryLinkBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type LinkLibraryLinkBlockAttributes = {
  __typename?: 'LinkLibraryLinkBlockAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;categorylistoverride&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  categorylistoverride?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;categorylistoverrideCSV&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  categorylistoverrideCSV?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;descoverride&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  descoverride?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;excludecategoryoverride&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  excludecategoryoverride?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;excludecategoryoverrideCSV&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  excludecategoryoverrideCSV?: Maybe<Scalars['String']['output']>;
  /** The &quot;linkdirectionoverride&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  linkdirectionoverride?: Maybe<Scalars['String']['output']>;
  /** The &quot;linkorderoverride&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  linkorderoverride?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;maxlinksoverride&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  maxlinksoverride?: Maybe<Scalars['String']['output']>;
  /** The &quot;notesoverride&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  notesoverride?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;rssoverride&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  rssoverride?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;settings&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  settings?: Maybe<Scalars['String']['output']>;
  /** The &quot;taglistoverride&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  taglistoverride?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;taglistoverrideCSV&quot; field on the &quot;LinkLibraryLinkBlock&quot; block */
  taglistoverrideCSV?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type LinkLibrarySearchBlock = EditorBlock & {
  __typename?: 'LinkLibrarySearchBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<LinkLibrarySearchBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type LinkLibrarySearchBlockAttributes = {
  __typename?: 'LinkLibrarySearchBlockAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;LinkLibrarySearchBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;LinkLibrarySearchBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;LinkLibrarySearchBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;settings&quot; field on the &quot;LinkLibrarySearchBlock&quot; block */
  settings?: Maybe<Scalars['String']['output']>;
};

/** The linklibrary type */
export type Linklibrary = ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & Node & NodeWithComments & NodeWithContentEditor & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable & {
  __typename?: 'Linklibrary';
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']['output']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']['output']>;
  /** Connection between the Linklibrary type and the Comment type */
  comments?: Maybe<LinklibraryToCommentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the link_library_links object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  linklibraryId: Scalars['Int']['output'];
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /**
   * Connection between the Linklibrary type and the linklibrary type
   * @deprecated The &quot;Linklibrary&quot; Type is not publicly queryable and does not support previews. This field will be removed in the future.
   */
  preview?: Maybe<LinklibraryToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to a node of content */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The linklibrary type */
export type LinklibraryAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** The linklibrary type */
export type LinklibraryChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** The linklibrary type */
export type LinklibraryCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LinklibraryToCommentConnectionWhereArgs>;
};


/** The linklibrary type */
export type LinklibraryContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** The linklibrary type */
export type LinklibraryEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The linklibrary type */
export type LinklibraryEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The linklibrary type */
export type LinklibraryTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Connection to linklibrary Nodes */
export type LinklibraryConnection = {
  /** A list of edges (relational context) between RootQuery and connected linklibrary Nodes */
  edges: Array<LinklibraryConnectionEdge>;
  /** A list of connected linklibrary Nodes */
  nodes: Array<Linklibrary>;
  /** Information about pagination in a connection. */
  pageInfo: LinklibraryConnectionPageInfo;
};

/** Edge between a Node and a connected linklibrary */
export type LinklibraryConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected linklibrary Node */
  node: Linklibrary;
};

/** Page Info on the connected LinklibraryConnectionEdge */
export type LinklibraryConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum LinklibraryIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the Linklibrary type and the Comment type */
export type LinklibraryToCommentConnection = CommentConnection & Connection & {
  __typename?: 'LinklibraryToCommentConnection';
  /** Edges for the LinklibraryToCommentConnection connection */
  edges: Array<LinklibraryToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: LinklibraryToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type LinklibraryToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'LinklibraryToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Page Info on the &quot;LinklibraryToCommentConnection&quot; */
export type LinklibraryToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'LinklibraryToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the LinklibraryToCommentConnection connection */
export type LinklibraryToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']['input']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the Linklibrary type and the linklibrary type */
export type LinklibraryToPreviewConnectionEdge = Edge & LinklibraryConnectionEdge & OneToOneConnection & {
  __typename?: 'LinklibraryToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /**
   * The node of the connection, without the edges
   * @deprecated The &quot;Linklibrary&quot; Type is not publicly queryable and does not support previews. This field will be removed in the future.
   */
  node: Linklibrary;
};

/** The location type */
export type Location = ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithAuthor & NodeWithContentEditor & NodeWithEditorBlocks & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {
  __typename?: 'Location';
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** Genesis Blog Top */
  details?: Maybe<LocationDetails>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** List of editor blocks */
  editorBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The excerpt of the post. */
  excerpt?: Maybe<Scalars['String']['output']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']['output']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the wpsl_stores object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** Connection between the Location type and the locationCategory type */
  locationCategories?: Maybe<LocationToLocationCategoryConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  locationId: Scalars['Int']['output'];
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the Location type and the location type */
  preview?: Maybe<LocationToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
  /** Connection between the Location type and the location type */
  revisions?: Maybe<LocationToRevisionConnection>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to a node of content */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Connection between the Location type and the TermNode type */
  terms?: Maybe<LocationToTermNodeConnection>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The location type */
export type LocationAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** The location type */
export type LocationChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** The location type */
export type LocationContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** The location type */
export type LocationEditorBlocksArgs = {
  flat?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The location type */
export type LocationEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The location type */
export type LocationEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The location type */
export type LocationExcerptArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** The location type */
export type LocationLocationCategoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LocationToLocationCategoryConnectionWhereArgs>;
};


/** The location type */
export type LocationRevisionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LocationToRevisionConnectionWhereArgs>;
};


/** The location type */
export type LocationTermsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LocationToTermNodeConnectionWhereArgs>;
};


/** The location type */
export type LocationTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** The locationCategory type */
export type LocationCategory = DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {
  __typename?: 'LocationCategory';
  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<LocationCategoryToAncestorsLocationCategoryConnection>;
  /** Connection between the locationCategory type and its children locationCategories. */
  children?: Maybe<LocationCategoryToLocationCategoryConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the LocationCategory type and the ContentNode type */
  contentNodes?: Maybe<LocationCategoryToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  locationCategoryId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the LocationCategory type and the location type */
  locations?: Maybe<LocationCategoryToLocationConnection>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /** Connection between the locationCategory type and its parent locationCategory. */
  parent?: Maybe<LocationCategoryToParentLocationCategoryConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** The Yoast SEO data of the Location Categories taxonomy. */
  seo?: Maybe<TaxonomySeo>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /** Connection between the LocationCategory type and the Taxonomy type */
  taxonomy?: Maybe<LocationCategoryToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The locationCategory type */
export type LocationCategoryAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The locationCategory type */
export type LocationCategoryChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LocationCategoryToLocationCategoryConnectionWhereArgs>;
};


/** The locationCategory type */
export type LocationCategoryContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LocationCategoryToContentNodeConnectionWhereArgs>;
};


/** The locationCategory type */
export type LocationCategoryEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The locationCategory type */
export type LocationCategoryEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The locationCategory type */
export type LocationCategoryLocationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LocationCategoryToLocationConnectionWhereArgs>;
};

/** Connection to locationCategory Nodes */
export type LocationCategoryConnection = {
  /** A list of edges (relational context) between RootQuery and connected locationCategory Nodes */
  edges: Array<LocationCategoryConnectionEdge>;
  /** A list of connected locationCategory Nodes */
  nodes: Array<LocationCategory>;
  /** Information about pagination in a connection. */
  pageInfo: LocationCategoryConnectionPageInfo;
};

/** Edge between a Node and a connected locationCategory */
export type LocationCategoryConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected locationCategory Node */
  node: LocationCategory;
};

/** Page Info on the connected LocationCategoryConnectionEdge */
export type LocationCategoryConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum LocationCategoryIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the LocationCategory type and the locationCategory type */
export type LocationCategoryToAncestorsLocationCategoryConnection = Connection & LocationCategoryConnection & {
  __typename?: 'LocationCategoryToAncestorsLocationCategoryConnection';
  /** Edges for the LocationCategoryToAncestorsLocationCategoryConnection connection */
  edges: Array<LocationCategoryToAncestorsLocationCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<LocationCategory>;
  /** Information about pagination in a connection. */
  pageInfo: LocationCategoryToAncestorsLocationCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type LocationCategoryToAncestorsLocationCategoryConnectionEdge = Edge & LocationCategoryConnectionEdge & {
  __typename?: 'LocationCategoryToAncestorsLocationCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: LocationCategory;
};

/** Page Info on the &quot;LocationCategoryToAncestorsLocationCategoryConnection&quot; */
export type LocationCategoryToAncestorsLocationCategoryConnectionPageInfo = LocationCategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'LocationCategoryToAncestorsLocationCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the LocationCategory type and the ContentNode type */
export type LocationCategoryToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'LocationCategoryToContentNodeConnection';
  /** Edges for the LocationCategoryToContentNodeConnection connection */
  edges: Array<LocationCategoryToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: LocationCategoryToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type LocationCategoryToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'LocationCategoryToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Page Info on the &quot;LocationCategoryToContentNodeConnection&quot; */
export type LocationCategoryToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'LocationCategoryToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the LocationCategoryToContentNodeConnection connection */
export type LocationCategoryToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfLocationCategoryEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the LocationCategory type and the locationCategory type */
export type LocationCategoryToLocationCategoryConnection = Connection & LocationCategoryConnection & {
  __typename?: 'LocationCategoryToLocationCategoryConnection';
  /** Edges for the LocationCategoryToLocationCategoryConnection connection */
  edges: Array<LocationCategoryToLocationCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<LocationCategory>;
  /** Information about pagination in a connection. */
  pageInfo: LocationCategoryToLocationCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type LocationCategoryToLocationCategoryConnectionEdge = Edge & LocationCategoryConnectionEdge & {
  __typename?: 'LocationCategoryToLocationCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: LocationCategory;
};

/** Page Info on the &quot;LocationCategoryToLocationCategoryConnection&quot; */
export type LocationCategoryToLocationCategoryConnectionPageInfo = LocationCategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'LocationCategoryToLocationCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the LocationCategoryToLocationCategoryConnection connection */
export type LocationCategoryToLocationCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the LocationCategory type and the location type */
export type LocationCategoryToLocationConnection = Connection & LocationConnection & {
  __typename?: 'LocationCategoryToLocationConnection';
  /** Edges for the LocationCategoryToLocationConnection connection */
  edges: Array<LocationCategoryToLocationConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Location>;
  /** Information about pagination in a connection. */
  pageInfo: LocationCategoryToLocationConnectionPageInfo;
};

/** An edge in a connection */
export type LocationCategoryToLocationConnectionEdge = Edge & LocationConnectionEdge & {
  __typename?: 'LocationCategoryToLocationConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Location;
};

/** Page Info on the &quot;LocationCategoryToLocationConnection&quot; */
export type LocationCategoryToLocationConnectionPageInfo = LocationConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'LocationCategoryToLocationConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the LocationCategoryToLocationConnection connection */
export type LocationCategoryToLocationConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the LocationCategory type and the locationCategory type */
export type LocationCategoryToParentLocationCategoryConnectionEdge = Edge & LocationCategoryConnectionEdge & OneToOneConnection & {
  __typename?: 'LocationCategoryToParentLocationCategoryConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: LocationCategory;
};

/** Connection between the LocationCategory type and the Taxonomy type */
export type LocationCategoryToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {
  __typename?: 'LocationCategoryToTaxonomyConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Taxonomy;
};

/** Connection to location Nodes */
export type LocationConnection = {
  /** A list of edges (relational context) between RootQuery and connected location Nodes */
  edges: Array<LocationConnectionEdge>;
  /** A list of connected location Nodes */
  nodes: Array<Location>;
  /** Information about pagination in a connection. */
  pageInfo: LocationConnectionPageInfo;
};

/** Edge between a Node and a connected location */
export type LocationConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected location Node */
  node: Location;
};

/** Page Info on the connected LocationConnectionEdge */
export type LocationConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Keys and their values, both cast as strings */
export type LocationDetails = {
  __typename?: 'LocationDetails';
  address?: Maybe<Scalars['String']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  contact?: Maybe<Scalars['String']['output']>;
  driveThruHoursHTML?: Maybe<Scalars['String']['output']>;
  lat?: Maybe<Scalars['String']['output']>;
  lng?: Maybe<Scalars['String']['output']>;
  lobbyHoursHTML?: Maybe<Scalars['String']['output']>;
  services?: Maybe<Scalars['String']['output']>;
  specialHoursHTML?: Maybe<Scalars['String']['output']>;
  specialMessage?: Maybe<Scalars['String']['output']>;
  specialMessageTitle?: Maybe<Scalars['String']['output']>;
  specialMessageType?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  zip?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum LocationIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Set relationships between the location to locationCategories */
export type LocationLocationCategoriesInput = {
  /** If true, this will append the locationCategory to existing related locationCategories. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']['input']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<LocationLocationCategoriesNodeInput>>>;
};

/** List of locationCategories to connect the location to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type LocationLocationCategoriesNodeInput = {
  /** The description of the locationCategory. This field is used to set a description of the locationCategory if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the locationCategory. If present, this will be used to connect to the location. If no existing locationCategory exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** The name of the locationCategory. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the locationCategory. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The location setting type */
export type LocationSettings = {
  __typename?: 'LocationSettings';
  /** Meta for the key address_format as a string */
  addressFormat?: Maybe<Scalars['String']['output']>;
  /** Meta for the key api_browser_key as a string */
  apiBrowserKey?: Maybe<Scalars['String']['output']>;
  /** Meta for the key api_geocode_component as a string */
  apiGeocodeComponent?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key api_language as a string */
  apiLanguage?: Maybe<Scalars['String']['output']>;
  /** Meta for the key api_region as a string */
  apiRegion?: Maybe<Scalars['String']['output']>;
  /** Meta for the key api_server_key as a string */
  apiServerKey?: Maybe<Scalars['String']['output']>;
  /** Meta for the key auto_locate as a string */
  autoLocate?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key auto_zoom_level as a string */
  autoZoomLevel?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key autocomplete as a string */
  autocomplete?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key autoload as a string */
  autoload?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key autoload_limit as a string */
  autoloadLimit?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key back_label as a string */
  backLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key category_default_label as a string */
  categoryDefaultLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key category_filter as a string */
  categoryFilter?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key category_filter_type as a string */
  categoryFilterType?: Maybe<Scalars['String']['output']>;
  /** Meta for the key category_label as a string */
  categoryLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key category_slug as a string */
  categorySlug?: Maybe<Scalars['String']['output']>;
  /** Meta for the key clickable_contact_details as a string */
  clickableContactDetails?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key cluster_size as a string */
  clusterSize?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key cluster_zoom as a string */
  clusterZoom?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key control_position as a string */
  controlPosition?: Maybe<Scalars['String']['output']>;
  /** Meta for the key debug as a string */
  debug?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key delay_loading as a string */
  delayLoading?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key deregister_gmaps as a string */
  deregisterGmaps?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key direction_redirect as a string */
  directionRedirect?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key directions_label as a string */
  directionsLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key distance_unit as a string */
  distanceUnit?: Maybe<Scalars['String']['output']>;
  /** Meta for the key editor_country as a string */
  editorCountry?: Maybe<Scalars['String']['output']>;
  /** Meta for the key editor_hour_format as a string */
  editorHourFormat?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key editor_hour_input as a string */
  editorHourInput?: Maybe<Scalars['String']['output']>;
  /** Meta for the key editor_map_type as a string */
  editorMapType?: Maybe<Scalars['String']['output']>;
  /** Meta for the key email_label as a string */
  emailLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key error_label as a string */
  errorLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key fax_label as a string */
  faxLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key force_postalcode as a string */
  forcePostalcode?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key height as a string */
  height?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key hide_country as a string */
  hideCountry?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key hide_distance as a string */
  hideDistance?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key hide_hours as a string */
  hideHours?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key hours_label as a string */
  hoursLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key infowindow_style as a string */
  infowindowStyle?: Maybe<Scalars['String']['output']>;
  /** Meta for the key infowindow_width as a string */
  infowindowWidth?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key label_width as a string */
  labelWidth?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key limit_label as a string */
  limitLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key listing_below_no_scroll as a string */
  listingBelowNoScroll?: Maybe<Scalars['Int']['output']>;
  /** The string Settings Group */
  locationSettings?: Maybe<Scalars['String']['output']>;
  /** Meta for the key map_style as a string */
  mapStyle?: Maybe<Scalars['String']['output']>;
  /** Meta for the key map_type as a string */
  mapType?: Maybe<Scalars['String']['output']>;
  /** Meta for the key marker_clusters as a string */
  markerClusters?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key marker_effect as a string */
  markerEffect?: Maybe<Scalars['String']['output']>;
  /** Meta for the key category_default_label as a string */
  markerIconProps?: Maybe<Scalars['String']['output']>;
  /** Meta for the key marker_streetview as a string */
  markerStreetview?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key marker_zoom_to as a string */
  markerZoomTo?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key max_results as a string */
  maxResults?: Maybe<Scalars['String']['output']>;
  /** Meta for the key more_info as a string */
  moreInfo?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key more_info_location as a string */
  moreInfoLocation?: Maybe<Scalars['String']['output']>;
  /** Meta for the key more_label as a string */
  moreLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key mouse_focus as a string */
  mouseFocus?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key new_window as a string */
  newWindow?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key no_directions_label as a string */
  noDirectionsLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key no_results_label as a string */
  noResultsLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key permalink_remove_front as a string */
  permalinkRemoveFront?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key permalink_slug as a string */
  permalinkSlug?: Maybe<Scalars['String']['output']>;
  /** Meta for the key permalinks as a string */
  permalinks?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key phone_label as a string */
  phoneLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key phone_url as a string */
  phoneUrl?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key preloader_label as a string */
  preloaderLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key radius_dropdown as a string */
  radiusDropdown?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key radius_label as a string */
  radiusLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key reset_map as a string */
  resetMap?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key results_dropdown as a string */
  resultsDropdown?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key results_label as a string */
  resultsLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key run_fitbounds as a string */
  runFitbounds?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key scrollwheel as a string */
  scrollwheel?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key search_btn_label as a string */
  searchBtnLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key search_label as a string */
  searchLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key search_radius as a string */
  searchRadius?: Maybe<Scalars['String']['output']>;
  /** Meta for the key search_width as a string */
  searchWidth?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key show_contact_details as a string */
  showContactDetails?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key show_credits as a string */
  showCredits?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key start_label as a string */
  startLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key start_latlng as a string */
  startLatlng?: Maybe<Scalars['String']['output']>;
  /** Meta for the key start_marker as a string */
  startMarker?: Maybe<Scalars['String']['output']>;
  /** Meta for the key start_name as a string */
  startName?: Maybe<Scalars['String']['output']>;
  /** Meta for the key store_marker as a string */
  storeMarker?: Maybe<Scalars['String']['output']>;
  /** Meta for the key store_url as a string */
  storeUrl?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key street_view_label as a string */
  streetViewLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key streetview as a string */
  streetview?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key template_id as a string */
  templateId?: Maybe<Scalars['String']['output']>;
  /** Meta for the key type_control as a string */
  typeControl?: Maybe<Scalars['Int']['output']>;
  /** Meta for the key url_label as a string */
  urlLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key zoom_here_label as a string */
  zoomHereLabel?: Maybe<Scalars['String']['output']>;
  /** Meta for the key zoom_level as a string */
  zoomLevel?: Maybe<Scalars['Int']['output']>;
};

/** Connection between the Location type and the locationCategory type */
export type LocationToLocationCategoryConnection = Connection & LocationCategoryConnection & {
  __typename?: 'LocationToLocationCategoryConnection';
  /** Edges for the LocationToLocationCategoryConnection connection */
  edges: Array<LocationToLocationCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<LocationCategory>;
  /** Information about pagination in a connection. */
  pageInfo: LocationToLocationCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type LocationToLocationCategoryConnectionEdge = Edge & LocationCategoryConnectionEdge & {
  __typename?: 'LocationToLocationCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The Yoast SEO Primary wpsl_store_category */
  isPrimary?: Maybe<Scalars['Boolean']['output']>;
  /** The item at the end of the edge */
  node: LocationCategory;
};

/** Page Info on the &quot;LocationToLocationCategoryConnection&quot; */
export type LocationToLocationCategoryConnectionPageInfo = LocationCategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'LocationToLocationCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the LocationToLocationCategoryConnection connection */
export type LocationToLocationCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the Location type and the location type */
export type LocationToPreviewConnectionEdge = Edge & LocationConnectionEdge & OneToOneConnection & {
  __typename?: 'LocationToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Location;
};

/** Connection between the Location type and the location type */
export type LocationToRevisionConnection = Connection & LocationConnection & {
  __typename?: 'LocationToRevisionConnection';
  /** Edges for the LocationToRevisionConnection connection */
  edges: Array<LocationToRevisionConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Location>;
  /** Information about pagination in a connection. */
  pageInfo: LocationToRevisionConnectionPageInfo;
};

/** An edge in a connection */
export type LocationToRevisionConnectionEdge = Edge & LocationConnectionEdge & {
  __typename?: 'LocationToRevisionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Location;
};

/** Page Info on the &quot;LocationToRevisionConnection&quot; */
export type LocationToRevisionConnectionPageInfo = LocationConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'LocationToRevisionConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the LocationToRevisionConnection connection */
export type LocationToRevisionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Location type and the TermNode type */
export type LocationToTermNodeConnection = Connection & TermNodeConnection & {
  __typename?: 'LocationToTermNodeConnection';
  /** Edges for the LocationToTermNodeConnection connection */
  edges: Array<LocationToTermNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<TermNode>;
  /** Information about pagination in a connection. */
  pageInfo: LocationToTermNodeConnectionPageInfo;
};

/** An edge in a connection */
export type LocationToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {
  __typename?: 'LocationToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: TermNode;
};

/** Page Info on the &quot;LocationToTermNodeConnection&quot; */
export type LocationToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {
  __typename?: 'LocationToTermNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the LocationToTermNodeConnection connection */
export type LocationToTermNodeConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** File details for a Media Item */
export type MediaDetails = {
  __typename?: 'MediaDetails';
  /** The filename of the mediaItem */
  file?: Maybe<Scalars['String']['output']>;
  /** The height of the mediaItem */
  height?: Maybe<Scalars['Int']['output']>;
  /** Meta information associated with the mediaItem */
  meta?: Maybe<MediaItemMeta>;
  /** The available sizes of the mediaItem */
  sizes?: Maybe<Array<Maybe<MediaSize>>>;
  /** The width of the mediaItem */
  width?: Maybe<Scalars['Int']['output']>;
};


/** File details for a Media Item */
export type MediaDetailsSizesArgs = {
  exclude?: InputMaybe<Array<InputMaybe<MediaItemSizeEnum>>>;
  include?: InputMaybe<Array<InputMaybe<MediaItemSizeEnum>>>;
};

/** The mediaItem type */
export type MediaItem = ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & Node & NodeWithAuthor & NodeWithComments & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable & {
  __typename?: 'MediaItem';
  /** Alternative text to display when resource is not displayed */
  altText?: Maybe<Scalars['String']['output']>;
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** The caption for the resource */
  caption?: Maybe<Scalars['String']['output']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']['output']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']['output']>;
  /** Connection between the MediaItem type and the Comment type */
  comments?: Maybe<MediaItemToCommentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** Description of the image (stored as post_content) */
  description?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The filesize in bytes of the resource */
  fileSize?: Maybe<Scalars['Int']['output']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the attachment object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** Details about the mediaItem */
  mediaDetails?: Maybe<MediaDetails>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  mediaItemId: Scalars['Int']['output'];
  /** Url of the mediaItem */
  mediaItemUrl?: Maybe<Scalars['String']['output']>;
  /** Type of resource */
  mediaType?: Maybe<Scalars['String']['output']>;
  /** The mime type of the mediaItem */
  mimeType?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The sizes attribute value for an image. */
  sizes?: Maybe<Scalars['String']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** Url of the mediaItem */
  sourceUrl?: Maybe<Scalars['String']['output']>;
  /** The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths. */
  srcSet?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to a node of content */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The mediaItem type */
export type MediaItemAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** The mediaItem type */
export type MediaItemCaptionArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** The mediaItem type */
export type MediaItemChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** The mediaItem type */
export type MediaItemCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<MediaItemToCommentConnectionWhereArgs>;
};


/** The mediaItem type */
export type MediaItemDescriptionArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** The mediaItem type */
export type MediaItemEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The mediaItem type */
export type MediaItemEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The mediaItem type */
export type MediaItemFileSizeArgs = {
  size?: InputMaybe<MediaItemSizeEnum>;
};


/** The mediaItem type */
export type MediaItemSizesArgs = {
  size?: InputMaybe<MediaItemSizeEnum>;
};


/** The mediaItem type */
export type MediaItemSourceUrlArgs = {
  size?: InputMaybe<MediaItemSizeEnum>;
};


/** The mediaItem type */
export type MediaItemSrcSetArgs = {
  size?: InputMaybe<MediaItemSizeEnum>;
};


/** The mediaItem type */
export type MediaItemTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Connection to mediaItem Nodes */
export type MediaItemConnection = {
  /** A list of edges (relational context) between RootQuery and connected mediaItem Nodes */
  edges: Array<MediaItemConnectionEdge>;
  /** A list of connected mediaItem Nodes */
  nodes: Array<MediaItem>;
  /** Information about pagination in a connection. */
  pageInfo: MediaItemConnectionPageInfo;
};

/** Edge between a Node and a connected mediaItem */
export type MediaItemConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected mediaItem Node */
  node: MediaItem;
};

/** Page Info on the connected MediaItemConnectionEdge */
export type MediaItemConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum MediaItemIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a media item by its source url */
  SourceUrl = 'SOURCE_URL',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Meta connected to a MediaItem */
export type MediaItemMeta = {
  __typename?: 'MediaItemMeta';
  /** Aperture measurement of the media item. */
  aperture?: Maybe<Scalars['Float']['output']>;
  /** Information about the camera used to create the media item. */
  camera?: Maybe<Scalars['String']['output']>;
  /** The text string description associated with the media item. */
  caption?: Maybe<Scalars['String']['output']>;
  /** Copyright information associated with the media item. */
  copyright?: Maybe<Scalars['String']['output']>;
  /** The date/time when the media was created. */
  createdTimestamp?: Maybe<Scalars['Int']['output']>;
  /** The original creator of the media item. */
  credit?: Maybe<Scalars['String']['output']>;
  /** The focal length value of the media item. */
  focalLength?: Maybe<Scalars['Float']['output']>;
  /** The ISO (International Organization for Standardization) value of the media item. */
  iso?: Maybe<Scalars['Int']['output']>;
  /** List of keywords used to describe or identfy the media item. */
  keywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The vertical or horizontal aspect of the media item. */
  orientation?: Maybe<Scalars['String']['output']>;
  /** The shutter speed information of the media item. */
  shutterSpeed?: Maybe<Scalars['Float']['output']>;
  /** A useful title for the media item. */
  title?: Maybe<Scalars['String']['output']>;
};

/** The size of the media item object. */
export enum MediaItemSizeEnum {
  /** MediaItem with the gb-block-post-grid-landscape size */
  GbBlockPostGridLandscape = 'GB_BLOCK_POST_GRID_LANDSCAPE',
  /** MediaItem with the gb-block-post-grid-square size */
  GbBlockPostGridSquare = 'GB_BLOCK_POST_GRID_SQUARE',
  /** MediaItem with the genesis-block-theme-featured-image size */
  GenesisBlockThemeFeaturedImage = 'GENESIS_BLOCK_THEME_FEATURED_IMAGE',
  /** MediaItem with the genesis-block-theme-featured-image-wide size */
  GenesisBlockThemeFeaturedImageWide = 'GENESIS_BLOCK_THEME_FEATURED_IMAGE_WIDE',
  /** MediaItem with the genesis-block-theme-logo size */
  GenesisBlockThemeLogo = 'GENESIS_BLOCK_THEME_LOGO',
  /** MediaItem with the large size */
  Large = 'LARGE',
  /** MediaItem with the medium size */
  Medium = 'MEDIUM',
  /** MediaItem with the medium_large size */
  MediumLarge = 'MEDIUM_LARGE',
  /** MediaItem with the mobile-hero size */
  MobileHero = 'MOBILE_HERO',
  /** MediaItem with the thumbnail size */
  Thumbnail = 'THUMBNAIL',
  /** MediaItem with the 1536x1536 size */
  '1536X1536' = '_1536X1536',
  /** MediaItem with the 2048x2048 size */
  '2048X2048' = '_2048X2048'
}

/** The status of the media item object. */
export enum MediaItemStatusEnum {
  /** Objects with the auto-draft status */
  AutoDraft = 'AUTO_DRAFT',
  /** Objects with the inherit status */
  Inherit = 'INHERIT',
  /** Objects with the private status */
  Private = 'PRIVATE',
  /** Objects with the trash status */
  Trash = 'TRASH'
}

/** Connection between the MediaItem type and the Comment type */
export type MediaItemToCommentConnection = CommentConnection & Connection & {
  __typename?: 'MediaItemToCommentConnection';
  /** Edges for the MediaItemToCommentConnection connection */
  edges: Array<MediaItemToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: MediaItemToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type MediaItemToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'MediaItemToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Page Info on the &quot;MediaItemToCommentConnection&quot; */
export type MediaItemToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'MediaItemToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the MediaItemToCommentConnection connection */
export type MediaItemToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']['input']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Details of an available size for a media item */
export type MediaSize = {
  __typename?: 'MediaSize';
  /** The filename of the referenced size */
  file?: Maybe<Scalars['String']['output']>;
  /** The filesize of the resource */
  fileSize?: Maybe<Scalars['Int']['output']>;
  /** The height of the referenced size */
  height?: Maybe<Scalars['String']['output']>;
  /** The mime type of the referenced size */
  mimeType?: Maybe<Scalars['String']['output']>;
  /** The referenced size name */
  name?: Maybe<Scalars['String']['output']>;
  /** The url of the referenced size */
  sourceUrl?: Maybe<Scalars['String']['output']>;
  /** The width of the referenced size */
  width?: Maybe<Scalars['String']['output']>;
};

/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */
export type Menu = DatabaseIdentifier & Node & {
  __typename?: 'Menu';
  /** The number of items in the menu */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The globally unique identifier of the nav menu object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** The locations a menu is assigned to */
  locations?: Maybe<Array<Maybe<MenuLocationEnum>>>;
  /**
   * WP ID of the nav menu.
   * @deprecated Deprecated in favor of the databaseId field
   */
  menuId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the Menu type and the MenuItem type */
  menuItems?: Maybe<MenuToMenuItemConnection>;
  /** Display name of the menu. Equivalent to WP_Term-&gt;name. */
  name?: Maybe<Scalars['String']['output']>;
  /** The url friendly name of the menu. Equivalent to WP_Term-&gt;slug */
  slug?: Maybe<Scalars['String']['output']>;
};


/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */
export type MenuMenuItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<MenuToMenuItemConnectionWhereArgs>;
};

/** Connection to Menu Nodes */
export type MenuConnection = {
  /** A list of edges (relational context) between RootQuery and connected Menu Nodes */
  edges: Array<MenuConnectionEdge>;
  /** A list of connected Menu Nodes */
  nodes: Array<Menu>;
  /** Information about pagination in a connection. */
  pageInfo: MenuConnectionPageInfo;
};

/** Edge between a Node and a connected Menu */
export type MenuConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Menu Node */
  node: Menu;
};

/** Page Info on the connected MenuConnectionEdge */
export type MenuConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */
export type MenuItem = DatabaseIdentifier & Node & {
  __typename?: 'MenuItem';
  /** Connection between the MenuItem type and the MenuItem type */
  childItems?: Maybe<MenuItemToMenuItemConnection>;
  /** Connection from MenuItem to it&#039;s connected node */
  connectedNode?: Maybe<MenuItemToMenuItemLinkableConnectionEdge>;
  /**
   * The object connected to this menu item.
   * @deprecated Deprecated in favor of the connectedNode field
   */
  connectedObject?: Maybe<MenuItemObjectUnion>;
  /** Class attribute for the menu item link */
  cssClasses?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Description of the menu item. */
  description?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the nav menu item object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Label or title of the menu item. */
  label?: Maybe<Scalars['String']['output']>;
  /** Link relationship (XFN) of the menu item. */
  linkRelationship?: Maybe<Scalars['String']['output']>;
  /** The locations the menu item&#039;s Menu is assigned to */
  locations?: Maybe<Array<Maybe<MenuLocationEnum>>>;
  /** The Menu a MenuItem is part of */
  menu?: Maybe<MenuItemToMenuConnectionEdge>;
  /**
   * WP ID of the menu item.
   * @deprecated Deprecated in favor of the databaseId field
   */
  menuItemId?: Maybe<Scalars['Int']['output']>;
  /** Menu item order */
  order?: Maybe<Scalars['Int']['output']>;
  /** The database id of the parent menu item or null if it is the root */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent nav menu item object. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** Path for the resource. Relative path for internal resources. Absolute path for external resources. */
  path?: Maybe<Scalars['String']['output']>;
  /** Target attribute for the menu item link. */
  target?: Maybe<Scalars['String']['output']>;
  /** Title attribute for the menu item link */
  title?: Maybe<Scalars['String']['output']>;
  /** The uri of the resource the menu item links to */
  uri?: Maybe<Scalars['String']['output']>;
  /** URL or destination of the menu item. */
  url?: Maybe<Scalars['String']['output']>;
};


/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */
export type MenuItemChildItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<MenuItemToMenuItemConnectionWhereArgs>;
};

/** Connection to MenuItem Nodes */
export type MenuItemConnection = {
  /** A list of edges (relational context) between RootQuery and connected MenuItem Nodes */
  edges: Array<MenuItemConnectionEdge>;
  /** A list of connected MenuItem Nodes */
  nodes: Array<MenuItem>;
  /** Information about pagination in a connection. */
  pageInfo: MenuItemConnectionPageInfo;
};

/** Edge between a Node and a connected MenuItem */
export type MenuItemConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected MenuItem Node */
  node: MenuItem;
};

/** Page Info on the connected MenuItemConnectionEdge */
export type MenuItemConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Nodes that can be linked to as Menu Items */
export type MenuItemLinkable = {
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The unique resource identifier path */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};

/** Edge between a Node and a connected MenuItemLinkable */
export type MenuItemLinkableConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected MenuItemLinkable Node */
  node: MenuItemLinkable;
};

/** The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field. */
export enum MenuItemNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID'
}

/** Deprecated in favor of MenuItemLinkeable Interface */
export type MenuItemObjectUnion = CxAlert | Category | Location | LocationCategory | Page | Post | ProductName | Tag;

/** Connection between the MenuItem type and the Menu type */
export type MenuItemToMenuConnectionEdge = Edge & MenuConnectionEdge & OneToOneConnection & {
  __typename?: 'MenuItemToMenuConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Menu;
};

/** Connection between the MenuItem type and the MenuItem type */
export type MenuItemToMenuItemConnection = Connection & MenuItemConnection & {
  __typename?: 'MenuItemToMenuItemConnection';
  /** Edges for the MenuItemToMenuItemConnection connection */
  edges: Array<MenuItemToMenuItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MenuItem>;
  /** Information about pagination in a connection. */
  pageInfo: MenuItemToMenuItemConnectionPageInfo;
};

/** An edge in a connection */
export type MenuItemToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {
  __typename?: 'MenuItemToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: MenuItem;
};

/** Page Info on the &quot;MenuItemToMenuItemConnection&quot; */
export type MenuItemToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'MenuItemToMenuItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the MenuItemToMenuItemConnection connection */
export type MenuItemToMenuItemConnectionWhereArgs = {
  /** The database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the MenuItem type and the MenuItemLinkable type */
export type MenuItemToMenuItemLinkableConnectionEdge = Edge & MenuItemLinkableConnectionEdge & OneToOneConnection & {
  __typename?: 'MenuItemToMenuItemLinkableConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: MenuItemLinkable;
};

/** Registered menu locations */
export enum MenuLocationEnum {
  /** Put the menu in the footer location */
  Footer = 'FOOTER',
  /** Put the menu in the primary location */
  Primary = 'PRIMARY'
}

/** The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field. */
export enum MenuNodeIdTypeEnum {
  /** Identify a menu node by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a menu node by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a menu node by the slug of menu location to which it is assigned */
  Location = 'LOCATION',
  /** Identify a menu node by its name */
  Name = 'NAME',
  /** Identify a menu node by its slug */
  Slug = 'SLUG'
}

/** Connection between the Menu type and the MenuItem type */
export type MenuToMenuItemConnection = Connection & MenuItemConnection & {
  __typename?: 'MenuToMenuItemConnection';
  /** Edges for the MenuToMenuItemConnection connection */
  edges: Array<MenuToMenuItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MenuItem>;
  /** Information about pagination in a connection. */
  pageInfo: MenuToMenuItemConnectionPageInfo;
};

/** An edge in a connection */
export type MenuToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {
  __typename?: 'MenuToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: MenuItem;
};

/** Page Info on the &quot;MenuToMenuItemConnection&quot; */
export type MenuToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'MenuToMenuItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the MenuToMenuItemConnection connection */
export type MenuToMenuItemConnectionWhereArgs = {
  /** The database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
};

/** The MimeType of the object */
export enum MimeTypeEnum {
  /** application/java mime type. */
  ApplicationJava = 'APPLICATION_JAVA',
  /** application/msword mime type. */
  ApplicationMsword = 'APPLICATION_MSWORD',
  /** application/octet-stream mime type. */
  ApplicationOctetStream = 'APPLICATION_OCTET_STREAM',
  /** application/onenote mime type. */
  ApplicationOnenote = 'APPLICATION_ONENOTE',
  /** application/oxps mime type. */
  ApplicationOxps = 'APPLICATION_OXPS',
  /** application/pdf mime type. */
  ApplicationPdf = 'APPLICATION_PDF',
  /** application/rar mime type. */
  ApplicationRar = 'APPLICATION_RAR',
  /** application/rtf mime type. */
  ApplicationRtf = 'APPLICATION_RTF',
  /** application/ttaf+xml mime type. */
  ApplicationTtafXml = 'APPLICATION_TTAF_XML',
  /** application/vnd.apple.keynote mime type. */
  ApplicationVndAppleKeynote = 'APPLICATION_VND_APPLE_KEYNOTE',
  /** application/vnd.apple.numbers mime type. */
  ApplicationVndAppleNumbers = 'APPLICATION_VND_APPLE_NUMBERS',
  /** application/vnd.apple.pages mime type. */
  ApplicationVndApplePages = 'APPLICATION_VND_APPLE_PAGES',
  /** application/vnd.ms-access mime type. */
  ApplicationVndMsAccess = 'APPLICATION_VND_MS_ACCESS',
  /** application/vnd.ms-excel mime type. */
  ApplicationVndMsExcel = 'APPLICATION_VND_MS_EXCEL',
  /** application/vnd.ms-excel.addin.macroEnabled.12 mime type. */
  ApplicationVndMsExcelAddinMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12',
  /** application/vnd.ms-excel.sheet.binary.macroEnabled.12 mime type. */
  ApplicationVndMsExcelSheetBinaryMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12',
  /** application/vnd.ms-excel.sheet.macroEnabled.12 mime type. */
  ApplicationVndMsExcelSheetMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12',
  /** application/vnd.ms-excel.template.macroEnabled.12 mime type. */
  ApplicationVndMsExcelTemplateMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12',
  /** application/vnd.ms-powerpoint mime type. */
  ApplicationVndMsPowerpoint = 'APPLICATION_VND_MS_POWERPOINT',
  /** application/vnd.ms-powerpoint.addin.macroEnabled.12 mime type. */
  ApplicationVndMsPowerpointAddinMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12',
  /** application/vnd.ms-powerpoint.presentation.macroEnabled.12 mime type. */
  ApplicationVndMsPowerpointPresentationMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12',
  /** application/vnd.ms-powerpoint.slideshow.macroEnabled.12 mime type. */
  ApplicationVndMsPowerpointSlideshowMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12',
  /** application/vnd.ms-powerpoint.slide.macroEnabled.12 mime type. */
  ApplicationVndMsPowerpointSlideMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12',
  /** application/vnd.ms-powerpoint.template.macroEnabled.12 mime type. */
  ApplicationVndMsPowerpointTemplateMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12',
  /** application/vnd.ms-project mime type. */
  ApplicationVndMsProject = 'APPLICATION_VND_MS_PROJECT',
  /** application/vnd.ms-word.document.macroEnabled.12 mime type. */
  ApplicationVndMsWordDocumentMacroenabled_12 = 'APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12',
  /** application/vnd.ms-word.template.macroEnabled.12 mime type. */
  ApplicationVndMsWordTemplateMacroenabled_12 = 'APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12',
  /** application/vnd.ms-write mime type. */
  ApplicationVndMsWrite = 'APPLICATION_VND_MS_WRITE',
  /** application/vnd.ms-xpsdocument mime type. */
  ApplicationVndMsXpsdocument = 'APPLICATION_VND_MS_XPSDOCUMENT',
  /** application/vnd.oasis.opendocument.chart mime type. */
  ApplicationVndOasisOpendocumentChart = 'APPLICATION_VND_OASIS_OPENDOCUMENT_CHART',
  /** application/vnd.oasis.opendocument.database mime type. */
  ApplicationVndOasisOpendocumentDatabase = 'APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE',
  /** application/vnd.oasis.opendocument.formula mime type. */
  ApplicationVndOasisOpendocumentFormula = 'APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA',
  /** application/vnd.oasis.opendocument.graphics mime type. */
  ApplicationVndOasisOpendocumentGraphics = 'APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS',
  /** application/vnd.oasis.opendocument.presentation mime type. */
  ApplicationVndOasisOpendocumentPresentation = 'APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION',
  /** application/vnd.oasis.opendocument.spreadsheet mime type. */
  ApplicationVndOasisOpendocumentSpreadsheet = 'APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET',
  /** application/vnd.oasis.opendocument.text mime type. */
  ApplicationVndOasisOpendocumentText = 'APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT',
  /** application/vnd.openxmlformats-officedocument.presentationml.presentation mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION',
  /** application/vnd.openxmlformats-officedocument.presentationml.slide mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlide = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE',
  /** application/vnd.openxmlformats-officedocument.presentationml.slideshow mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlideshow = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW',
  /** application/vnd.openxmlformats-officedocument.presentationml.template mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE',
  /** application/vnd.openxmlformats-officedocument.spreadsheetml.sheet mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET',
  /** application/vnd.openxmlformats-officedocument.spreadsheetml.template mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE',
  /** application/vnd.openxmlformats-officedocument.wordprocessingml.document mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT',
  /** application/vnd.openxmlformats-officedocument.wordprocessingml.template mime type. */
  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE',
  /** application/wordperfect mime type. */
  ApplicationWordperfect = 'APPLICATION_WORDPERFECT',
  /** application/x-7z-compressed mime type. */
  ApplicationX_7ZCompressed = 'APPLICATION_X_7Z_COMPRESSED',
  /** application/x-gzip mime type. */
  ApplicationXGzip = 'APPLICATION_X_GZIP',
  /** application/x-tar mime type. */
  ApplicationXTar = 'APPLICATION_X_TAR',
  /** application/zip mime type. */
  ApplicationZip = 'APPLICATION_ZIP',
  /** audio/aac mime type. */
  AudioAac = 'AUDIO_AAC',
  /** audio/flac mime type. */
  AudioFlac = 'AUDIO_FLAC',
  /** audio/midi mime type. */
  AudioMidi = 'AUDIO_MIDI',
  /** audio/mpeg mime type. */
  AudioMpeg = 'AUDIO_MPEG',
  /** audio/ogg mime type. */
  AudioOgg = 'AUDIO_OGG',
  /** audio/wav mime type. */
  AudioWav = 'AUDIO_WAV',
  /** audio/x-matroska mime type. */
  AudioXMatroska = 'AUDIO_X_MATROSKA',
  /** audio/x-ms-wax mime type. */
  AudioXMsWax = 'AUDIO_X_MS_WAX',
  /** audio/x-ms-wma mime type. */
  AudioXMsWma = 'AUDIO_X_MS_WMA',
  /** audio/x-realaudio mime type. */
  AudioXRealaudio = 'AUDIO_X_REALAUDIO',
  /** image/bmp mime type. */
  ImageBmp = 'IMAGE_BMP',
  /** image/gif mime type. */
  ImageGif = 'IMAGE_GIF',
  /** image/heic mime type. */
  ImageHeic = 'IMAGE_HEIC',
  /** image/jpeg mime type. */
  ImageJpeg = 'IMAGE_JPEG',
  /** image/png mime type. */
  ImagePng = 'IMAGE_PNG',
  /** image/svg+xml mime type. */
  ImageSvgXml = 'IMAGE_SVG_XML',
  /** image/tiff mime type. */
  ImageTiff = 'IMAGE_TIFF',
  /** image/webp mime type. */
  ImageWebp = 'IMAGE_WEBP',
  /** image/x-icon mime type. */
  ImageXIcon = 'IMAGE_X_ICON',
  /** text/calendar mime type. */
  TextCalendar = 'TEXT_CALENDAR',
  /** text/css mime type. */
  TextCss = 'TEXT_CSS',
  /** text/csv mime type. */
  TextCsv = 'TEXT_CSV',
  /** text/plain mime type. */
  TextPlain = 'TEXT_PLAIN',
  /** text/richtext mime type. */
  TextRichtext = 'TEXT_RICHTEXT',
  /** text/tab-separated-values mime type. */
  TextTabSeparatedValues = 'TEXT_TAB_SEPARATED_VALUES',
  /** text/vtt mime type. */
  TextVtt = 'TEXT_VTT',
  /** video/3gpp mime type. */
  Video_3Gpp = 'VIDEO_3GPP',
  /** video/3gpp2 mime type. */
  Video_3Gpp2 = 'VIDEO_3GPP2',
  /** video/avi mime type. */
  VideoAvi = 'VIDEO_AVI',
  /** video/divx mime type. */
  VideoDivx = 'VIDEO_DIVX',
  /** video/mp4 mime type. */
  VideoMp4 = 'VIDEO_MP4',
  /** video/mpeg mime type. */
  VideoMpeg = 'VIDEO_MPEG',
  /** video/ogg mime type. */
  VideoOgg = 'VIDEO_OGG',
  /** video/quicktime mime type. */
  VideoQuicktime = 'VIDEO_QUICKTIME',
  /** video/webm mime type. */
  VideoWebm = 'VIDEO_WEBM',
  /** video/x-flv mime type. */
  VideoXFlv = 'VIDEO_X_FLV',
  /** video/x-matroska mime type. */
  VideoXMatroska = 'VIDEO_X_MATROSKA',
  /** video/x-ms-asf mime type. */
  VideoXMsAsf = 'VIDEO_X_MS_ASF',
  /** video/x-ms-wm mime type. */
  VideoXMsWm = 'VIDEO_X_MS_WM',
  /** video/x-ms-wmv mime type. */
  VideoXMsWmv = 'VIDEO_X_MS_WMV',
  /** video/x-ms-wmx mime type. */
  VideoXMsWmx = 'VIDEO_X_MS_WMX'
}

/** A block used for editing the site */
export type NinjaFormsForm = EditorBlock & {
  __typename?: 'NinjaFormsForm';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<NinjaFormsFormAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type NinjaFormsFormAttributes = {
  __typename?: 'NinjaFormsFormAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;NinjaFormsForm&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;NinjaFormsForm&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;formID&quot; field on the &quot;NinjaFormsForm&quot; block */
  formID?: Maybe<Scalars['Int']['output']>;
  /** The &quot;formTitle&quot; field on the &quot;NinjaFormsForm&quot; block */
  formTitle?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;NinjaFormsForm&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type NinjaFormsSubmissionsTable = EditorBlock & {
  __typename?: 'NinjaFormsSubmissionsTable';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<NinjaFormsSubmissionsTableAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type NinjaFormsSubmissionsTableAttributes = {
  __typename?: 'NinjaFormsSubmissionsTableAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;NinjaFormsSubmissionsTable&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;NinjaFormsSubmissionsTable&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;NinjaFormsSubmissionsTable&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** An object with an ID */
export type Node = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};

/** A node that can have an author assigned to it */
export type NodeWithAuthor = {
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};

/** Connection between the NodeWithAuthor type and the User type */
export type NodeWithAuthorToUserConnectionEdge = Edge & OneToOneConnection & UserConnectionEdge & {
  __typename?: 'NodeWithAuthorToUserConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: User;
};

/** A node that can have comments associated with it */
export type NodeWithComments = {
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']['output']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};

/** A node that supports the content editor */
export type NodeWithContentEditor = {
  /** The content of the post. */
  content?: Maybe<Scalars['String']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};


/** A node that supports the content editor */
export type NodeWithContentEditorContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Node that has content blocks associated with it */
export type NodeWithEditorBlocks = {
  /** List of editor blocks */
  editorBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
};


/** Node that has content blocks associated with it */
export type NodeWithEditorBlocksEditorBlocksArgs = {
  flat?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A node that can have an excerpt */
export type NodeWithExcerpt = {
  /** The excerpt of the post. */
  excerpt?: Maybe<Scalars['String']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};


/** A node that can have an excerpt */
export type NodeWithExcerptExcerptArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A node that can have a featured image set */
export type NodeWithFeaturedImage = {
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']['output']>;
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
};

/** Connection between the NodeWithFeaturedImage type and the MediaItem type */
export type NodeWithFeaturedImageToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & OneToOneConnection & {
  __typename?: 'NodeWithFeaturedImageToMediaItemConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: MediaItem;
};

/** A node that can have page attributes */
export type NodeWithPageAttributes = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']['output']>;
};

/** A node that can have revisions */
export type NodeWithRevisions = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']['output']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
};

/** Connection between the NodeWithRevisions type and the ContentNode type */
export type NodeWithRevisionsToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & OneToOneConnection & {
  __typename?: 'NodeWithRevisionsToContentNodeConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: ContentNode;
};

/** A node that can have a template associated with it */
export type NodeWithTemplate = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
};

/** A node that NodeWith a title */
export type NodeWithTitle = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
};


/** A node that NodeWith a title */
export type NodeWithTitleTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** A node that can have trackbacks and pingbacks */
export type NodeWithTrackbacks = {
  /** The globally unique ID for the object */
  id: Scalars['ID']['output'];
  /** Whether the pings are open or closed for this particular post. */
  pingStatus?: Maybe<Scalars['String']['output']>;
  /** URLs that have been pinged. */
  pinged?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** URLs queued to be pinged. */
  toPing?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

/** Offset pagination input type */
export type OffsetPagination = {
  /** Number of post to show per page. Passed to posts_per_page of WP_Query. */
  offset?: InputMaybe<Scalars['Int']['input']>;
  /** Number of post to show per page. Passed to posts_per_page of WP_Query. */
  size?: InputMaybe<Scalars['Int']['input']>;
};

/** Get information about the offset pagination state */
export type OffsetPaginationPageInfo = {
  __typename?: 'OffsetPaginationPageInfo';
  /** True if there is one or more nodes available in this connection. Eg. you can increase the offset at least by one. */
  hasMore?: Maybe<Scalars['Boolean']['output']>;
  /** True when offset can be decresed eg. offset is 0&lt; */
  hasPrevious?: Maybe<Scalars['Boolean']['output']>;
  /** Total amount of nodes in this connection */
  total?: Maybe<Scalars['Int']['output']>;
};

/** A singular connection from one Node to another, with support for relational data on the &quot;edge&quot; of the connection. */
export type OneToOneConnection = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected node */
  node: Node;
};

/** The cardinality of the connection order */
export enum OrderEnum {
  /** Sort the query result set in an ascending order */
  Asc = 'ASC',
  /** Sort the query result set in a descending order */
  Desc = 'DESC'
}

/** The page type */
export type Page = ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithEditorBlocks & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {
  __typename?: 'Page';
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']['output']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']['output']>;
  /** Connection between the Page type and the Comment type */
  comments?: Maybe<PageToCommentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** List of editor blocks */
  editorBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The excerpt of the post. */
  excerpt?: Maybe<Scalars['String']['output']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']['output']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the page object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether this page is set to the static front page. */
  isFrontPage: Scalars['Boolean']['output'];
  /** Whether this page is set to the blog posts page. */
  isPostsPage: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether this page is set to the privacy page. */
  isPrivacyPage: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  pageId: Scalars['Int']['output'];
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the Page type and the page type */
  preview?: Maybe<PageToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
  /** Connection between the Page type and the page type */
  revisions?: Maybe<PageToRevisionConnection>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to a node of content */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The page type */
export type PageAncestorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** The page type */
export type PageChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** The page type */
export type PageCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageToCommentConnectionWhereArgs>;
};


/** The page type */
export type PageContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** The page type */
export type PageEditorBlocksArgs = {
  flat?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The page type */
export type PageEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The page type */
export type PageEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The page type */
export type PageExcerptArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** The page type */
export type PageRevisionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageToRevisionConnectionWhereArgs>;
};


/** The page type */
export type PageTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Connection to page Nodes */
export type PageConnection = {
  /** A list of edges (relational context) between RootQuery and connected page Nodes */
  edges: Array<PageConnectionEdge>;
  /** A list of connected page Nodes */
  nodes: Array<Page>;
  /** Information about pagination in a connection. */
  pageInfo: PageConnectionPageInfo;
};

/** Edge between a Node and a connected page */
export type PageConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected page Node */
  node: Page;
};

/** Page Info on the connected PageConnectionEdge */
export type PageConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum PageIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Information about pagination in a connection. */
export type PageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Page type and the Comment type */
export type PageToCommentConnection = CommentConnection & Connection & {
  __typename?: 'PageToCommentConnection';
  /** Edges for the PageToCommentConnection connection */
  edges: Array<PageToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: PageToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type PageToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'PageToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Page Info on the &quot;PageToCommentConnection&quot; */
export type PageToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'PageToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PageToCommentConnection connection */
export type PageToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']['input']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the Page type and the page type */
export type PageToPreviewConnectionEdge = Edge & OneToOneConnection & PageConnectionEdge & {
  __typename?: 'PageToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Page;
};

/** Connection between the Page type and the page type */
export type PageToRevisionConnection = Connection & PageConnection & {
  __typename?: 'PageToRevisionConnection';
  /** Edges for the PageToRevisionConnection connection */
  edges: Array<PageToRevisionConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Page>;
  /** Information about pagination in a connection. */
  pageInfo: PageToRevisionConnectionPageInfo;
};

/** An edge in a connection */
export type PageToRevisionConnectionEdge = Edge & PageConnectionEdge & {
  __typename?: 'PageToRevisionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Page;
};

/** Page Info on the &quot;PageToRevisionConnection&quot; */
export type PageToRevisionConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'PageToRevisionConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PageToRevisionConnection connection */
export type PageToRevisionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** An plugin object */
export type Plugin = Node & {
  __typename?: 'Plugin';
  /** Name of the plugin author(s), may also be a company name. */
  author?: Maybe<Scalars['String']['output']>;
  /** URI for the related author(s)/company website. */
  authorUri?: Maybe<Scalars['String']['output']>;
  /** Description of the plugin. */
  description?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the plugin object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Display name of the plugin. */
  name?: Maybe<Scalars['String']['output']>;
  /** Plugin path. */
  path?: Maybe<Scalars['String']['output']>;
  /** URI for the plugin website. This is useful for directing users for support requests etc. */
  pluginUri?: Maybe<Scalars['String']['output']>;
  /** Current version of the plugin. */
  version?: Maybe<Scalars['String']['output']>;
};

/** Connection to Plugin Nodes */
export type PluginConnection = {
  /** A list of edges (relational context) between RootQuery and connected Plugin Nodes */
  edges: Array<PluginConnectionEdge>;
  /** A list of connected Plugin Nodes */
  nodes: Array<Plugin>;
  /** Information about pagination in a connection. */
  pageInfo: PluginConnectionPageInfo;
};

/** Edge between a Node and a connected Plugin */
export type PluginConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Plugin Node */
  node: Plugin;
};

/** Page Info on the connected PluginConnectionEdge */
export type PluginConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The status of the WordPress plugin. */
export enum PluginStatusEnum {
  /** The plugin is currently active. */
  Active = 'ACTIVE',
  /** The plugin is a drop-in plugin. */
  DropIn = 'DROP_IN',
  /** The plugin is currently inactive. */
  Inactive = 'INACTIVE',
  /** The plugin is a must-use plugin. */
  MustUse = 'MUST_USE',
  /** The plugin is technically active but was paused while loading. */
  Paused = 'PAUSED',
  /** The plugin was active recently. */
  RecentlyActive = 'RECENTLY_ACTIVE',
  /** The plugin has an upgrade available. */
  Upgrade = 'UPGRADE'
}

/** The post type */
export type Post = ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithEditorBlocks & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & NodeWithTrackbacks & Previewable & UniformResourceIdentifiable & {
  __typename?: 'Post';
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the Post type and the category type */
  categories?: Maybe<PostToCategoryConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']['output']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']['output']>;
  /** Connection between the Post type and the Comment type */
  comments?: Maybe<PostToCommentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** List of editor blocks */
  editorBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The excerpt of the post. */
  excerpt?: Maybe<Scalars['String']['output']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']['output']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the post object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']['output']>;
  /** Whether this page is sticky */
  isSticky: Scalars['Boolean']['output'];
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  /** Whether the pings are open or closed for this particular post. */
  pingStatus?: Maybe<Scalars['String']['output']>;
  /** URLs that have been pinged. */
  pinged?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Connection between the Post type and the postFormat type */
  postFormats?: Maybe<PostToPostFormatConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  postId: Scalars['Int']['output'];
  /** Connection between the Post type and the post type */
  preview?: Maybe<PostToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
  /** Connection between the Post type and the post type */
  revisions?: Maybe<PostToRevisionConnection>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** Connection between the Post type and the tag type */
  tags?: Maybe<PostToTagConnection>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Connection between the Post type and the TermNode type */
  terms?: Maybe<PostToTermNodeConnection>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** URLs queued to be pinged. */
  toPing?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The post type */
export type PostCategoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToCategoryConnectionWhereArgs>;
};


/** The post type */
export type PostCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToCommentConnectionWhereArgs>;
};


/** The post type */
export type PostContentArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** The post type */
export type PostEditorBlocksArgs = {
  flat?: InputMaybe<Scalars['Boolean']['input']>;
};


/** The post type */
export type PostEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The post type */
export type PostEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The post type */
export type PostExcerptArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};


/** The post type */
export type PostPostFormatsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToPostFormatConnectionWhereArgs>;
};


/** The post type */
export type PostRevisionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToRevisionConnectionWhereArgs>;
};


/** The post type */
export type PostTagsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToTagConnectionWhereArgs>;
};


/** The post type */
export type PostTermsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostToTermNodeConnectionWhereArgs>;
};


/** The post type */
export type PostTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Set relationships between the post to categories */
export type PostCategoriesInput = {
  /** If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']['input']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<PostCategoriesNodeInput>>>;
};

/** List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type PostCategoriesNodeInput = {
  /** The description of the category. This field is used to set a description of the category if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** Connection to post Nodes */
export type PostConnection = {
  /** A list of edges (relational context) between RootQuery and connected post Nodes */
  edges: Array<PostConnectionEdge>;
  /** A list of connected post Nodes */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: PostConnectionPageInfo;
};

/** Edge between a Node and a connected post */
export type PostConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected post Node */
  node: Post;
};

/** Page Info on the connected PostConnectionEdge */
export type PostConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The postFormat type */
export type PostFormat = DatabaseIdentifier & Node & TermNode & UniformResourceIdentifiable & {
  __typename?: 'PostFormat';
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the PostFormat type and the ContentNode type */
  contentNodes?: Maybe<PostFormatToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  postFormatId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the PostFormat type and the post type */
  posts?: Maybe<PostFormatToPostConnection>;
  /** The Yoast SEO data of the Formats taxonomy. */
  seo?: Maybe<TaxonomySeo>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /** Connection between the PostFormat type and the Taxonomy type */
  taxonomy?: Maybe<PostFormatToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The postFormat type */
export type PostFormatContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostFormatToContentNodeConnectionWhereArgs>;
};


/** The postFormat type */
export type PostFormatEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The postFormat type */
export type PostFormatEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The postFormat type */
export type PostFormatPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PostFormatToPostConnectionWhereArgs>;
};

/** Connection to postFormat Nodes */
export type PostFormatConnection = {
  /** A list of edges (relational context) between RootQuery and connected postFormat Nodes */
  edges: Array<PostFormatConnectionEdge>;
  /** A list of connected postFormat Nodes */
  nodes: Array<PostFormat>;
  /** Information about pagination in a connection. */
  pageInfo: PostFormatConnectionPageInfo;
};

/** Edge between a Node and a connected postFormat */
export type PostFormatConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected postFormat Node */
  node: PostFormat;
};

/** Page Info on the connected PostFormatConnectionEdge */
export type PostFormatConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum PostFormatIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the PostFormat type and the ContentNode type */
export type PostFormatToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'PostFormatToContentNodeConnection';
  /** Edges for the PostFormatToContentNodeConnection connection */
  edges: Array<PostFormatToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: PostFormatToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type PostFormatToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'PostFormatToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Page Info on the &quot;PostFormatToContentNodeConnection&quot; */
export type PostFormatToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'PostFormatToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostFormatToContentNodeConnection connection */
export type PostFormatToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfPostFormatEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the PostFormat type and the post type */
export type PostFormatToPostConnection = Connection & PostConnection & {
  __typename?: 'PostFormatToPostConnection';
  /** Edges for the PostFormatToPostConnection connection */
  edges: Array<PostFormatToPostConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: PostFormatToPostConnectionPageInfo;
};

/** An edge in a connection */
export type PostFormatToPostConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'PostFormatToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Page Info on the &quot;PostFormatToPostConnection&quot; */
export type PostFormatToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'PostFormatToPostConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostFormatToPostConnection connection */
export type PostFormatToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the PostFormat type and the Taxonomy type */
export type PostFormatToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {
  __typename?: 'PostFormatToTaxonomyConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Taxonomy;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum PostIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** The format of post field data. */
export enum PostObjectFieldFormatEnum {
  /** Provide the field value directly from database. Null on unauthenticated requests. */
  Raw = 'RAW',
  /** Provide the field value as rendered by WordPress. Default. */
  Rendered = 'RENDERED'
}

/** The column to use when filtering by date */
export enum PostObjectsConnectionDateColumnEnum {
  /** The date the comment was created in local time. */
  Date = 'DATE',
  /** The most recent modification date of the comment. */
  Modified = 'MODIFIED'
}

/** Field to order the connection by */
export enum PostObjectsConnectionOrderbyEnum {
  /** Order by author */
  Author = 'AUTHOR',
  /** Order by the number of comments it has acquired */
  CommentCount = 'COMMENT_COUNT',
  /** Order by publish date */
  Date = 'DATE',
  /** Preserve the ID order given in the IN array */
  In = 'IN',
  /** Order by the menu order value */
  MenuOrder = 'MENU_ORDER',
  /** Order by last modified date */
  Modified = 'MODIFIED',
  /** Preserve slug order given in the NAME_IN array */
  NameIn = 'NAME_IN',
  /** Order by parent ID */
  Parent = 'PARENT',
  /** Order by slug */
  Slug = 'SLUG',
  /** Order by title */
  Title = 'TITLE'
}

/** Options for ordering the connection */
export type PostObjectsConnectionOrderbyInput = {
  /** The field to order the connection by */
  field: PostObjectsConnectionOrderbyEnum;
  /** Possible directions in which to order a list of items */
  order: OrderEnum;
};

/** Set relationships between the post to postFormats */
export type PostPostFormatsInput = {
  /** If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']['input']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<PostPostFormatsNodeInput>>>;
};

/** List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type PostPostFormatsNodeInput = {
  /** The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The status of the object. */
export enum PostStatusEnum {
  /** Objects with the acf-disabled status */
  AcfDisabled = 'ACF_DISABLED',
  /** Objects with the auto-draft status */
  AutoDraft = 'AUTO_DRAFT',
  /** Objects with the dp-rewrite-republish status */
  DpRewriteRepublish = 'DP_REWRITE_REPUBLISH',
  /** Objects with the draft status */
  Draft = 'DRAFT',
  /** Objects with the draft-revision status */
  DraftRevision = 'DRAFT_REVISION',
  /** Objects with the future status */
  Future = 'FUTURE',
  /** Objects with the future-revision status */
  FutureRevision = 'FUTURE_REVISION',
  /** Objects with the inherit status */
  Inherit = 'INHERIT',
  /** Objects with the pending status */
  Pending = 'PENDING',
  /** Objects with the pending-revision status */
  PendingRevision = 'PENDING_REVISION',
  /** Objects with the private status */
  Private = 'PRIVATE',
  /** Objects with the publish status */
  Publish = 'PUBLISH',
  /** Objects with the request-completed status */
  RequestCompleted = 'REQUEST_COMPLETED',
  /** Objects with the request-confirmed status */
  RequestConfirmed = 'REQUEST_CONFIRMED',
  /** Objects with the request-failed status */
  RequestFailed = 'REQUEST_FAILED',
  /** Objects with the request-pending status */
  RequestPending = 'REQUEST_PENDING',
  /** Objects with the trash status */
  Trash = 'TRASH',
  /** Objects with the wp_stream_disabled status */
  WpStreamDisabled = 'WP_STREAM_DISABLED',
  /** Objects with the wp_stream_enabled status */
  WpStreamEnabled = 'WP_STREAM_ENABLED'
}

/** Set relationships between the post to tags */
export type PostTagsInput = {
  /** If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']['input']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<PostTagsNodeInput>>>;
};

/** List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type PostTagsNodeInput = {
  /** The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Post type and the category type */
export type PostToCategoryConnection = CategoryConnection & Connection & {
  __typename?: 'PostToCategoryConnection';
  /** Edges for the PostToCategoryConnection connection */
  edges: Array<PostToCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Category>;
  /** Information about pagination in a connection. */
  pageInfo: PostToCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type PostToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {
  __typename?: 'PostToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The Yoast SEO Primary category */
  isPrimary?: Maybe<Scalars['Boolean']['output']>;
  /** The item at the end of the edge */
  node: Category;
};

/** Page Info on the &quot;PostToCategoryConnection&quot; */
export type PostToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'PostToCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToCategoryConnection connection */
export type PostToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the Post type and the Comment type */
export type PostToCommentConnection = CommentConnection & Connection & {
  __typename?: 'PostToCommentConnection';
  /** Edges for the PostToCommentConnection connection */
  edges: Array<PostToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: PostToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type PostToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'PostToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Page Info on the &quot;PostToCommentConnection&quot; */
export type PostToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'PostToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToCommentConnection connection */
export type PostToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']['input']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the Post type and the postFormat type */
export type PostToPostFormatConnection = Connection & PostFormatConnection & {
  __typename?: 'PostToPostFormatConnection';
  /** Edges for the PostToPostFormatConnection connection */
  edges: Array<PostToPostFormatConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<PostFormat>;
  /** Information about pagination in a connection. */
  pageInfo: PostToPostFormatConnectionPageInfo;
};

/** An edge in a connection */
export type PostToPostFormatConnectionEdge = Edge & PostFormatConnectionEdge & {
  __typename?: 'PostToPostFormatConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The Yoast SEO Primary post_format */
  isPrimary?: Maybe<Scalars['Boolean']['output']>;
  /** The item at the end of the edge */
  node: PostFormat;
};

/** Page Info on the &quot;PostToPostFormatConnection&quot; */
export type PostToPostFormatConnectionPageInfo = PageInfo & PostFormatConnectionPageInfo & WpPageInfo & {
  __typename?: 'PostToPostFormatConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToPostFormatConnection connection */
export type PostToPostFormatConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the Post type and the post type */
export type PostToPreviewConnectionEdge = Edge & OneToOneConnection & PostConnectionEdge & {
  __typename?: 'PostToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Post;
};

/** Connection between the Post type and the post type */
export type PostToRevisionConnection = Connection & PostConnection & {
  __typename?: 'PostToRevisionConnection';
  /** Edges for the PostToRevisionConnection connection */
  edges: Array<PostToRevisionConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: PostToRevisionConnectionPageInfo;
};

/** An edge in a connection */
export type PostToRevisionConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'PostToRevisionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Page Info on the &quot;PostToRevisionConnection&quot; */
export type PostToRevisionConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'PostToRevisionConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToRevisionConnection connection */
export type PostToRevisionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Post type and the tag type */
export type PostToTagConnection = Connection & TagConnection & {
  __typename?: 'PostToTagConnection';
  /** Edges for the PostToTagConnection connection */
  edges: Array<PostToTagConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Tag>;
  /** Information about pagination in a connection. */
  pageInfo: PostToTagConnectionPageInfo;
};

/** An edge in a connection */
export type PostToTagConnectionEdge = Edge & TagConnectionEdge & {
  __typename?: 'PostToTagConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The Yoast SEO Primary post_tag */
  isPrimary?: Maybe<Scalars['Boolean']['output']>;
  /** The item at the end of the edge */
  node: Tag;
};

/** Page Info on the &quot;PostToTagConnection&quot; */
export type PostToTagConnectionPageInfo = PageInfo & TagConnectionPageInfo & WpPageInfo & {
  __typename?: 'PostToTagConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToTagConnection connection */
export type PostToTagConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the Post type and the TermNode type */
export type PostToTermNodeConnection = Connection & TermNodeConnection & {
  __typename?: 'PostToTermNodeConnection';
  /** Edges for the PostToTermNodeConnection connection */
  edges: Array<PostToTermNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<TermNode>;
  /** Information about pagination in a connection. */
  pageInfo: PostToTermNodeConnectionPageInfo;
};

/** An edge in a connection */
export type PostToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {
  __typename?: 'PostToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: TermNode;
};

/** Page Info on the &quot;PostToTermNodeConnection&quot; */
export type PostToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {
  __typename?: 'PostToTermNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the PostToTermNodeConnection connection */
export type PostToTermNodeConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Details for labels of the PostType */
export type PostTypeLabelDetails = {
  __typename?: 'PostTypeLabelDetails';
  /** Default is ‘Add New’ for both hierarchical and non-hierarchical types. */
  addNew?: Maybe<Scalars['String']['output']>;
  /** Label for adding a new singular item. */
  addNewItem?: Maybe<Scalars['String']['output']>;
  /** Label to signify all items in a submenu link. */
  allItems?: Maybe<Scalars['String']['output']>;
  /** Label for archives in nav menus */
  archives?: Maybe<Scalars['String']['output']>;
  /** Label for the attributes meta box. */
  attributes?: Maybe<Scalars['String']['output']>;
  /** Label for editing a singular item. */
  editItem?: Maybe<Scalars['String']['output']>;
  /** Label for the Featured Image meta box title. */
  featuredImage?: Maybe<Scalars['String']['output']>;
  /** Label for the table views hidden heading. */
  filterItemsList?: Maybe<Scalars['String']['output']>;
  /** Label for the media frame button. */
  insertIntoItem?: Maybe<Scalars['String']['output']>;
  /** Label for the table hidden heading. */
  itemsList?: Maybe<Scalars['String']['output']>;
  /** Label for the table pagination hidden heading. */
  itemsListNavigation?: Maybe<Scalars['String']['output']>;
  /** Label for the menu name. */
  menuName?: Maybe<Scalars['String']['output']>;
  /** General name for the post type, usually plural. */
  name?: Maybe<Scalars['String']['output']>;
  /** Label for the new item page title. */
  newItem?: Maybe<Scalars['String']['output']>;
  /** Label used when no items are found. */
  notFound?: Maybe<Scalars['String']['output']>;
  /** Label used when no items are in the trash. */
  notFoundInTrash?: Maybe<Scalars['String']['output']>;
  /** Label used to prefix parents of hierarchical items. */
  parentItemColon?: Maybe<Scalars['String']['output']>;
  /** Label for removing the featured image. */
  removeFeaturedImage?: Maybe<Scalars['String']['output']>;
  /** Label for searching plural items. */
  searchItems?: Maybe<Scalars['String']['output']>;
  /** Label for setting the featured image. */
  setFeaturedImage?: Maybe<Scalars['String']['output']>;
  /** Name for one object of this post type. */
  singularName?: Maybe<Scalars['String']['output']>;
  /** Label for the media frame filter. */
  uploadedToThisItem?: Maybe<Scalars['String']['output']>;
  /** Label in the media frame for using a featured image. */
  useFeaturedImage?: Maybe<Scalars['String']['output']>;
  /** Label for viewing a singular item. */
  viewItem?: Maybe<Scalars['String']['output']>;
  /** Label for viewing post type archives. */
  viewItems?: Maybe<Scalars['String']['output']>;
};

export type PostTypeSeo = {
  __typename?: 'PostTypeSEO';
  breadcrumbs?: Maybe<Array<Maybe<SeoPostTypeBreadcrumbs>>>;
  canonical?: Maybe<Scalars['String']['output']>;
  cornerstone?: Maybe<Scalars['Boolean']['output']>;
  focuskw?: Maybe<Scalars['String']['output']>;
  fullHead?: Maybe<Scalars['String']['output']>;
  metaDesc?: Maybe<Scalars['String']['output']>;
  metaKeywords?: Maybe<Scalars['String']['output']>;
  metaRobotsNofollow?: Maybe<Scalars['String']['output']>;
  metaRobotsNoindex?: Maybe<Scalars['String']['output']>;
  opengraphAuthor?: Maybe<Scalars['String']['output']>;
  opengraphDescription?: Maybe<Scalars['String']['output']>;
  opengraphImage?: Maybe<MediaItem>;
  opengraphModifiedTime?: Maybe<Scalars['String']['output']>;
  opengraphPublishedTime?: Maybe<Scalars['String']['output']>;
  opengraphPublisher?: Maybe<Scalars['String']['output']>;
  opengraphSiteName?: Maybe<Scalars['String']['output']>;
  opengraphTitle?: Maybe<Scalars['String']['output']>;
  opengraphType?: Maybe<Scalars['String']['output']>;
  opengraphUrl?: Maybe<Scalars['String']['output']>;
  readingTime?: Maybe<Scalars['Float']['output']>;
  schema?: Maybe<SeoPostTypeSchema>;
  title?: Maybe<Scalars['String']['output']>;
  twitterDescription?: Maybe<Scalars['String']['output']>;
  twitterImage?: Maybe<MediaItem>;
  twitterTitle?: Maybe<Scalars['String']['output']>;
};

/** Nodes that can be seen in a preview (unpublished) state. */
export type Previewable = {
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
};

/** The product type */
export type Product = ContentNode & DatabaseIdentifier & Node & NodeWithAuthor & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {
  __typename?: 'Product';
  accurateDate?: Maybe<Scalars['String']['output']>;
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  bookNowURL?: Maybe<Scalars['String']['output']>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  dataSource?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  datatracID?: Maybe<Scalars['String']['output']>;
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  displayName?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the product object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  loanBasedAmount?: Maybe<Scalars['String']['output']>;
  memberApplyNowURL?: Maybe<Scalars['String']['output']>;
  memberQuickApplyMobileURL?: Maybe<Scalars['String']['output']>;
  memberQuickApplyURL?: Maybe<Scalars['String']['output']>;
  minorMemberApplyNowURL?: Maybe<Scalars['String']['output']>;
  minorNonMemberApplyNowURL?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  nonMemberApplyNowURL?: Maybe<Scalars['String']['output']>;
  /** Connection between the Product type and the product type */
  preview?: Maybe<ProductToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  productApplyURL?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  productId: Scalars['Int']['output'];
  productPageURL?: Maybe<Scalars['String']['output']>;
  /** Connection between the product type and the rate type */
  rates?: Maybe<ProductToRateConnection>;
  ratesTableID?: Maybe<Scalars['Float']['output']>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  showRatesInDigitalBanking?: Maybe<Scalars['Boolean']['output']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The product type */
export type ProductEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The product type */
export type ProductEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The product type */
export type ProductRatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The product type */
export type ProductTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Connection to product Nodes */
export type ProductConnection = {
  /** A list of edges (relational context) between RootQuery and connected product Nodes */
  edges: Array<ProductConnectionEdge>;
  /** A list of connected product Nodes */
  nodes: Array<Product>;
  /** Information about pagination in a connection. */
  pageInfo: ProductConnectionPageInfo;
};

/** Edge between a Node and a connected product */
export type ProductConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected product Node */
  node: Product;
};

/** Page Info on the connected ProductConnectionEdge */
export type ProductConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum ProductIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** The productName type */
export type ProductName = DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {
  __typename?: 'ProductName';
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ProductName type and the ContentNode type */
  contentNodes?: Maybe<ProductNameToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  productNameId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the ProductName type and the rate type */
  rates?: Maybe<ProductNameToRateConnection>;
  /** The Yoast SEO data of the Product Names taxonomy. */
  seo?: Maybe<TaxonomySeo>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /** Connection between the ProductName type and the Taxonomy type */
  taxonomy?: Maybe<ProductNameToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The productName type */
export type ProductNameContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProductNameToContentNodeConnectionWhereArgs>;
};


/** The productName type */
export type ProductNameEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The productName type */
export type ProductNameEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The productName type */
export type ProductNameRatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProductNameToRateConnectionWhereArgs>;
};

/** Connection to productName Nodes */
export type ProductNameConnection = {
  /** A list of edges (relational context) between RootQuery and connected productName Nodes */
  edges: Array<ProductNameConnectionEdge>;
  /** A list of connected productName Nodes */
  nodes: Array<ProductName>;
  /** Information about pagination in a connection. */
  pageInfo: ProductNameConnectionPageInfo;
};

/** Edge between a Node and a connected productName */
export type ProductNameConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected productName Node */
  node: ProductName;
};

/** Page Info on the connected ProductNameConnectionEdge */
export type ProductNameConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum ProductNameIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the ProductName type and the ContentNode type */
export type ProductNameToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'ProductNameToContentNodeConnection';
  /** Edges for the ProductNameToContentNodeConnection connection */
  edges: Array<ProductNameToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: ProductNameToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type ProductNameToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'ProductNameToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Page Info on the &quot;ProductNameToContentNodeConnection&quot; */
export type ProductNameToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'ProductNameToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the ProductNameToContentNodeConnection connection */
export type ProductNameToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfProductNameEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the ProductName type and the rate type */
export type ProductNameToRateConnection = Connection & RateConnection & {
  __typename?: 'ProductNameToRateConnection';
  /** Edges for the ProductNameToRateConnection connection */
  edges: Array<ProductNameToRateConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Rate>;
  /** Information about pagination in a connection. */
  pageInfo: ProductNameToRateConnectionPageInfo;
};

/** An edge in a connection */
export type ProductNameToRateConnectionEdge = Edge & RateConnectionEdge & {
  __typename?: 'ProductNameToRateConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Rate;
};

/** Page Info on the &quot;ProductNameToRateConnection&quot; */
export type ProductNameToRateConnectionPageInfo = PageInfo & RateConnectionPageInfo & WpPageInfo & {
  __typename?: 'ProductNameToRateConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the ProductNameToRateConnection connection */
export type ProductNameToRateConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the ProductName type and the Taxonomy type */
export type ProductNameToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {
  __typename?: 'ProductNameToTaxonomyConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Taxonomy;
};

/** Connection between the Product type and the product type */
export type ProductToPreviewConnectionEdge = Edge & OneToOneConnection & ProductConnectionEdge & {
  __typename?: 'ProductToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Product;
};

/** Connection between the product type and the rate type */
export type ProductToRateConnection = Connection & RateConnection & {
  __typename?: 'ProductToRateConnection';
  /** Edges for the ProductToRateConnection connection */
  edges: Array<ProductToRateConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Rate>;
  /** Information about pagination in a connection. */
  pageInfo: ProductToRateConnectionPageInfo;
};

/** An edge in a connection */
export type ProductToRateConnectionEdge = Edge & RateConnectionEdge & {
  __typename?: 'ProductToRateConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Rate;
};

/** Page Info on the &quot;ProductToRateConnection&quot; */
export type ProductToRateConnectionPageInfo = PageInfo & RateConnectionPageInfo & WpPageInfo & {
  __typename?: 'ProductToRateConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The rate type */
export type Rate = ContentNode & DatabaseIdentifier & Node & NodeWithAuthor & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {
  __typename?: 'Rate';
  aprapy?: Maybe<Scalars['String']['output']>;
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  displayName?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  externalName?: Maybe<Scalars['String']['output']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the rate object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  minimumBalance?: Maybe<Scalars['Float']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  payment?: Maybe<Scalars['Float']['output']>;
  /** Connection between the Rate type and the rate type */
  preview?: Maybe<RateToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** Connection between the rate type and the product type */
  product?: Maybe<RateToProductConnection>;
  /** Connection between the Rate type and the productName type */
  productNames?: Maybe<RateToProductNameConnection>;
  rate?: Maybe<Scalars['Float']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  rateId: Scalars['Int']['output'];
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  term?: Maybe<Scalars['String']['output']>;
  /** Connection between the Rate type and the TermNode type */
  terms?: Maybe<RateToTermNodeConnection>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The rate type */
export type RateEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The rate type */
export type RateEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The rate type */
export type RateProductArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The rate type */
export type RateProductNamesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RateToProductNameConnectionWhereArgs>;
};


/** The rate type */
export type RateTermsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RateToTermNodeConnectionWhereArgs>;
};


/** The rate type */
export type RateTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Connection to rate Nodes */
export type RateConnection = {
  /** A list of edges (relational context) between RootQuery and connected rate Nodes */
  edges: Array<RateConnectionEdge>;
  /** A list of connected rate Nodes */
  nodes: Array<Rate>;
  /** Information about pagination in a connection. */
  pageInfo: RateConnectionPageInfo;
};

/** Edge between a Node and a connected rate */
export type RateConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected rate Node */
  node: Rate;
};

/** Page Info on the connected RateConnectionEdge */
export type RateConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum RateIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Set relationships between the rate to productNames */
export type RateProductNamesInput = {
  /** If true, this will append the productName to existing related productNames. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']['input']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<RateProductNamesNodeInput>>>;
};

/** List of productNames to connect the rate to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type RateProductNamesNodeInput = {
  /** The description of the productName. This field is used to set a description of the productName if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the productName. If present, this will be used to connect to the rate. If no existing productName exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** The name of the productName. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the productName. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Rate type and the rate type */
export type RateToPreviewConnectionEdge = Edge & OneToOneConnection & RateConnectionEdge & {
  __typename?: 'RateToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Rate;
};

/** Connection between the rate type and the product type */
export type RateToProductConnection = Connection & ProductConnection & {
  __typename?: 'RateToProductConnection';
  /** Edges for the RateToProductConnection connection */
  edges: Array<RateToProductConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Product>;
  /** Information about pagination in a connection. */
  pageInfo: RateToProductConnectionPageInfo;
};

/** An edge in a connection */
export type RateToProductConnectionEdge = Edge & ProductConnectionEdge & {
  __typename?: 'RateToProductConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Product;
};

/** Page Info on the &quot;RateToProductConnection&quot; */
export type RateToProductConnectionPageInfo = PageInfo & ProductConnectionPageInfo & WpPageInfo & {
  __typename?: 'RateToProductConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Rate type and the productName type */
export type RateToProductNameConnection = Connection & ProductNameConnection & {
  __typename?: 'RateToProductNameConnection';
  /** Edges for the RateToProductNameConnection connection */
  edges: Array<RateToProductNameConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ProductName>;
  /** Information about pagination in a connection. */
  pageInfo: RateToProductNameConnectionPageInfo;
};

/** An edge in a connection */
export type RateToProductNameConnectionEdge = Edge & ProductNameConnectionEdge & {
  __typename?: 'RateToProductNameConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The Yoast SEO Primary productname */
  isPrimary?: Maybe<Scalars['Boolean']['output']>;
  /** The item at the end of the edge */
  node: ProductName;
};

/** Page Info on the &quot;RateToProductNameConnection&quot; */
export type RateToProductNameConnectionPageInfo = PageInfo & ProductNameConnectionPageInfo & WpPageInfo & {
  __typename?: 'RateToProductNameConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RateToProductNameConnection connection */
export type RateToProductNameConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the Rate type and the TermNode type */
export type RateToTermNodeConnection = Connection & TermNodeConnection & {
  __typename?: 'RateToTermNodeConnection';
  /** Edges for the RateToTermNodeConnection connection */
  edges: Array<RateToTermNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<TermNode>;
  /** Information about pagination in a connection. */
  pageInfo: RateToTermNodeConnectionPageInfo;
};

/** An edge in a connection */
export type RateToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {
  __typename?: 'RateToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: TermNode;
};

/** Page Info on the &quot;RateToTermNodeConnection&quot; */
export type RateToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {
  __typename?: 'RateToTermNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RateToTermNodeConnection connection */
export type RateToTermNodeConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The reading setting type */
export type ReadingSettings = {
  __typename?: 'ReadingSettings';
  /** The ID of the page that should display the latest posts */
  pageForPosts?: Maybe<Scalars['Int']['output']>;
  /** The ID of the page that should be displayed on the front page */
  pageOnFront?: Maybe<Scalars['Int']['output']>;
  /** Blog pages show at most. */
  postsPerPage?: Maybe<Scalars['Int']['output']>;
  /** What to show on the front page */
  showOnFront?: Maybe<Scalars['String']['output']>;
};

/** Redirection */
export type Redirection = {
  __typename?: 'Redirection';
  /** Shortcode Content */
  action_code?: Maybe<Scalars['String']['output']>;
  /** Shortcode Content */
  action_data?: Maybe<Scalars['String']['output']>;
  /** Shortcode Content */
  action_type?: Maybe<Scalars['String']['output']>;
  /** Shortcode Content */
  match_type?: Maybe<Scalars['String']['output']>;
  /** Shortcode Content */
  match_url?: Maybe<Scalars['String']['output']>;
  /** Shortcode Content */
  regex?: Maybe<Scalars['String']['output']>;
  /** Shortcode Content */
  status?: Maybe<Scalars['String']['output']>;
  /** Shortcode Content */
  url?: Maybe<Scalars['String']['output']>;
};

/** Input for the registerUser mutation. */
export type RegisterUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']['input']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']['input']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']['input']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains the user's username. */
  username: Scalars['String']['input'];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']['input']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the registerUser mutation. */
export type RegisterUserPayload = {
  __typename?: 'RegisterUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The User object mutation type. */
  user?: Maybe<User>;
};

/** The logical relation between each item in the array when there are more than one. */
export enum RelationEnum {
  /** The logical AND condition returns true if both operands are true, otherwise, it returns false. */
  And = 'AND',
  /** The logical OR condition returns false if both operands are false, otherwise, it returns true. */
  Or = 'OR'
}

/** Input for the resetUserPassword mutation. */
export type ResetUserPasswordInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Password reset key */
  key?: InputMaybe<Scalars['String']['input']>;
  /** The user's login (username). */
  login?: InputMaybe<Scalars['String']['input']>;
  /** The new password. */
  password?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the resetUserPassword mutation. */
export type ResetUserPasswordPayload = {
  __typename?: 'ResetUserPasswordPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The User object mutation type. */
  user?: Maybe<User>;
};

/** Input for the restoreComment mutation. */
export type RestoreCommentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the comment to be restored */
  id: Scalars['ID']['input'];
};

/** The payload for the restoreComment mutation. */
export type RestoreCommentPayload = {
  __typename?: 'RestoreCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The restored comment object */
  comment?: Maybe<Comment>;
  /** The ID of the restored comment */
  restoredId?: Maybe<Scalars['ID']['output']>;
};

/** The root mutation */
export type RootMutation = {
  __typename?: 'RootMutation';
  /** The createCXAlert mutation */
  createCXAlert?: Maybe<CreateCxAlertPayload>;
  /** The createCategory mutation */
  createCategory?: Maybe<CreateCategoryPayload>;
  /** The createComment mutation */
  createComment?: Maybe<CreateCommentPayload>;
  /** The createContact mutation */
  createContact?: Maybe<CreateContactPayload>;
  /** The createGraphqlDocument mutation */
  createGraphqlDocument?: Maybe<CreateGraphqlDocumentPayload>;
  /** The createInstruction mutation */
  createInstruction?: Maybe<CreateInstructionPayload>;
  /** The createLinklibrary mutation */
  createLinklibrary?: Maybe<CreateLinklibraryPayload>;
  /** The createLocation mutation */
  createLocation?: Maybe<CreateLocationPayload>;
  /** The createLocationCategory mutation */
  createLocationCategory?: Maybe<CreateLocationCategoryPayload>;
  /** The createMediaItem mutation */
  createMediaItem?: Maybe<CreateMediaItemPayload>;
  /** The createPage mutation */
  createPage?: Maybe<CreatePagePayload>;
  /** The createPost mutation */
  createPost?: Maybe<CreatePostPayload>;
  /** The createPostFormat mutation */
  createPostFormat?: Maybe<CreatePostFormatPayload>;
  /** The createProduct mutation */
  createProduct?: Maybe<CreateProductPayload>;
  /** The createProductName mutation */
  createProductName?: Maybe<CreateProductNamePayload>;
  /** The createRate mutation */
  createRate?: Maybe<CreateRatePayload>;
  /** The createService mutation */
  createService?: Maybe<CreateServicePayload>;
  /** The createStep mutation */
  createStep?: Maybe<CreateStepPayload>;
  /** The createTag mutation */
  createTag?: Maybe<CreateTagPayload>;
  /** The createUser mutation */
  createUser?: Maybe<CreateUserPayload>;
  /** The deleteCXAlert mutation */
  deleteCXAlert?: Maybe<DeleteCxAlertPayload>;
  /** The deleteCategory mutation */
  deleteCategory?: Maybe<DeleteCategoryPayload>;
  /** The deleteComment mutation */
  deleteComment?: Maybe<DeleteCommentPayload>;
  /** The deleteContact mutation */
  deleteContact?: Maybe<DeleteContactPayload>;
  /** The deleteGraphqlDocument mutation */
  deleteGraphqlDocument?: Maybe<DeleteGraphqlDocumentPayload>;
  /** The deleteInstruction mutation */
  deleteInstruction?: Maybe<DeleteInstructionPayload>;
  /** The deleteLinklibrary mutation */
  deleteLinklibrary?: Maybe<DeleteLinklibraryPayload>;
  /** The deleteLocation mutation */
  deleteLocation?: Maybe<DeleteLocationPayload>;
  /** The deleteLocationCategory mutation */
  deleteLocationCategory?: Maybe<DeleteLocationCategoryPayload>;
  /** The deleteMediaItem mutation */
  deleteMediaItem?: Maybe<DeleteMediaItemPayload>;
  /** The deletePage mutation */
  deletePage?: Maybe<DeletePagePayload>;
  /** The deletePost mutation */
  deletePost?: Maybe<DeletePostPayload>;
  /** The deletePostFormat mutation */
  deletePostFormat?: Maybe<DeletePostFormatPayload>;
  /** The deleteProduct mutation */
  deleteProduct?: Maybe<DeleteProductPayload>;
  /** The deleteProductName mutation */
  deleteProductName?: Maybe<DeleteProductNamePayload>;
  /** The deleteRate mutation */
  deleteRate?: Maybe<DeleteRatePayload>;
  /** The deleteService mutation */
  deleteService?: Maybe<DeleteServicePayload>;
  /** The deleteStep mutation */
  deleteStep?: Maybe<DeleteStepPayload>;
  /** The deleteTag mutation */
  deleteTag?: Maybe<DeleteTagPayload>;
  /** The deleteUser mutation */
  deleteUser?: Maybe<DeleteUserPayload>;
  /** The generateAuthorizationCode mutation */
  generateAuthorizationCode?: Maybe<GenerateAuthorizationCodePayload>;
  /** Increase the count. */
  increaseCount?: Maybe<Scalars['Int']['output']>;
  /** The registerUser mutation */
  registerUser?: Maybe<RegisterUserPayload>;
  /** The resetUserPassword mutation */
  resetUserPassword?: Maybe<ResetUserPasswordPayload>;
  /** The restoreComment mutation */
  restoreComment?: Maybe<RestoreCommentPayload>;
  /** Send password reset email to user */
  sendPasswordResetEmail?: Maybe<SendPasswordResetEmailPayload>;
  /** The updateCXAlert mutation */
  updateCXAlert?: Maybe<UpdateCxAlertPayload>;
  /** The updateCategory mutation */
  updateCategory?: Maybe<UpdateCategoryPayload>;
  /** The updateComment mutation */
  updateComment?: Maybe<UpdateCommentPayload>;
  /** The updateContact mutation */
  updateContact?: Maybe<UpdateContactPayload>;
  /** The updateGraphqlDocument mutation */
  updateGraphqlDocument?: Maybe<UpdateGraphqlDocumentPayload>;
  /** The updateInstruction mutation */
  updateInstruction?: Maybe<UpdateInstructionPayload>;
  /** The updateLinklibrary mutation */
  updateLinklibrary?: Maybe<UpdateLinklibraryPayload>;
  /** The updateLocation mutation */
  updateLocation?: Maybe<UpdateLocationPayload>;
  /** The updateLocationCategory mutation */
  updateLocationCategory?: Maybe<UpdateLocationCategoryPayload>;
  /** The updateMediaItem mutation */
  updateMediaItem?: Maybe<UpdateMediaItemPayload>;
  /** The updatePage mutation */
  updatePage?: Maybe<UpdatePagePayload>;
  /** The updatePost mutation */
  updatePost?: Maybe<UpdatePostPayload>;
  /** The updatePostFormat mutation */
  updatePostFormat?: Maybe<UpdatePostFormatPayload>;
  /** The updateProduct mutation */
  updateProduct?: Maybe<UpdateProductPayload>;
  /** The updateProductName mutation */
  updateProductName?: Maybe<UpdateProductNamePayload>;
  /** The updateRate mutation */
  updateRate?: Maybe<UpdateRatePayload>;
  /** The updateService mutation */
  updateService?: Maybe<UpdateServicePayload>;
  /** The updateSettings mutation */
  updateSettings?: Maybe<UpdateSettingsPayload>;
  /** The updateStep mutation */
  updateStep?: Maybe<UpdateStepPayload>;
  /** The updateTag mutation */
  updateTag?: Maybe<UpdateTagPayload>;
  /** The updateUser mutation */
  updateUser?: Maybe<UpdateUserPayload>;
};


/** The root mutation */
export type RootMutationCreateCxAlertArgs = {
  input: CreateCxAlertInput;
};


/** The root mutation */
export type RootMutationCreateCategoryArgs = {
  input: CreateCategoryInput;
};


/** The root mutation */
export type RootMutationCreateCommentArgs = {
  input: CreateCommentInput;
};


/** The root mutation */
export type RootMutationCreateContactArgs = {
  input: CreateContactInput;
};


/** The root mutation */
export type RootMutationCreateGraphqlDocumentArgs = {
  input: CreateGraphqlDocumentInput;
};


/** The root mutation */
export type RootMutationCreateInstructionArgs = {
  input: CreateInstructionInput;
};


/** The root mutation */
export type RootMutationCreateLinklibraryArgs = {
  input: CreateLinklibraryInput;
};


/** The root mutation */
export type RootMutationCreateLocationArgs = {
  input: CreateLocationInput;
};


/** The root mutation */
export type RootMutationCreateLocationCategoryArgs = {
  input: CreateLocationCategoryInput;
};


/** The root mutation */
export type RootMutationCreateMediaItemArgs = {
  input: CreateMediaItemInput;
};


/** The root mutation */
export type RootMutationCreatePageArgs = {
  input: CreatePageInput;
};


/** The root mutation */
export type RootMutationCreatePostArgs = {
  input: CreatePostInput;
};


/** The root mutation */
export type RootMutationCreatePostFormatArgs = {
  input: CreatePostFormatInput;
};


/** The root mutation */
export type RootMutationCreateProductArgs = {
  input: CreateProductInput;
};


/** The root mutation */
export type RootMutationCreateProductNameArgs = {
  input: CreateProductNameInput;
};


/** The root mutation */
export type RootMutationCreateRateArgs = {
  input: CreateRateInput;
};


/** The root mutation */
export type RootMutationCreateServiceArgs = {
  input: CreateServiceInput;
};


/** The root mutation */
export type RootMutationCreateStepArgs = {
  input: CreateStepInput;
};


/** The root mutation */
export type RootMutationCreateTagArgs = {
  input: CreateTagInput;
};


/** The root mutation */
export type RootMutationCreateUserArgs = {
  input: CreateUserInput;
};


/** The root mutation */
export type RootMutationDeleteCxAlertArgs = {
  input: DeleteCxAlertInput;
};


/** The root mutation */
export type RootMutationDeleteCategoryArgs = {
  input: DeleteCategoryInput;
};


/** The root mutation */
export type RootMutationDeleteCommentArgs = {
  input: DeleteCommentInput;
};


/** The root mutation */
export type RootMutationDeleteContactArgs = {
  input: DeleteContactInput;
};


/** The root mutation */
export type RootMutationDeleteGraphqlDocumentArgs = {
  input: DeleteGraphqlDocumentInput;
};


/** The root mutation */
export type RootMutationDeleteInstructionArgs = {
  input: DeleteInstructionInput;
};


/** The root mutation */
export type RootMutationDeleteLinklibraryArgs = {
  input: DeleteLinklibraryInput;
};


/** The root mutation */
export type RootMutationDeleteLocationArgs = {
  input: DeleteLocationInput;
};


/** The root mutation */
export type RootMutationDeleteLocationCategoryArgs = {
  input: DeleteLocationCategoryInput;
};


/** The root mutation */
export type RootMutationDeleteMediaItemArgs = {
  input: DeleteMediaItemInput;
};


/** The root mutation */
export type RootMutationDeletePageArgs = {
  input: DeletePageInput;
};


/** The root mutation */
export type RootMutationDeletePostArgs = {
  input: DeletePostInput;
};


/** The root mutation */
export type RootMutationDeletePostFormatArgs = {
  input: DeletePostFormatInput;
};


/** The root mutation */
export type RootMutationDeleteProductArgs = {
  input: DeleteProductInput;
};


/** The root mutation */
export type RootMutationDeleteProductNameArgs = {
  input: DeleteProductNameInput;
};


/** The root mutation */
export type RootMutationDeleteRateArgs = {
  input: DeleteRateInput;
};


/** The root mutation */
export type RootMutationDeleteServiceArgs = {
  input: DeleteServiceInput;
};


/** The root mutation */
export type RootMutationDeleteStepArgs = {
  input: DeleteStepInput;
};


/** The root mutation */
export type RootMutationDeleteTagArgs = {
  input: DeleteTagInput;
};


/** The root mutation */
export type RootMutationDeleteUserArgs = {
  input: DeleteUserInput;
};


/** The root mutation */
export type RootMutationGenerateAuthorizationCodeArgs = {
  input: GenerateAuthorizationCodeInput;
};


/** The root mutation */
export type RootMutationIncreaseCountArgs = {
  count?: InputMaybe<Scalars['Int']['input']>;
};


/** The root mutation */
export type RootMutationRegisterUserArgs = {
  input: RegisterUserInput;
};


/** The root mutation */
export type RootMutationResetUserPasswordArgs = {
  input: ResetUserPasswordInput;
};


/** The root mutation */
export type RootMutationRestoreCommentArgs = {
  input: RestoreCommentInput;
};


/** The root mutation */
export type RootMutationSendPasswordResetEmailArgs = {
  input: SendPasswordResetEmailInput;
};


/** The root mutation */
export type RootMutationUpdateCxAlertArgs = {
  input: UpdateCxAlertInput;
};


/** The root mutation */
export type RootMutationUpdateCategoryArgs = {
  input: UpdateCategoryInput;
};


/** The root mutation */
export type RootMutationUpdateCommentArgs = {
  input: UpdateCommentInput;
};


/** The root mutation */
export type RootMutationUpdateContactArgs = {
  input: UpdateContactInput;
};


/** The root mutation */
export type RootMutationUpdateGraphqlDocumentArgs = {
  input: UpdateGraphqlDocumentInput;
};


/** The root mutation */
export type RootMutationUpdateInstructionArgs = {
  input: UpdateInstructionInput;
};


/** The root mutation */
export type RootMutationUpdateLinklibraryArgs = {
  input: UpdateLinklibraryInput;
};


/** The root mutation */
export type RootMutationUpdateLocationArgs = {
  input: UpdateLocationInput;
};


/** The root mutation */
export type RootMutationUpdateLocationCategoryArgs = {
  input: UpdateLocationCategoryInput;
};


/** The root mutation */
export type RootMutationUpdateMediaItemArgs = {
  input: UpdateMediaItemInput;
};


/** The root mutation */
export type RootMutationUpdatePageArgs = {
  input: UpdatePageInput;
};


/** The root mutation */
export type RootMutationUpdatePostArgs = {
  input: UpdatePostInput;
};


/** The root mutation */
export type RootMutationUpdatePostFormatArgs = {
  input: UpdatePostFormatInput;
};


/** The root mutation */
export type RootMutationUpdateProductArgs = {
  input: UpdateProductInput;
};


/** The root mutation */
export type RootMutationUpdateProductNameArgs = {
  input: UpdateProductNameInput;
};


/** The root mutation */
export type RootMutationUpdateRateArgs = {
  input: UpdateRateInput;
};


/** The root mutation */
export type RootMutationUpdateServiceArgs = {
  input: UpdateServiceInput;
};


/** The root mutation */
export type RootMutationUpdateSettingsArgs = {
  input: UpdateSettingsInput;
};


/** The root mutation */
export type RootMutationUpdateStepArgs = {
  input: UpdateStepInput;
};


/** The root mutation */
export type RootMutationUpdateTagArgs = {
  input: UpdateTagInput;
};


/** The root mutation */
export type RootMutationUpdateUserArgs = {
  input: UpdateUserInput;
};

/** The root entry point into the Graph */
export type RootQuery = {
  __typename?: 'RootQuery';
  /** Connection between the RootQuery type and the linklibrary type */
  allLinklibrary?: Maybe<RootQueryToLinklibraryConnection>;
  /** Entry point to get all settings for the site */
  allSettings?: Maybe<Settings>;
  /** Fields of the &#039;AtlasContentModelerSettingsSettings&#039; settings group */
  atlasContentModelerSettingsSettings?: Maybe<AtlasContentModelerSettingsSettings>;
  /** An object of the CXAlert Type.  */
  cXAlert?: Maybe<CxAlert>;
  /**
   * A CXAlert object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  cXAlertBy?: Maybe<CxAlert>;
  /** Connection between the RootQuery type and the CXAlert type */
  cXAlerts?: Maybe<RootQueryToCxAlertConnection>;
  /** Connection between the RootQuery type and the category type */
  categories?: Maybe<RootQueryToCategoryConnection>;
  /** A 0bject */
  category?: Maybe<Category>;
  /** Returns a Comment */
  comment?: Maybe<Comment>;
  /** Connection between the RootQuery type and the Comment type */
  comments?: Maybe<RootQueryToCommentConnection>;
  /** An object of the contact Type.  */
  contact?: Maybe<Contact>;
  /**
   * A contact object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  contactBy?: Maybe<Contact>;
  /** Connection between the RootQuery type and the contact type */
  contacts?: Maybe<RootQueryToContactConnection>;
  /** A node used to manage content */
  contentNode?: Maybe<ContentNode>;
  /** Connection between the RootQuery type and the ContentNode type */
  contentNodes?: Maybe<RootQueryToContentNodeConnection>;
  /** Fetch a Content Type node by unique Identifier */
  contentType?: Maybe<ContentType>;
  /** Connection between the RootQuery type and the ContentType type */
  contentTypes?: Maybe<RootQueryToContentTypeConnection>;
  /** Fields of the &#039;DiscussionSettings&#039; settings group */
  discussionSettings?: Maybe<DiscussionSettings>;
  /** Field that resolves as a list of keys and values */
  faq?: Maybe<FaQs>;
  /** Fields of the &#039;FooterSettings&#039; settings group */
  footerSettings?: Maybe<FooterSettings>;
  /** Fields of the &#039;GeneralSettings&#039; settings group */
  generalSettings?: Maybe<GeneralSettings>;
  /** Fields of the &#039;GenesisBlocksGlobalSettingsSettings&#039; settings group */
  genesisBlocksGlobalSettingsSettings?: Maybe<GenesisBlocksGlobalSettingsSettings>;
  /** Field that resolves as a list of keys and values */
  getForm?: Maybe<Form>;
  /** An object of the graphqlDocument Type. Saved GraphQL Documents */
  graphqlDocument?: Maybe<GraphqlDocument>;
  /**
   * A graphqlDocument object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  graphqlDocumentBy?: Maybe<GraphqlDocument>;
  /** Connection between the RootQuery type and the graphqlDocument type */
  graphqlDocuments?: Maybe<RootQueryToGraphqlDocumentConnection>;
  /** Fields of the &#039;HeaderSettings&#039; settings group */
  headerSettings?: Maybe<HeaderSettings>;
  /** An object of the instruction Type.  */
  instruction?: Maybe<Instruction>;
  /**
   * A instruction object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  instructionBy?: Maybe<Instruction>;
  /** Connection between the RootQuery type and the instruction type */
  instructions?: Maybe<RootQueryToInstructionConnection>;
  /** Field that resolves as a list of keys and values */
  linkLibraryByCatId?: Maybe<Array<Maybe<LinkLibraryLink>>>;
  /** An object of the linklibrary Type.  */
  linklibrary?: Maybe<Linklibrary>;
  /**
   * A linklibrary object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  linklibraryBy?: Maybe<Linklibrary>;
  /** An object of the location Type.  */
  location?: Maybe<Location>;
  /**
   * A location object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  locationBy?: Maybe<Location>;
  /** Connection between the RootQuery type and the locationCategory type */
  locationCategories?: Maybe<RootQueryToLocationCategoryConnection>;
  /** A 0bject */
  locationCategory?: Maybe<LocationCategory>;
  /** Fields of the &#039;LocationSettings&#039; settings group */
  locationSettings?: Maybe<LocationSettings>;
  /** Connection between the RootQuery type and the location type */
  locations?: Maybe<RootQueryToLocationConnection>;
  /** An object of the mediaItem Type.  */
  mediaItem?: Maybe<MediaItem>;
  /**
   * A mediaItem object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  mediaItemBy?: Maybe<MediaItem>;
  /** Connection between the RootQuery type and the mediaItem type */
  mediaItems?: Maybe<RootQueryToMediaItemConnection>;
  /** A WordPress navigation menu */
  menu?: Maybe<Menu>;
  /** A WordPress navigation menu item */
  menuItem?: Maybe<MenuItem>;
  /** Connection between the RootQuery type and the MenuItem type */
  menuItems?: Maybe<RootQueryToMenuItemConnection>;
  /** Connection between the RootQuery type and the Menu type */
  menus?: Maybe<RootQueryToMenuConnection>;
  /** Fetches an object given its ID */
  node?: Maybe<Node>;
  /** Fetches an object given its Unique Resource Identifier */
  nodeByUri?: Maybe<UniformResourceIdentifiable>;
  /** An object of the page Type.  */
  page?: Maybe<Page>;
  /** Field that resolves as a list of keys and values */
  pageAlerts?: Maybe<Array<Maybe<CxAlerts>>>;
  /**
   * A page object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  pageBy?: Maybe<Page>;
  /** Connection between the RootQuery type and the page type */
  pages?: Maybe<RootQueryToPageConnection>;
  /** A WordPress plugin */
  plugin?: Maybe<Plugin>;
  /** Connection between the RootQuery type and the Plugin type */
  plugins?: Maybe<RootQueryToPluginConnection>;
  /** An object of the post Type.  */
  post?: Maybe<Post>;
  /**
   * A post object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  postBy?: Maybe<Post>;
  /** A 0bject */
  postFormat?: Maybe<PostFormat>;
  /** Connection between the RootQuery type and the postFormat type */
  postFormats?: Maybe<RootQueryToPostFormatConnection>;
  /** Field that resolves as a list of keys and values */
  postPreview?: Maybe<Page>;
  /** Connection between the RootQuery type and the post type */
  posts?: Maybe<RootQueryToPostConnection>;
  /** An object of the product Type.  */
  product?: Maybe<Product>;
  /**
   * A product object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  productBy?: Maybe<Product>;
  /** A 0bject */
  productName?: Maybe<ProductName>;
  /** Connection between the RootQuery type and the productName type */
  productNames?: Maybe<RootQueryToProductNameConnection>;
  /** Connection between the RootQuery type and the product type */
  products?: Maybe<RootQueryToProductConnection>;
  /** An object of the rate Type.  */
  rate?: Maybe<Rate>;
  /**
   * A rate object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  rateBy?: Maybe<Rate>;
  /** Connection between the RootQuery type and the rate type */
  rates?: Maybe<RootQueryToRateConnection>;
  /** Fields of the &#039;ReadingSettings&#039; settings group */
  readingSettings?: Maybe<ReadingSettings>;
  /** Field that resolves as a list of keys and values */
  redirection?: Maybe<Array<Maybe<Redirection>>>;
  /** Connection between the RootQuery type and the EnqueuedScript type */
  registeredScripts?: Maybe<RootQueryToEnqueuedScriptConnection>;
  /** Connection between the RootQuery type and the EnqueuedStylesheet type */
  registeredStylesheets?: Maybe<RootQueryToEnqueuedStylesheetConnection>;
  /** Field that resolves as a list of keys and values */
  relatedPosts?: Maybe<Array<Maybe<Post>>>;
  /** Connection between the RootQuery type and the ContentNode type */
  revisions?: Maybe<RootQueryToRevisionsConnection>;
  /** The number of votes */
  searchwp?: Maybe<Search>;
  /** Returns seo site data */
  seo?: Maybe<SeoConfig>;
  /** An object of the service Type.  */
  service?: Maybe<Service>;
  /**
   * A service object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  serviceBy?: Maybe<Service>;
  /** Connection between the RootQuery type and the service type */
  services?: Maybe<RootQueryToServiceConnection>;
  /** Field that resolves as a list of keys and values */
  shortcode?: Maybe<Shortcode>;
  /** An object of the step Type.  */
  step?: Maybe<Step>;
  /**
   * A step object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  stepBy?: Maybe<Step>;
  /** Connection between the RootQuery type and the step type */
  steps?: Maybe<RootQueryToStepConnection>;
  /** A 0bject */
  tag?: Maybe<Tag>;
  /** Connection between the RootQuery type and the tag type */
  tags?: Maybe<RootQueryToTagConnection>;
  /** Connection between the RootQuery type and the Taxonomy type */
  taxonomies?: Maybe<RootQueryToTaxonomyConnection>;
  /** Fetch a Taxonomy node by unique Identifier */
  taxonomy?: Maybe<Taxonomy>;
  /** A node in a taxonomy used to group and relate content nodes */
  termNode?: Maybe<TermNode>;
  /** Connection between the RootQuery type and the TermNode type */
  terms?: Maybe<RootQueryToTermNodeConnection>;
  /** A Theme object */
  theme?: Maybe<Theme>;
  /** Connection between the RootQuery type and the Theme type */
  themes?: Maybe<RootQueryToThemeConnection>;
  /** Fields of the &#039;ThirdPartySettings&#039; settings group */
  thirdPartySettings?: Maybe<ThirdPartySettings>;
  /** Returns a user */
  user?: Maybe<User>;
  /** Returns a user role */
  userRole?: Maybe<UserRole>;
  /** Connection between the RootQuery type and the UserRole type */
  userRoles?: Maybe<RootQueryToUserRoleConnection>;
  /** Connection between the RootQuery type and the User type */
  users?: Maybe<RootQueryToUserConnection>;
  /** Returns the current user */
  viewer?: Maybe<User>;
  /** Fields of the &#039;WidgetSettings&#039; settings group */
  widgetSettings?: Maybe<WidgetSettings>;
  /** Fields of the &#039;WritingSettings&#039; settings group */
  writingSettings?: Maybe<WritingSettings>;
};


/** The root entry point into the Graph */
export type RootQueryAllLinklibraryArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToLinklibraryConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryCxAlertArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<CxAlertIdType>;
};


/** The root entry point into the Graph */
export type RootQueryCxAlertByArgs = {
  cXAlertId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryCxAlertsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToCxAlertConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryCategoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToCategoryConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryCategoryArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<CategoryIdType>;
};


/** The root entry point into the Graph */
export type RootQueryCommentArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<CommentNodeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToCommentConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryContactArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<ContactIdType>;
};


/** The root entry point into the Graph */
export type RootQueryContactByArgs = {
  contactId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryContactsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToContactConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryContentNodeArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  contentType?: InputMaybe<ContentTypeEnum>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<ContentNodeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToContentNodeConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryContentTypeArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<ContentTypeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryContentTypesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryFaqArgs = {
  faqId?: InputMaybe<Scalars['Float']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryGetFormArgs = {
  formId?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryGraphqlDocumentArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<GraphqlDocumentIdType>;
};


/** The root entry point into the Graph */
export type RootQueryGraphqlDocumentByArgs = {
  graphqlDocumentId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryGraphqlDocumentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToGraphqlDocumentConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryInstructionArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<InstructionIdType>;
};


/** The root entry point into the Graph */
export type RootQueryInstructionByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  instructionId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryInstructionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToInstructionConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryLinkLibraryByCatIdArgs = {
  catId?: InputMaybe<Scalars['Float']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryLinklibraryArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<LinklibraryIdType>;
};


/** The root entry point into the Graph */
export type RootQueryLinklibraryByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  linklibraryId?: InputMaybe<Scalars['Int']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryLocationArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<LocationIdType>;
};


/** The root entry point into the Graph */
export type RootQueryLocationByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  locationId?: InputMaybe<Scalars['Int']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryLocationCategoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToLocationCategoryConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryLocationCategoryArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<LocationCategoryIdType>;
};


/** The root entry point into the Graph */
export type RootQueryLocationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToLocationConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryMediaItemArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<MediaItemIdType>;
};


/** The root entry point into the Graph */
export type RootQueryMediaItemByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  mediaItemId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryMediaItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToMediaItemConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryMenuArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<MenuNodeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryMenuItemArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<MenuItemNodeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryMenuItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToMenuItemConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryMenusArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToMenuConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryNodeArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryNodeByUriArgs = {
  uri: Scalars['String']['input'];
};


/** The root entry point into the Graph */
export type RootQueryPageArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<PageIdType>;
};


/** The root entry point into the Graph */
export type RootQueryPageAlertsArgs = {
  postId?: InputMaybe<Scalars['Float']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryPageByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  pageId?: InputMaybe<Scalars['Int']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToPageConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryPluginArgs = {
  id: Scalars['ID']['input'];
};


/** The root entry point into the Graph */
export type RootQueryPluginsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToPluginConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryPostArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<PostIdType>;
};


/** The root entry point into the Graph */
export type RootQueryPostByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  postId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryPostFormatArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<PostFormatIdType>;
};


/** The root entry point into the Graph */
export type RootQueryPostFormatsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToPostFormatConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryPostPreviewArgs = {
  pageId?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToPostConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryProductArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<ProductIdType>;
};


/** The root entry point into the Graph */
export type RootQueryProductByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  productId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryProductNameArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<ProductNameIdType>;
};


/** The root entry point into the Graph */
export type RootQueryProductNamesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToProductNameConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToProductConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryRateArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<RateIdType>;
};


/** The root entry point into the Graph */
export type RootQueryRateByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  rateId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryRatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToRateConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryRegisteredScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryRegisteredStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryRelatedPostsArgs = {
  postId?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryRevisionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToRevisionsConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQuerySearchwpArgs = {
  offset?: InputMaybe<Scalars['String']['input']>;
  postsPerPage?: InputMaybe<Scalars['String']['input']>;
  terms?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryServiceArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<ServiceIdType>;
};


/** The root entry point into the Graph */
export type RootQueryServiceByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  serviceId?: InputMaybe<Scalars['Int']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryServicesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToServiceConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryShortcodeArgs = {
  shortcode?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryStepArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['ID']['input'];
  idType?: InputMaybe<StepIdType>;
};


/** The root entry point into the Graph */
export type RootQueryStepByArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  stepId?: InputMaybe<Scalars['Int']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryStepsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToStepConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryTagArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<TagIdType>;
};


/** The root entry point into the Graph */
export type RootQueryTagsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToTagConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryTaxonomiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryTaxonomyArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<TaxonomyIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryTermNodeArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<TermNodeIdTypeEnum>;
  taxonomy?: InputMaybe<TaxonomyEnum>;
};


/** The root entry point into the Graph */
export type RootQueryTermsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToTermNodeConnectionWhereArgs>;
};


/** The root entry point into the Graph */
export type RootQueryThemeArgs = {
  id: Scalars['ID']['input'];
};


/** The root entry point into the Graph */
export type RootQueryThemesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryUserArgs = {
  id: Scalars['ID']['input'];
  idType?: InputMaybe<UserNodeIdTypeEnum>;
};


/** The root entry point into the Graph */
export type RootQueryUserRoleArgs = {
  id: Scalars['ID']['input'];
};


/** The root entry point into the Graph */
export type RootQueryUserRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The root entry point into the Graph */
export type RootQueryUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<RootQueryToUserConnectionWhereArgs>;
};

/** Connection between the RootQuery type and the CXAlert type */
export type RootQueryToCxAlertConnection = CxAlertConnection & Connection & {
  __typename?: 'RootQueryToCXAlertConnection';
  /** Edges for the RootQueryToCXAlertConnection connection */
  edges: Array<RootQueryToCxAlertConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<CxAlert>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToCxAlertConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToCxAlertConnectionEdge = CxAlertConnectionEdge & Edge & {
  __typename?: 'RootQueryToCXAlertConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: CxAlert;
};

/** Page Info on the &quot;RootQueryToCXAlertConnection&quot; */
export type RootQueryToCxAlertConnectionPageInfo = CxAlertConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToCXAlertConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToCXAlertConnection connection */
export type RootQueryToCxAlertConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate CXAlerts with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the category type */
export type RootQueryToCategoryConnection = CategoryConnection & Connection & {
  __typename?: 'RootQueryToCategoryConnection';
  /** Edges for the RootQueryToCategoryConnection connection */
  edges: Array<RootQueryToCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Category>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToCategoryConnectionEdge = CategoryConnectionEdge & Edge & {
  __typename?: 'RootQueryToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Category;
};

/** Page Info on the &quot;RootQueryToCategoryConnection&quot; */
export type RootQueryToCategoryConnectionPageInfo = CategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToCategoryConnection connection */
export type RootQueryToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the RootQuery type and the Comment type */
export type RootQueryToCommentConnection = CommentConnection & Connection & {
  __typename?: 'RootQueryToCommentConnection';
  /** Edges for the RootQueryToCommentConnection connection */
  edges: Array<RootQueryToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'RootQueryToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Page Info on the &quot;RootQueryToCommentConnection&quot; */
export type RootQueryToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToCommentConnection connection */
export type RootQueryToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']['input']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the RootQuery type and the contact type */
export type RootQueryToContactConnection = Connection & ContactConnection & {
  __typename?: 'RootQueryToContactConnection';
  /** Edges for the RootQueryToContactConnection connection */
  edges: Array<RootQueryToContactConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Contact>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToContactConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToContactConnectionEdge = ContactConnectionEdge & Edge & {
  __typename?: 'RootQueryToContactConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Contact;
};

/** Page Info on the &quot;RootQueryToContactConnection&quot; */
export type RootQueryToContactConnectionPageInfo = ContactConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToContactConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToContactConnection connection */
export type RootQueryToContactConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate Contacts with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the ContentNode type */
export type RootQueryToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'RootQueryToContentNodeConnection';
  /** Edges for the RootQueryToContentNodeConnection connection */
  edges: Array<RootQueryToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'RootQueryToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Page Info on the &quot;RootQueryToContentNodeConnection&quot; */
export type RootQueryToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToContentNodeConnection connection */
export type RootQueryToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate content nodes with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the ContentType type */
export type RootQueryToContentTypeConnection = Connection & ContentTypeConnection & {
  __typename?: 'RootQueryToContentTypeConnection';
  /** Edges for the RootQueryToContentTypeConnection connection */
  edges: Array<RootQueryToContentTypeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentType>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToContentTypeConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & {
  __typename?: 'RootQueryToContentTypeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentType;
};

/** Page Info on the &quot;RootQueryToContentTypeConnection&quot; */
export type RootQueryToContentTypeConnectionPageInfo = ContentTypeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToContentTypeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the RootQuery type and the EnqueuedScript type */
export type RootQueryToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {
  __typename?: 'RootQueryToEnqueuedScriptConnection';
  /** Edges for the RootQueryToEnqueuedScriptConnection connection */
  edges: Array<RootQueryToEnqueuedScriptConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedScript>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToEnqueuedScriptConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {
  __typename?: 'RootQueryToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedScript;
};

/** Page Info on the &quot;RootQueryToEnqueuedScriptConnection&quot; */
export type RootQueryToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToEnqueuedScriptConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the RootQuery type and the EnqueuedStylesheet type */
export type RootQueryToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {
  __typename?: 'RootQueryToEnqueuedStylesheetConnection';
  /** Edges for the RootQueryToEnqueuedStylesheetConnection connection */
  edges: Array<RootQueryToEnqueuedStylesheetConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedStylesheet>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToEnqueuedStylesheetConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {
  __typename?: 'RootQueryToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedStylesheet;
};

/** Page Info on the &quot;RootQueryToEnqueuedStylesheetConnection&quot; */
export type RootQueryToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToEnqueuedStylesheetConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the RootQuery type and the graphqlDocument type */
export type RootQueryToGraphqlDocumentConnection = Connection & GraphqlDocumentConnection & {
  __typename?: 'RootQueryToGraphqlDocumentConnection';
  /** Edges for the RootQueryToGraphqlDocumentConnection connection */
  edges: Array<RootQueryToGraphqlDocumentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<GraphqlDocument>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToGraphqlDocumentConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToGraphqlDocumentConnectionEdge = Edge & GraphqlDocumentConnectionEdge & {
  __typename?: 'RootQueryToGraphqlDocumentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: GraphqlDocument;
};

/** Page Info on the &quot;RootQueryToGraphqlDocumentConnection&quot; */
export type RootQueryToGraphqlDocumentConnectionPageInfo = GraphqlDocumentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToGraphqlDocumentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToGraphqlDocumentConnection connection */
export type RootQueryToGraphqlDocumentConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate GraphqlDocuments with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the instruction type */
export type RootQueryToInstructionConnection = Connection & InstructionConnection & {
  __typename?: 'RootQueryToInstructionConnection';
  /** Edges for the RootQueryToInstructionConnection connection */
  edges: Array<RootQueryToInstructionConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Instruction>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToInstructionConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToInstructionConnectionEdge = Edge & InstructionConnectionEdge & {
  __typename?: 'RootQueryToInstructionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Instruction;
};

/** Page Info on the &quot;RootQueryToInstructionConnection&quot; */
export type RootQueryToInstructionConnectionPageInfo = InstructionConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToInstructionConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToInstructionConnection connection */
export type RootQueryToInstructionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate Instructions with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the linklibrary type */
export type RootQueryToLinklibraryConnection = Connection & LinklibraryConnection & {
  __typename?: 'RootQueryToLinklibraryConnection';
  /** Edges for the RootQueryToLinklibraryConnection connection */
  edges: Array<RootQueryToLinklibraryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Linklibrary>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToLinklibraryConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToLinklibraryConnectionEdge = Edge & LinklibraryConnectionEdge & {
  __typename?: 'RootQueryToLinklibraryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Linklibrary;
};

/** Page Info on the &quot;RootQueryToLinklibraryConnection&quot; */
export type RootQueryToLinklibraryConnectionPageInfo = LinklibraryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToLinklibraryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToLinklibraryConnection connection */
export type RootQueryToLinklibraryConnectionWhereArgs = {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate Linklibrarys with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the locationCategory type */
export type RootQueryToLocationCategoryConnection = Connection & LocationCategoryConnection & {
  __typename?: 'RootQueryToLocationCategoryConnection';
  /** Edges for the RootQueryToLocationCategoryConnection connection */
  edges: Array<RootQueryToLocationCategoryConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<LocationCategory>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToLocationCategoryConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToLocationCategoryConnectionEdge = Edge & LocationCategoryConnectionEdge & {
  __typename?: 'RootQueryToLocationCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: LocationCategory;
};

/** Page Info on the &quot;RootQueryToLocationCategoryConnection&quot; */
export type RootQueryToLocationCategoryConnectionPageInfo = LocationCategoryConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToLocationCategoryConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToLocationCategoryConnection connection */
export type RootQueryToLocationCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the RootQuery type and the location type */
export type RootQueryToLocationConnection = Connection & LocationConnection & {
  __typename?: 'RootQueryToLocationConnection';
  /** Edges for the RootQueryToLocationConnection connection */
  edges: Array<RootQueryToLocationConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Location>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToLocationConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToLocationConnectionEdge = Edge & LocationConnectionEdge & {
  __typename?: 'RootQueryToLocationConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Location;
};

/** Page Info on the &quot;RootQueryToLocationConnection&quot; */
export type RootQueryToLocationConnectionPageInfo = LocationConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToLocationConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToLocationConnection connection */
export type RootQueryToLocationConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate Locations with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the mediaItem type */
export type RootQueryToMediaItemConnection = Connection & MediaItemConnection & {
  __typename?: 'RootQueryToMediaItemConnection';
  /** Edges for the RootQueryToMediaItemConnection connection */
  edges: Array<RootQueryToMediaItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MediaItem>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToMediaItemConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & {
  __typename?: 'RootQueryToMediaItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: MediaItem;
};

/** Page Info on the &quot;RootQueryToMediaItemConnection&quot; */
export type RootQueryToMediaItemConnectionPageInfo = MediaItemConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToMediaItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToMediaItemConnection connection */
export type RootQueryToMediaItemConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate MediaItems with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the Menu type */
export type RootQueryToMenuConnection = Connection & MenuConnection & {
  __typename?: 'RootQueryToMenuConnection';
  /** Edges for the RootQueryToMenuConnection connection */
  edges: Array<RootQueryToMenuConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Menu>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToMenuConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToMenuConnectionEdge = Edge & MenuConnectionEdge & {
  __typename?: 'RootQueryToMenuConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Menu;
};

/** Page Info on the &quot;RootQueryToMenuConnection&quot; */
export type RootQueryToMenuConnectionPageInfo = MenuConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToMenuConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToMenuConnection connection */
export type RootQueryToMenuConnectionWhereArgs = {
  /** The database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The slug of the menu to query items for */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the MenuItem type */
export type RootQueryToMenuItemConnection = Connection & MenuItemConnection & {
  __typename?: 'RootQueryToMenuItemConnection';
  /** Edges for the RootQueryToMenuItemConnection connection */
  edges: Array<RootQueryToMenuItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MenuItem>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToMenuItemConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToMenuItemConnectionEdge = Edge & MenuItemConnectionEdge & {
  __typename?: 'RootQueryToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: MenuItem;
};

/** Page Info on the &quot;RootQueryToMenuItemConnection&quot; */
export type RootQueryToMenuItemConnectionPageInfo = MenuItemConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToMenuItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToMenuItemConnection connection */
export type RootQueryToMenuItemConnectionWhereArgs = {
  /** The database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the RootQuery type and the page type */
export type RootQueryToPageConnection = Connection & PageConnection & {
  __typename?: 'RootQueryToPageConnection';
  /** Edges for the RootQueryToPageConnection connection */
  edges: Array<RootQueryToPageConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Page>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToPageConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToPageConnectionEdge = Edge & PageConnectionEdge & {
  __typename?: 'RootQueryToPageConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Page;
};

/** Page Info on the &quot;RootQueryToPageConnection&quot; */
export type RootQueryToPageConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToPageConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToPageConnection connection */
export type RootQueryToPageConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate Pages with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the Plugin type */
export type RootQueryToPluginConnection = Connection & PluginConnection & {
  __typename?: 'RootQueryToPluginConnection';
  /** Edges for the RootQueryToPluginConnection connection */
  edges: Array<RootQueryToPluginConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Plugin>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToPluginConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToPluginConnectionEdge = Edge & PluginConnectionEdge & {
  __typename?: 'RootQueryToPluginConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Plugin;
};

/** Page Info on the &quot;RootQueryToPluginConnection&quot; */
export type RootQueryToPluginConnectionPageInfo = PageInfo & PluginConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToPluginConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToPluginConnection connection */
export type RootQueryToPluginConnectionWhereArgs = {
  /** Show plugin based on a keyword search. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve plugins where plugin status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PluginStatusEnum>>>;
  /** Show plugins with a specific status. */
  status?: InputMaybe<PluginStatusEnum>;
};

/** Connection between the RootQuery type and the post type */
export type RootQueryToPostConnection = Connection & PostConnection & {
  __typename?: 'RootQueryToPostConnection';
  /** Edges for the RootQueryToPostConnection connection */
  edges: Array<RootQueryToPostConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToPostConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToPostConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'RootQueryToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Page Info on the &quot;RootQueryToPostConnection&quot; */
export type RootQueryToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToPostConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToPostConnection connection */
export type RootQueryToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate Posts with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the postFormat type */
export type RootQueryToPostFormatConnection = Connection & PostFormatConnection & {
  __typename?: 'RootQueryToPostFormatConnection';
  /** Edges for the RootQueryToPostFormatConnection connection */
  edges: Array<RootQueryToPostFormatConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<PostFormat>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToPostFormatConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToPostFormatConnectionEdge = Edge & PostFormatConnectionEdge & {
  __typename?: 'RootQueryToPostFormatConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: PostFormat;
};

/** Page Info on the &quot;RootQueryToPostFormatConnection&quot; */
export type RootQueryToPostFormatConnectionPageInfo = PageInfo & PostFormatConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToPostFormatConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToPostFormatConnection connection */
export type RootQueryToPostFormatConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the RootQuery type and the product type */
export type RootQueryToProductConnection = Connection & ProductConnection & {
  __typename?: 'RootQueryToProductConnection';
  /** Edges for the RootQueryToProductConnection connection */
  edges: Array<RootQueryToProductConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Product>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToProductConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToProductConnectionEdge = Edge & ProductConnectionEdge & {
  __typename?: 'RootQueryToProductConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Product;
};

/** Page Info on the &quot;RootQueryToProductConnection&quot; */
export type RootQueryToProductConnectionPageInfo = PageInfo & ProductConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToProductConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToProductConnection connection */
export type RootQueryToProductConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate Products with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the productName type */
export type RootQueryToProductNameConnection = Connection & ProductNameConnection & {
  __typename?: 'RootQueryToProductNameConnection';
  /** Edges for the RootQueryToProductNameConnection connection */
  edges: Array<RootQueryToProductNameConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ProductName>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToProductNameConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToProductNameConnectionEdge = Edge & ProductNameConnectionEdge & {
  __typename?: 'RootQueryToProductNameConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ProductName;
};

/** Page Info on the &quot;RootQueryToProductNameConnection&quot; */
export type RootQueryToProductNameConnectionPageInfo = PageInfo & ProductNameConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToProductNameConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToProductNameConnection connection */
export type RootQueryToProductNameConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the RootQuery type and the rate type */
export type RootQueryToRateConnection = Connection & RateConnection & {
  __typename?: 'RootQueryToRateConnection';
  /** Edges for the RootQueryToRateConnection connection */
  edges: Array<RootQueryToRateConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Rate>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToRateConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToRateConnectionEdge = Edge & RateConnectionEdge & {
  __typename?: 'RootQueryToRateConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Rate;
};

/** Page Info on the &quot;RootQueryToRateConnection&quot; */
export type RootQueryToRateConnectionPageInfo = PageInfo & RateConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToRateConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToRateConnection connection */
export type RootQueryToRateConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate Rates with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the ContentNode type */
export type RootQueryToRevisionsConnection = Connection & ContentNodeConnection & {
  __typename?: 'RootQueryToRevisionsConnection';
  /** Edges for the RootQueryToRevisionsConnection connection */
  edges: Array<RootQueryToRevisionsConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToRevisionsConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToRevisionsConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'RootQueryToRevisionsConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Page Info on the &quot;RootQueryToRevisionsConnection&quot; */
export type RootQueryToRevisionsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'RootQueryToRevisionsConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToRevisionsConnection connection */
export type RootQueryToRevisionsConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the service type */
export type RootQueryToServiceConnection = Connection & ServiceConnection & {
  __typename?: 'RootQueryToServiceConnection';
  /** Edges for the RootQueryToServiceConnection connection */
  edges: Array<RootQueryToServiceConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Service>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToServiceConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToServiceConnectionEdge = Edge & ServiceConnectionEdge & {
  __typename?: 'RootQueryToServiceConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Service;
};

/** Page Info on the &quot;RootQueryToServiceConnection&quot; */
export type RootQueryToServiceConnectionPageInfo = PageInfo & ServiceConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToServiceConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToServiceConnection connection */
export type RootQueryToServiceConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate Services with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the step type */
export type RootQueryToStepConnection = Connection & StepConnection & {
  __typename?: 'RootQueryToStepConnection';
  /** Edges for the RootQueryToStepConnection connection */
  edges: Array<RootQueryToStepConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Step>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToStepConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToStepConnectionEdge = Edge & StepConnectionEdge & {
  __typename?: 'RootQueryToStepConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Step;
};

/** Page Info on the &quot;RootQueryToStepConnection&quot; */
export type RootQueryToStepConnectionPageInfo = PageInfo & StepConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToStepConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToStepConnection connection */
export type RootQueryToStepConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Paginate Steps with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the RootQuery type and the tag type */
export type RootQueryToTagConnection = Connection & TagConnection & {
  __typename?: 'RootQueryToTagConnection';
  /** Edges for the RootQueryToTagConnection connection */
  edges: Array<RootQueryToTagConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Tag>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToTagConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToTagConnectionEdge = Edge & TagConnectionEdge & {
  __typename?: 'RootQueryToTagConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Tag;
};

/** Page Info on the &quot;RootQueryToTagConnection&quot; */
export type RootQueryToTagConnectionPageInfo = PageInfo & TagConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToTagConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToTagConnection connection */
export type RootQueryToTagConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the RootQuery type and the Taxonomy type */
export type RootQueryToTaxonomyConnection = Connection & TaxonomyConnection & {
  __typename?: 'RootQueryToTaxonomyConnection';
  /** Edges for the RootQueryToTaxonomyConnection connection */
  edges: Array<RootQueryToTaxonomyConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Taxonomy>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToTaxonomyConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToTaxonomyConnectionEdge = Edge & TaxonomyConnectionEdge & {
  __typename?: 'RootQueryToTaxonomyConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Taxonomy;
};

/** Page Info on the &quot;RootQueryToTaxonomyConnection&quot; */
export type RootQueryToTaxonomyConnectionPageInfo = PageInfo & TaxonomyConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToTaxonomyConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the RootQuery type and the TermNode type */
export type RootQueryToTermNodeConnection = Connection & TermNodeConnection & {
  __typename?: 'RootQueryToTermNodeConnection';
  /** Edges for the RootQueryToTermNodeConnection connection */
  edges: Array<RootQueryToTermNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<TermNode>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToTermNodeConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {
  __typename?: 'RootQueryToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: TermNode;
};

/** Page Info on the &quot;RootQueryToTermNodeConnection&quot; */
export type RootQueryToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToTermNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToTermNodeConnection connection */
export type RootQueryToTermNodeConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']['input']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']['input']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']['input']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']['input']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']['input']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomyId?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Connection between the RootQuery type and the Theme type */
export type RootQueryToThemeConnection = Connection & ThemeConnection & {
  __typename?: 'RootQueryToThemeConnection';
  /** Edges for the RootQueryToThemeConnection connection */
  edges: Array<RootQueryToThemeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Theme>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToThemeConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToThemeConnectionEdge = Edge & ThemeConnectionEdge & {
  __typename?: 'RootQueryToThemeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Theme;
};

/** Page Info on the &quot;RootQueryToThemeConnection&quot; */
export type RootQueryToThemeConnectionPageInfo = PageInfo & ThemeConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToThemeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the RootQuery type and the User type */
export type RootQueryToUserConnection = Connection & UserConnection & {
  __typename?: 'RootQueryToUserConnection';
  /** Edges for the RootQueryToUserConnection connection */
  edges: Array<RootQueryToUserConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<User>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToUserConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToUserConnectionEdge = Edge & UserConnectionEdge & {
  __typename?: 'RootQueryToUserConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: User;
};

/** Page Info on the &quot;RootQueryToUserConnection&quot; */
export type RootQueryToUserConnectionPageInfo = PageInfo & UserConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToUserConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the RootQueryToUserConnection connection */
export type RootQueryToUserConnectionWhereArgs = {
  /** Array of userIds to exclude. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** Pass an array of post types to filter results to users who have published posts in those post types. */
  hasPublishedPosts?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of userIds to include. */
  include?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** The user login. */
  login?: InputMaybe<Scalars['String']['input']>;
  /** An array of logins to include. Users matching one of these logins will be included in results. */
  loginIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** An array of logins to exclude. Users matching one of these logins will not be included in results. */
  loginNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** The user nicename. */
  nicename?: InputMaybe<Scalars['String']['input']>;
  /** An array of nicenames to include. Users matching one of these nicenames will be included in results. */
  nicenameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** An array of nicenames to exclude. Users matching one of these nicenames will not be included in results. */
  nicenameNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Paginate users with offsets */
  offsetPagination?: InputMaybe<OffsetPagination>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<UsersConnectionOrderbyInput>>>;
  /** An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role. */
  role?: InputMaybe<UserRoleEnum>;
  /** An array of role names. Matched users must have at least one of these roles. */
  roleIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;
  /** An array of role names to exclude. Users matching one or more of these roles will not be included in results. */
  roleNotIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;
  /** Search keyword. Searches for possible string matches on columns. When "searchColumns" is left empty, it tries to determine which column to search in based on search string. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'. */
  searchColumns?: InputMaybe<Array<InputMaybe<UsersConnectionSearchColumnEnum>>>;
};

/** Connection between the RootQuery type and the UserRole type */
export type RootQueryToUserRoleConnection = Connection & UserRoleConnection & {
  __typename?: 'RootQueryToUserRoleConnection';
  /** Edges for the RootQueryToUserRoleConnection connection */
  edges: Array<RootQueryToUserRoleConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<UserRole>;
  /** Information about pagination in a connection. */
  pageInfo: RootQueryToUserRoleConnectionPageInfo;
};

/** An edge in a connection */
export type RootQueryToUserRoleConnectionEdge = Edge & UserRoleConnectionEdge & {
  __typename?: 'RootQueryToUserRoleConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: UserRole;
};

/** Page Info on the &quot;RootQueryToUserRoleConnection&quot; */
export type RootQueryToUserRoleConnectionPageInfo = PageInfo & UserRoleConnectionPageInfo & WpPageInfo & {
  __typename?: 'RootQueryToUserRoleConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Yoast SEO breadcrumb config */
export type SeoBreadcrumbs = {
  __typename?: 'SEOBreadcrumbs';
  archivePrefix?: Maybe<Scalars['String']['output']>;
  boldLast?: Maybe<Scalars['Boolean']['output']>;
  enabled?: Maybe<Scalars['Boolean']['output']>;
  homeText?: Maybe<Scalars['String']['output']>;
  notFoundText?: Maybe<Scalars['String']['output']>;
  prefix?: Maybe<Scalars['String']['output']>;
  searchPrefix?: Maybe<Scalars['String']['output']>;
  separator?: Maybe<Scalars['String']['output']>;
  showBlogPage?: Maybe<Scalars['Boolean']['output']>;
};

/** Types of cards */
export enum SeoCardType {
  Summary = 'summary',
  SummaryLargeImage = 'summary_large_image'
}

/** The Yoast SEO site level configuration data */
export type SeoConfig = {
  __typename?: 'SEOConfig';
  breadcrumbs?: Maybe<SeoBreadcrumbs>;
  contentTypes?: Maybe<SeoContentTypes>;
  meta?: Maybe<SeoGlobalMeta>;
  openGraph?: Maybe<SeoOpenGraph>;
  redirects?: Maybe<Array<Maybe<SeoRedirect>>>;
  schema?: Maybe<SeoSchema>;
  social?: Maybe<SeoSocial>;
  webmaster?: Maybe<SeoWebmaster>;
};

/** The Yoast SEO search appearance content types fields */
export type SeoContentType = {
  __typename?: 'SEOContentType';
  archive?: Maybe<SeoContentTypeArchive>;
  metaDesc?: Maybe<Scalars['String']['output']>;
  metaRobotsNoindex?: Maybe<Scalars['Boolean']['output']>;
  schema?: Maybe<SeoPageInfoSchema>;
  schemaType?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** The Yoast SEO search appearance content types fields */
export type SeoContentTypeArchive = {
  __typename?: 'SEOContentTypeArchive';
  archiveLink?: Maybe<Scalars['String']['output']>;
  breadcrumbTitle?: Maybe<Scalars['String']['output']>;
  fullHead?: Maybe<Scalars['String']['output']>;
  hasArchive?: Maybe<Scalars['Boolean']['output']>;
  metaDesc?: Maybe<Scalars['String']['output']>;
  metaRobotsFollow?: Maybe<Scalars['String']['output']>;
  metaRobotsIndex?: Maybe<Scalars['String']['output']>;
  metaRobotsNofollow?: Maybe<Scalars['Boolean']['output']>;
  metaRobotsNoindex?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** The Yoast SEO search appearance content types */
export type SeoContentTypes = {
  __typename?: 'SEOContentTypes';
  cXAlert?: Maybe<SeoContentType>;
  contact?: Maybe<SeoContentType>;
  graphqlDocument?: Maybe<SeoContentType>;
  instruction?: Maybe<SeoContentType>;
  linklibrary?: Maybe<SeoContentType>;
  location?: Maybe<SeoContentType>;
  mediaItem?: Maybe<SeoContentType>;
  page?: Maybe<SeoContentType>;
  post?: Maybe<SeoContentType>;
  product?: Maybe<SeoContentType>;
  rate?: Maybe<SeoContentType>;
  service?: Maybe<SeoContentType>;
  step?: Maybe<SeoContentType>;
};

/** The Yoast SEO meta data */
export type SeoGlobalMeta = {
  __typename?: 'SEOGlobalMeta';
  author?: Maybe<SeoGlobalMetaAuthor>;
  config?: Maybe<SeoGlobalMetaConfig>;
  date?: Maybe<SeoGlobalMetaDate>;
  homepage?: Maybe<SeoGlobalMetaHome>;
  notFound?: Maybe<SeoGlobalMeta404>;
};

/** The Yoast SEO meta 404 data */
export type SeoGlobalMeta404 = {
  __typename?: 'SEOGlobalMeta404';
  breadcrumb?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** The Yoast SEO Author data */
export type SeoGlobalMetaAuthor = {
  __typename?: 'SEOGlobalMetaAuthor';
  description?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** The Yoast SEO meta config data */
export type SeoGlobalMetaConfig = {
  __typename?: 'SEOGlobalMetaConfig';
  separator?: Maybe<Scalars['String']['output']>;
};

/** The Yoast SEO Date data */
export type SeoGlobalMetaDate = {
  __typename?: 'SEOGlobalMetaDate';
  description?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** The Yoast SEO homepage data */
export type SeoGlobalMetaHome = {
  __typename?: 'SEOGlobalMetaHome';
  description?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** The Open Graph data */
export type SeoOpenGraph = {
  __typename?: 'SEOOpenGraph';
  defaultImage?: Maybe<MediaItem>;
  frontPage?: Maybe<SeoOpenGraphFrontPage>;
};

/** The Open Graph Front page data */
export type SeoOpenGraphFrontPage = {
  __typename?: 'SEOOpenGraphFrontPage';
  description?: Maybe<Scalars['String']['output']>;
  image?: Maybe<MediaItem>;
  title?: Maybe<Scalars['String']['output']>;
};

/** The Schema for post type */
export type SeoPageInfoSchema = {
  __typename?: 'SEOPageInfoSchema';
  raw?: Maybe<Scalars['String']['output']>;
};

export type SeoPostTypeBreadcrumbs = {
  __typename?: 'SEOPostTypeBreadcrumbs';
  text?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

/** The page info SEO details */
export type SeoPostTypePageInfo = {
  __typename?: 'SEOPostTypePageInfo';
  schema?: Maybe<SeoPageInfoSchema>;
};

/** The Schema types */
export type SeoPostTypeSchema = {
  __typename?: 'SEOPostTypeSchema';
  articleType?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  pageType?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  raw?: Maybe<Scalars['String']['output']>;
};

/** The Yoast redirect data  (Yoast Premium only) */
export type SeoRedirect = {
  __typename?: 'SEORedirect';
  format?: Maybe<Scalars['String']['output']>;
  origin?: Maybe<Scalars['String']['output']>;
  target?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['Int']['output']>;
};

/** The Yoast SEO schema data */
export type SeoSchema = {
  __typename?: 'SEOSchema';
  companyLogo?: Maybe<MediaItem>;
  companyName?: Maybe<Scalars['String']['output']>;
  companyOrPerson?: Maybe<Scalars['String']['output']>;
  homeUrl?: Maybe<Scalars['String']['output']>;
  inLanguage?: Maybe<Scalars['String']['output']>;
  logo?: Maybe<MediaItem>;
  personLogo?: Maybe<MediaItem>;
  personName?: Maybe<Scalars['String']['output']>;
  siteName?: Maybe<Scalars['String']['output']>;
  siteUrl?: Maybe<Scalars['String']['output']>;
  wordpressSiteName?: Maybe<Scalars['String']['output']>;
};

/** The Yoast SEO Social media links */
export type SeoSocial = {
  __typename?: 'SEOSocial';
  facebook?: Maybe<SeoSocialFacebook>;
  instagram?: Maybe<SeoSocialInstagram>;
  linkedIn?: Maybe<SeoSocialLinkedIn>;
  mySpace?: Maybe<SeoSocialMySpace>;
  otherSocials?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  pinterest?: Maybe<SeoSocialPinterest>;
  twitter?: Maybe<SeoSocialTwitter>;
  wikipedia?: Maybe<SeoSocialWikipedia>;
  youTube?: Maybe<SeoSocialYoutube>;
};

export type SeoSocialFacebook = {
  __typename?: 'SEOSocialFacebook';
  defaultImage?: Maybe<MediaItem>;
  url?: Maybe<Scalars['String']['output']>;
};

export type SeoSocialInstagram = {
  __typename?: 'SEOSocialInstagram';
  url?: Maybe<Scalars['String']['output']>;
};

export type SeoSocialLinkedIn = {
  __typename?: 'SEOSocialLinkedIn';
  url?: Maybe<Scalars['String']['output']>;
};

export type SeoSocialMySpace = {
  __typename?: 'SEOSocialMySpace';
  url?: Maybe<Scalars['String']['output']>;
};

export type SeoSocialPinterest = {
  __typename?: 'SEOSocialPinterest';
  metaTag?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type SeoSocialTwitter = {
  __typename?: 'SEOSocialTwitter';
  cardType?: Maybe<SeoCardType>;
  username?: Maybe<Scalars['String']['output']>;
};

export type SeoSocialWikipedia = {
  __typename?: 'SEOSocialWikipedia';
  url?: Maybe<Scalars['String']['output']>;
};

export type SeoSocialYoutube = {
  __typename?: 'SEOSocialYoutube';
  url?: Maybe<Scalars['String']['output']>;
};

/** The Schema types for Taxonomy */
export type SeoTaxonomySchema = {
  __typename?: 'SEOTaxonomySchema';
  raw?: Maybe<Scalars['String']['output']>;
};

export type SeoUser = {
  __typename?: 'SEOUser';
  breadcrumbTitle?: Maybe<Scalars['String']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
  fullHead?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Scalars['String']['output']>;
  metaDesc?: Maybe<Scalars['String']['output']>;
  metaRobotsNofollow?: Maybe<Scalars['String']['output']>;
  metaRobotsNoindex?: Maybe<Scalars['String']['output']>;
  opengraphDescription?: Maybe<Scalars['String']['output']>;
  opengraphImage?: Maybe<MediaItem>;
  opengraphTitle?: Maybe<Scalars['String']['output']>;
  region?: Maybe<Scalars['String']['output']>;
  schema?: Maybe<SeoUserSchema>;
  social?: Maybe<SeoUserSocial>;
  title?: Maybe<Scalars['String']['output']>;
  twitterDescription?: Maybe<Scalars['String']['output']>;
  twitterImage?: Maybe<MediaItem>;
  twitterTitle?: Maybe<Scalars['String']['output']>;
};

/** The Schema types for User */
export type SeoUserSchema = {
  __typename?: 'SEOUserSchema';
  articleType?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  pageType?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  raw?: Maybe<Scalars['String']['output']>;
};

export type SeoUserSocial = {
  __typename?: 'SEOUserSocial';
  facebook?: Maybe<Scalars['String']['output']>;
  instagram?: Maybe<Scalars['String']['output']>;
  linkedIn?: Maybe<Scalars['String']['output']>;
  mySpace?: Maybe<Scalars['String']['output']>;
  pinterest?: Maybe<Scalars['String']['output']>;
  soundCloud?: Maybe<Scalars['String']['output']>;
  twitter?: Maybe<Scalars['String']['output']>;
  wikipedia?: Maybe<Scalars['String']['output']>;
  youTube?: Maybe<Scalars['String']['output']>;
};

/** The Yoast SEO  webmaster fields */
export type SeoWebmaster = {
  __typename?: 'SEOWebmaster';
  baiduVerify?: Maybe<Scalars['String']['output']>;
  googleVerify?: Maybe<Scalars['String']['output']>;
  msVerify?: Maybe<Scalars['String']['output']>;
  yandexVerify?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type SafeSvgSvgIcon = EditorBlock & {
  __typename?: 'SafeSvgSvgIcon';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<SafeSvgSvgIconAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type SafeSvgSvgIconAttributes = {
  __typename?: 'SafeSvgSvgIconAttributes';
  /** The &quot;alignment&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  alignment?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;dimensionHeight&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  dimensionHeight?: Maybe<Scalars['Float']['output']>;
  /** The &quot;dimensionWidth&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  dimensionWidth?: Maybe<Scalars['Float']['output']>;
  /** The &quot;imageHeight&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  imageHeight?: Maybe<Scalars['Float']['output']>;
  /** The &quot;imageID&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  imageID?: Maybe<Scalars['Float']['output']>;
  /** The &quot;imageSizes&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  imageSizes?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;imageWidth&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  imageWidth?: Maybe<Scalars['Float']['output']>;
  /** The &quot;lock&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;svgURL&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  svgURL?: Maybe<Scalars['String']['output']>;
  /** The &quot;type&quot; field on the &quot;SafeSvgSvgIcon&quot; block */
  type?: Maybe<Scalars['String']['output']>;
};

/** The strategy to use when loading the script */
export enum ScriptLoadingStrategyEnum {
  /** Use the script `async` attribute */
  Async = 'ASYNC',
  /** Use the script `defer` attribute */
  Defer = 'DEFER'
}

/** Search Data */
export type Search = {
  __typename?: 'Search';
  /** List of Posts */
  results?: Maybe<Array<Maybe<Post>>>;
  /** Total Results */
  total?: Maybe<Scalars['String']['output']>;
};

/** Input for the sendPasswordResetEmail mutation. */
export type SendPasswordResetEmailInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains the user's username or email address. */
  username: Scalars['String']['input'];
};

/** The payload for the sendPasswordResetEmail mutation. */
export type SendPasswordResetEmailPayload = {
  __typename?: 'SendPasswordResetEmailPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Whether the mutation completed successfully. This does NOT necessarily mean that an email was sent. */
  success?: Maybe<Scalars['Boolean']['output']>;
  /**
   * The user that the password reset email was sent to
   * @deprecated This field will be removed in a future version of WPGraphQL
   */
  user?: Maybe<User>;
};

/** The service type */
export type Service = ContentNode & DatabaseIdentifier & Node & NodeWithAuthor & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {
  __typename?: 'Service';
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  displayName?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the service object. */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  /** Connection between the Service type and the service type */
  preview?: Maybe<ServiceToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  serviceId: Scalars['Int']['output'];
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The service type */
export type ServiceEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The service type */
export type ServiceEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The service type */
export type ServiceTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Connection to service Nodes */
export type ServiceConnection = {
  /** A list of edges (relational context) between RootQuery and connected service Nodes */
  edges: Array<ServiceConnectionEdge>;
  /** A list of connected service Nodes */
  nodes: Array<Service>;
  /** Information about pagination in a connection. */
  pageInfo: ServiceConnectionPageInfo;
};

/** Edge between a Node and a connected service */
export type ServiceConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected service Node */
  node: Service;
};

/** Page Info on the connected ServiceConnectionEdge */
export type ServiceConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum ServiceIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the Service type and the service type */
export type ServiceToPreviewConnectionEdge = Edge & OneToOneConnection & ServiceConnectionEdge & {
  __typename?: 'ServiceToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Service;
};

/** All of the registered settings */
export type Settings = {
  __typename?: 'Settings';
  /** Settings of the the string Settings Group */
  atlasContentModelerSettingsSettingsAtlasContentModelerUsageTracking?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  discussionSettingsDefaultCommentStatus?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  discussionSettingsDefaultPingStatus?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  footerSettingsFooterSettings?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsDateFormat?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsDescription?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsEmail?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsLanguage?: Maybe<Scalars['String']['output']>;
  /** Settings of the the integer Settings Group */
  generalSettingsStartOfWeek?: Maybe<Scalars['Int']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsTimeFormat?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsTimezone?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsTitle?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  generalSettingsUrl?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  genesisBlocksGlobalSettingsSettingsGenesisBlocksMailchimpApiKey?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  genesisBlocksGlobalSettingsSettingsGenesisProSubscriptionKey?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  headerSettingsHeaderSettings?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  locationSettingsLocationSettings?: Maybe<Scalars['String']['output']>;
  /** Settings of the the integer Settings Group */
  readingSettingsPageForPosts?: Maybe<Scalars['Int']['output']>;
  /** Settings of the the integer Settings Group */
  readingSettingsPageOnFront?: Maybe<Scalars['Int']['output']>;
  /** Settings of the the integer Settings Group */
  readingSettingsPostsPerPage?: Maybe<Scalars['Int']['output']>;
  /** Settings of the the string Settings Group */
  readingSettingsShowOnFront?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  thirdPartySettingsThirdPartySettings?: Maybe<Scalars['String']['output']>;
  /** Settings of the the string Settings Group */
  widgetSettingsWidgetSettings?: Maybe<Scalars['String']['output']>;
  /** Settings of the the integer Settings Group */
  writingSettingsDefaultCategory?: Maybe<Scalars['Int']['output']>;
  /** Settings of the the string Settings Group */
  writingSettingsDefaultPostFormat?: Maybe<Scalars['String']['output']>;
  /** Settings of the the boolean Settings Group */
  writingSettingsUseSmilies?: Maybe<Scalars['Boolean']['output']>;
};

/** Shortcodes */
export type Shortcode = {
  __typename?: 'Shortcode';
  /** Shortcode Content */
  content?: Maybe<Scalars['String']['output']>;
};

/** The step type */
export type Step = ContentNode & DatabaseIdentifier & Node & NodeWithAuthor & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & {
  __typename?: 'Step';
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']['output']>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String']['output'];
  copy?: Maybe<Scalars['String']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']['output']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']['output']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']['output']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']['output']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<ContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']['output']>;
  heading?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the step object. */
  id: Scalars['ID']['output'];
  image?: Maybe<MediaItem>;
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']['output']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']['output']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  /** Connection between the Step type and the step type */
  preview?: Maybe<StepToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']['output']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']['output']>;
  /** The Yoast SEO data of the ContentNode */
  seo?: Maybe<PostTypeSeo>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']['output']>;
  step?: Maybe<Scalars['Float']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  stepId: Scalars['Int']['output'];
  /** The template assigned to the node */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The step type */
export type StepEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The step type */
export type StepEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The step type */
export type StepTitleArgs = {
  format?: InputMaybe<PostObjectFieldFormatEnum>;
};

/** Connection to step Nodes */
export type StepConnection = {
  /** A list of edges (relational context) between RootQuery and connected step Nodes */
  edges: Array<StepConnectionEdge>;
  /** A list of connected step Nodes */
  nodes: Array<Step>;
  /** Information about pagination in a connection. */
  pageInfo: StepConnectionPageInfo;
};

/** Edge between a Node and a connected step */
export type StepConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected step Node */
  node: Step;
};

/** Page Info on the connected StepConnectionEdge */
export type StepConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum StepIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the Step type and the step type */
export type StepToPreviewConnectionEdge = Edge & OneToOneConnection & StepConnectionEdge & {
  __typename?: 'StepToPreviewConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Step;
};

/** A block used for editing the site */
export type TablepressTable = EditorBlock & {
  __typename?: 'TablepressTable';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<TablepressTableAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type TablepressTableAttributes = {
  __typename?: 'TablepressTableAttributes';
  /** The &quot;align&quot; field on the &quot;TablepressTable&quot; block */
  align?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;TablepressTable&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;id&quot; field on the &quot;TablepressTable&quot; block */
  id?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;TablepressTable&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;parameters&quot; field on the &quot;TablepressTable&quot; block */
  parameters?: Maybe<Scalars['String']['output']>;
};

/** The tag type */
export type Tag = DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable & {
  __typename?: 'Tag';
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the Tag type and the ContentNode type */
  contentNodes?: Maybe<TagToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /** Connection between the Tag type and the post type */
  posts?: Maybe<TagToPostConnection>;
  /** The Yoast SEO data of the Tags taxonomy. */
  seo?: Maybe<TaxonomySeo>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  tagId?: Maybe<Scalars['Int']['output']>;
  /** Connection between the Tag type and the Taxonomy type */
  taxonomy?: Maybe<TagToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** The tag type */
export type TagContentNodesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TagToContentNodeConnectionWhereArgs>;
};


/** The tag type */
export type TagEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The tag type */
export type TagEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** The tag type */
export type TagPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TagToPostConnectionWhereArgs>;
};

/** Connection to tag Nodes */
export type TagConnection = {
  /** A list of edges (relational context) between RootQuery and connected tag Nodes */
  edges: Array<TagConnectionEdge>;
  /** A list of connected tag Nodes */
  nodes: Array<Tag>;
  /** Information about pagination in a connection. */
  pageInfo: TagConnectionPageInfo;
};

/** Edge between a Node and a connected tag */
export type TagConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected tag Node */
  node: Tag;
};

/** Page Info on the connected TagConnectionEdge */
export type TagConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum TagIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the Tag type and the ContentNode type */
export type TagToContentNodeConnection = Connection & ContentNodeConnection & {
  __typename?: 'TagToContentNodeConnection';
  /** Edges for the TagToContentNodeConnection connection */
  edges: Array<TagToContentNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: TagToContentNodeConnectionPageInfo;
};

/** An edge in a connection */
export type TagToContentNodeConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'TagToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Page Info on the &quot;TagToContentNodeConnection&quot; */
export type TagToContentNodeConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'TagToContentNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the TagToContentNodeConnection connection */
export type TagToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfTagEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Tag type and the post type */
export type TagToPostConnection = Connection & PostConnection & {
  __typename?: 'TagToPostConnection';
  /** Edges for the TagToPostConnection connection */
  edges: Array<TagToPostConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: TagToPostConnectionPageInfo;
};

/** An edge in a connection */
export type TagToPostConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'TagToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Page Info on the &quot;TagToPostConnection&quot; */
export type TagToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'TagToPostConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the TagToPostConnection connection */
export type TagToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the Tag type and the Taxonomy type */
export type TagToTaxonomyConnectionEdge = Edge & OneToOneConnection & TaxonomyConnectionEdge & {
  __typename?: 'TagToTaxonomyConnectionEdge';
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The node of the connection, without the edges */
  node: Taxonomy;
};

/** A taxonomy object */
export type Taxonomy = Node & {
  __typename?: 'Taxonomy';
  /** List of Content Types associated with the Taxonomy */
  connectedContentTypes?: Maybe<TaxonomyToContentTypeConnection>;
  /** List of Term Nodes associated with the Taxonomy */
  connectedTerms?: Maybe<TaxonomyToTermNodeConnection>;
  /** Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description */
  description?: Maybe<Scalars['String']['output']>;
  /** The plural name of the post type within the GraphQL Schema. */
  graphqlPluralName?: Maybe<Scalars['String']['output']>;
  /** The singular name of the post type within the GraphQL Schema. */
  graphqlSingleName?: Maybe<Scalars['String']['output']>;
  /** Whether the taxonomy is hierarchical */
  hierarchical?: Maybe<Scalars['Boolean']['output']>;
  /** The globally unique identifier of the taxonomy object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Name of the taxonomy shown in the menu. Usually plural. */
  label?: Maybe<Scalars['String']['output']>;
  /** The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label */
  name?: Maybe<Scalars['String']['output']>;
  /** Whether the taxonomy is publicly queryable */
  public?: Maybe<Scalars['Boolean']['output']>;
  /** Name of content type to display in REST API &quot;wp/v2&quot; namespace. */
  restBase?: Maybe<Scalars['String']['output']>;
  /** The REST Controller class assigned to handling this content type. */
  restControllerClass?: Maybe<Scalars['String']['output']>;
  /** Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud */
  showCloud?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to display a column for the taxonomy on its post type listing screens. */
  showInAdminColumn?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to add the post type to the GraphQL Schema. */
  showInGraphql?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to show the taxonomy in the admin menu */
  showInMenu?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the taxonomy is available for selection in navigation menus. */
  showInNavMenus?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to show the taxonomy in the quick/bulk edit panel. */
  showInQuickEdit?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace. */
  showInRest?: Maybe<Scalars['Boolean']['output']>;
  /** Whether to generate and allow a UI for managing terms in this taxonomy in the admin */
  showUi?: Maybe<Scalars['Boolean']['output']>;
};


/** A taxonomy object */
export type TaxonomyConnectedContentTypesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A taxonomy object */
export type TaxonomyConnectedTermsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Connection to Taxonomy Nodes */
export type TaxonomyConnection = {
  /** A list of edges (relational context) between RootQuery and connected Taxonomy Nodes */
  edges: Array<TaxonomyConnectionEdge>;
  /** A list of connected Taxonomy Nodes */
  nodes: Array<Taxonomy>;
  /** Information about pagination in a connection. */
  pageInfo: TaxonomyConnectionPageInfo;
};

/** Edge between a Node and a connected Taxonomy */
export type TaxonomyConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Taxonomy Node */
  node: Taxonomy;
};

/** Page Info on the connected TaxonomyConnectionEdge */
export type TaxonomyConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Allowed taxonomies */
export enum TaxonomyEnum {
  /** Taxonomy enum category */
  Category = 'CATEGORY',
  /** Taxonomy enum wpsl_store_category */
  Locationcategory = 'LOCATIONCATEGORY',
  /** Taxonomy enum post_format */
  Postformat = 'POSTFORMAT',
  /** Taxonomy enum productname */
  Productname = 'PRODUCTNAME',
  /** Taxonomy enum post_tag */
  Tag = 'TAG'
}

/** The Type of Identifier used to fetch a single Taxonomy node. To be used along with the "id" field. Default is "ID". */
export enum TaxonomyIdTypeEnum {
  /** The globally unique ID */
  Id = 'ID',
  /** The name of the taxonomy */
  Name = 'NAME'
}

export type TaxonomySeo = {
  __typename?: 'TaxonomySEO';
  breadcrumbs?: Maybe<Array<Maybe<SeoPostTypeBreadcrumbs>>>;
  canonical?: Maybe<Scalars['String']['output']>;
  cornerstone?: Maybe<Scalars['Boolean']['output']>;
  focuskw?: Maybe<Scalars['String']['output']>;
  fullHead?: Maybe<Scalars['String']['output']>;
  metaDesc?: Maybe<Scalars['String']['output']>;
  metaKeywords?: Maybe<Scalars['String']['output']>;
  metaRobotsNofollow?: Maybe<Scalars['String']['output']>;
  metaRobotsNoindex?: Maybe<Scalars['String']['output']>;
  opengraphAuthor?: Maybe<Scalars['String']['output']>;
  opengraphDescription?: Maybe<Scalars['String']['output']>;
  opengraphImage?: Maybe<MediaItem>;
  opengraphModifiedTime?: Maybe<Scalars['String']['output']>;
  opengraphPublishedTime?: Maybe<Scalars['String']['output']>;
  opengraphPublisher?: Maybe<Scalars['String']['output']>;
  opengraphSiteName?: Maybe<Scalars['String']['output']>;
  opengraphTitle?: Maybe<Scalars['String']['output']>;
  opengraphType?: Maybe<Scalars['String']['output']>;
  opengraphUrl?: Maybe<Scalars['String']['output']>;
  schema?: Maybe<SeoTaxonomySchema>;
  title?: Maybe<Scalars['String']['output']>;
  twitterDescription?: Maybe<Scalars['String']['output']>;
  twitterImage?: Maybe<MediaItem>;
  twitterTitle?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Taxonomy type and the ContentType type */
export type TaxonomyToContentTypeConnection = Connection & ContentTypeConnection & {
  __typename?: 'TaxonomyToContentTypeConnection';
  /** Edges for the TaxonomyToContentTypeConnection connection */
  edges: Array<TaxonomyToContentTypeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentType>;
  /** Information about pagination in a connection. */
  pageInfo: TaxonomyToContentTypeConnectionPageInfo;
};

/** An edge in a connection */
export type TaxonomyToContentTypeConnectionEdge = ContentTypeConnectionEdge & Edge & {
  __typename?: 'TaxonomyToContentTypeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentType;
};

/** Page Info on the &quot;TaxonomyToContentTypeConnection&quot; */
export type TaxonomyToContentTypeConnectionPageInfo = ContentTypeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'TaxonomyToContentTypeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the Taxonomy type and the TermNode type */
export type TaxonomyToTermNodeConnection = Connection & TermNodeConnection & {
  __typename?: 'TaxonomyToTermNodeConnection';
  /** Edges for the TaxonomyToTermNodeConnection connection */
  edges: Array<TaxonomyToTermNodeConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<TermNode>;
  /** Information about pagination in a connection. */
  pageInfo: TaxonomyToTermNodeConnectionPageInfo;
};

/** An edge in a connection */
export type TaxonomyToTermNodeConnectionEdge = Edge & TermNodeConnectionEdge & {
  __typename?: 'TaxonomyToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: TermNode;
};

/** Page Info on the &quot;TaxonomyToTermNodeConnection&quot; */
export type TaxonomyToTermNodeConnectionPageInfo = PageInfo & TermNodeConnectionPageInfo & WpPageInfo & {
  __typename?: 'TaxonomyToTermNodeConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The template assigned to the node */
export type Template_ApplyNow = ContentTemplate & {
  __typename?: 'Template_ApplyNow';
  /** The name of the template */
  templateName?: Maybe<Scalars['String']['output']>;
};

/** The template assigned to the node */
export type Template_FullWidth = ContentTemplate & {
  __typename?: 'Template_FullWidth';
  /** The name of the template */
  templateName?: Maybe<Scalars['String']['output']>;
};

/** The template assigned to the node */
export type Template_SlimHeader = ContentTemplate & {
  __typename?: 'Template_SlimHeader';
  /** The name of the template */
  templateName?: Maybe<Scalars['String']['output']>;
};

/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */
export type TermNode = {
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']['output']>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int']['output'];
  /** The description of the object */
  description?: Maybe<Scalars['String']['output']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<TermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** The link to the term */
  link?: Maybe<Scalars['String']['output']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']['output']>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']['output']>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']['output']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']['output']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};


/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */
export type TermNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */
export type TermNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Connection to TermNode Nodes */
export type TermNodeConnection = {
  /** A list of edges (relational context) between RootQuery and connected TermNode Nodes */
  edges: Array<TermNodeConnectionEdge>;
  /** A list of connected TermNode Nodes */
  nodes: Array<TermNode>;
  /** Information about pagination in a connection. */
  pageInfo: TermNodeConnectionPageInfo;
};

/** Edge between a Node and a connected TermNode */
export type TermNodeConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected TermNode Node */
  node: TermNode;
};

/** Page Info on the connected TermNodeConnectionEdge */
export type TermNodeConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single resource. Default is "ID". To be used along with the "id" field. */
export enum TermNodeIdTypeEnum {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the TermNode type and the EnqueuedScript type */
export type TermNodeToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {
  __typename?: 'TermNodeToEnqueuedScriptConnection';
  /** Edges for the TermNodeToEnqueuedScriptConnection connection */
  edges: Array<TermNodeToEnqueuedScriptConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedScript>;
  /** Information about pagination in a connection. */
  pageInfo: TermNodeToEnqueuedScriptConnectionPageInfo;
};

/** An edge in a connection */
export type TermNodeToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {
  __typename?: 'TermNodeToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedScript;
};

/** Page Info on the &quot;TermNodeToEnqueuedScriptConnection&quot; */
export type TermNodeToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'TermNodeToEnqueuedScriptConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the TermNode type and the EnqueuedStylesheet type */
export type TermNodeToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {
  __typename?: 'TermNodeToEnqueuedStylesheetConnection';
  /** Edges for the TermNodeToEnqueuedStylesheetConnection connection */
  edges: Array<TermNodeToEnqueuedStylesheetConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedStylesheet>;
  /** Information about pagination in a connection. */
  pageInfo: TermNodeToEnqueuedStylesheetConnectionPageInfo;
};

/** An edge in a connection */
export type TermNodeToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {
  __typename?: 'TermNodeToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedStylesheet;
};

/** Page Info on the &quot;TermNodeToEnqueuedStylesheetConnection&quot; */
export type TermNodeToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'TermNodeToEnqueuedStylesheetConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Options for ordering the connection by */
export enum TermObjectsConnectionOrderbyEnum {
  /** Order the connection by item count. */
  Count = 'COUNT',
  /** Order the connection by description. */
  Description = 'DESCRIPTION',
  /** Order the connection by name. */
  Name = 'NAME',
  /** Order the connection by slug. */
  Slug = 'SLUG',
  /** Order the connection by term group. */
  TermGroup = 'TERM_GROUP',
  /** Order the connection by term id. */
  TermId = 'TERM_ID',
  /** Order the connection by term order. */
  TermOrder = 'TERM_ORDER'
}

/** A theme object */
export type Theme = Node & {
  __typename?: 'Theme';
  /** Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; ). */
  author?: Maybe<Scalars['String']['output']>;
  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ). */
  authorUri?: Maybe<Scalars['String']['output']>;
  /** The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ). */
  description?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier of the theme object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ). */
  name?: Maybe<Scalars['String']['output']>;
  /** The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot(). */
  screenshot?: Maybe<Scalars['String']['output']>;
  /** The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet(). */
  slug?: Maybe<Scalars['String']['output']>;
  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ). */
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; ). */
  themeUri?: Maybe<Scalars['String']['output']>;
  /** The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ). */
  version?: Maybe<Scalars['String']['output']>;
};

/** Connection to Theme Nodes */
export type ThemeConnection = {
  /** A list of edges (relational context) between RootQuery and connected Theme Nodes */
  edges: Array<ThemeConnectionEdge>;
  /** A list of connected Theme Nodes */
  nodes: Array<Theme>;
  /** Information about pagination in a connection. */
  pageInfo: ThemeConnectionPageInfo;
};

/** Edge between a Node and a connected Theme */
export type ThemeConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected Theme Node */
  node: Theme;
};

/** Page Info on the connected ThemeConnectionEdge */
export type ThemeConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The thirdParty setting type */
export type ThirdPartySettings = {
  __typename?: 'ThirdPartySettings';
  /** The number of votes */
  datatracEnabled?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  datatracId?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  gtmEnabled?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  gtmId?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  hotjarEnabled?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  hotjarId?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  personyzeDomains?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  personyzeEnabled?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  personyzeId?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  qualtricsEnabled?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  qualtricsId?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  salesforceEnabled?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  salesforceId?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  siteimproveEnabled?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  siteimproveId?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  spectrumEnabled?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  spectrumId?: Maybe<Scalars['String']['output']>;
  /** The string Settings Group */
  thirdPartySettings?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  wpengineAccountId?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  wpengineEnvId?: Maybe<Scalars['String']['output']>;
  /** The number of votes */
  wpengineToken?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type UltimateFaqsEwdUfaqDisplayFaqBlock = EditorBlock & {
  __typename?: 'UltimateFaqsEwdUfaqDisplayFaqBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<UltimateFaqsEwdUfaqDisplayFaqBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type UltimateFaqsEwdUfaqDisplayFaqBlockAttributes = {
  __typename?: 'UltimateFaqsEwdUfaqDisplayFaqBlockAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;UltimateFaqsEwdUfaqDisplayFaqBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;category_accordion&quot; field on the &quot;UltimateFaqsEwdUfaqDisplayFaqBlock&quot; block */
  categoryAccordion?: Maybe<Scalars['String']['output']>;
  /** The &quot;className&quot; field on the &quot;UltimateFaqsEwdUfaqDisplayFaqBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;exclude_category&quot; field on the &quot;UltimateFaqsEwdUfaqDisplayFaqBlock&quot; block */
  excludeCategory?: Maybe<Scalars['String']['output']>;
  /** The &quot;faq_accordion&quot; field on the &quot;UltimateFaqsEwdUfaqDisplayFaqBlock&quot; block */
  faqAccordion?: Maybe<Scalars['String']['output']>;
  /** The &quot;group_by_category&quot; field on the &quot;UltimateFaqsEwdUfaqDisplayFaqBlock&quot; block */
  groupByCategory?: Maybe<Scalars['String']['output']>;
  /** The &quot;include_category&quot; field on the &quot;UltimateFaqsEwdUfaqDisplayFaqBlock&quot; block */
  includeCategory?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;UltimateFaqsEwdUfaqDisplayFaqBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;post_count&quot; field on the &quot;UltimateFaqsEwdUfaqDisplayFaqBlock&quot; block */
  postCount?: Maybe<Scalars['String']['output']>;
  /** The &quot;post__in_string&quot; field on the &quot;UltimateFaqsEwdUfaqDisplayFaqBlock&quot; block */
  postInString?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type UltimateFaqsEwdUfaqPopularFaqsBlock = EditorBlock & {
  __typename?: 'UltimateFaqsEwdUfaqPopularFaqsBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<UltimateFaqsEwdUfaqPopularFaqsBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type UltimateFaqsEwdUfaqPopularFaqsBlockAttributes = {
  __typename?: 'UltimateFaqsEwdUfaqPopularFaqsBlockAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;UltimateFaqsEwdUfaqPopularFaqsBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;UltimateFaqsEwdUfaqPopularFaqsBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;UltimateFaqsEwdUfaqPopularFaqsBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;post_count&quot; field on the &quot;UltimateFaqsEwdUfaqPopularFaqsBlock&quot; block */
  postCount?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type UltimateFaqsEwdUfaqRecentFaqsBlock = EditorBlock & {
  __typename?: 'UltimateFaqsEwdUfaqRecentFaqsBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<UltimateFaqsEwdUfaqRecentFaqsBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type UltimateFaqsEwdUfaqRecentFaqsBlockAttributes = {
  __typename?: 'UltimateFaqsEwdUfaqRecentFaqsBlockAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;UltimateFaqsEwdUfaqRecentFaqsBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;UltimateFaqsEwdUfaqRecentFaqsBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;UltimateFaqsEwdUfaqRecentFaqsBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;post_count&quot; field on the &quot;UltimateFaqsEwdUfaqRecentFaqsBlock&quot; block */
  postCount?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type UltimateFaqsEwdUfaqSearchBlock = EditorBlock & {
  __typename?: 'UltimateFaqsEwdUfaqSearchBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<UltimateFaqsEwdUfaqSearchBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type UltimateFaqsEwdUfaqSearchBlockAttributes = {
  __typename?: 'UltimateFaqsEwdUfaqSearchBlockAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;UltimateFaqsEwdUfaqSearchBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;UltimateFaqsEwdUfaqSearchBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;exclude_category&quot; field on the &quot;UltimateFaqsEwdUfaqSearchBlock&quot; block */
  excludeCategory?: Maybe<Scalars['String']['output']>;
  /** The &quot;include_category&quot; field on the &quot;UltimateFaqsEwdUfaqSearchBlock&quot; block */
  includeCategory?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;UltimateFaqsEwdUfaqSearchBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;show_on_load&quot; field on the &quot;UltimateFaqsEwdUfaqSearchBlock&quot; block */
  showOnLoad?: Maybe<Scalars['String']['output']>;
};

/** A block used for editing the site */
export type UltimateFaqsEwdUfaqSubmitFaqBlock = EditorBlock & {
  __typename?: 'UltimateFaqsEwdUfaqSubmitFaqBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<UltimateFaqsEwdUfaqSubmitFaqBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type UltimateFaqsEwdUfaqSubmitFaqBlockAttributes = {
  __typename?: 'UltimateFaqsEwdUfaqSubmitFaqBlockAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;UltimateFaqsEwdUfaqSubmitFaqBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;UltimateFaqsEwdUfaqSubmitFaqBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;UltimateFaqsEwdUfaqSubmitFaqBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** Any node that has a URI */
export type UniformResourceIdentifiable = {
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** The unique resource identifier path */
  id: Scalars['ID']['output'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
};

/** A block used for resolving blocks not found in the WordPress registry */
export type UnknownBlock = EditorBlock & {
  __typename?: 'UnknownBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Input for the updateCXAlert mutation. */
export type UpdateCxAlertInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the CXAlert object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateCXAlert mutation. */
export type UpdateCxAlertPayload = {
  __typename?: 'UpdateCXAlertPayload';
  /** The Post object mutation type. */
  cXAlert?: Maybe<CxAlert>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the updateCategory mutation. */
export type UpdateCategoryInput = {
  /** The slug that the category will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the category object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the category object to update */
  id: Scalars['ID']['input'];
  /** The name of the category object to mutate */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the category that should be set as the parent */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateCategory mutation. */
export type UpdateCategoryPayload = {
  __typename?: 'UpdateCategoryPayload';
  /** The created category */
  category?: Maybe<Category>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Input for the updateComment mutation. */
export type UpdateCommentInput = {
  /** The approval status of the comment. */
  approved?: InputMaybe<Scalars['String']['input']>;
  /** The name of the comment's author. */
  author?: InputMaybe<Scalars['String']['input']>;
  /** The email of the comment's author. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** The url of the comment's author. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The database ID of the post object the comment belongs to. */
  commentOn?: InputMaybe<Scalars['Int']['input']>;
  /** Content of the comment. */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the comment being updated. */
  id: Scalars['ID']['input'];
  /** Parent comment ID of current comment. */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** The approval status of the comment */
  status?: InputMaybe<CommentStatusEnum>;
  /** Type of comment. */
  type?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateComment mutation. */
export type UpdateCommentPayload = {
  __typename?: 'UpdateCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The comment that was created */
  comment?: Maybe<Comment>;
  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Input for the updateContact mutation. */
export type UpdateContactInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the contact object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateContact mutation. */
export type UpdateContactPayload = {
  __typename?: 'UpdateContactPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  contact?: Maybe<Contact>;
};

/** Input for the updateGraphqlDocument mutation. */
export type UpdateGraphqlDocumentInput = {
  /** Alias names for saved GraphQL query documents */
  alias?: InputMaybe<Array<Scalars['String']['input']>>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** Description for the saved GraphQL document */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Allow, deny or default access grant for specific query */
  grant?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the graphqlDocument object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** HTTP Cache-Control max-age directive for a saved GraphQL document */
  maxAgeHeader?: InputMaybe<Scalars['Int']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateGraphqlDocument mutation. */
export type UpdateGraphqlDocumentPayload = {
  __typename?: 'UpdateGraphqlDocumentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  graphqlDocument?: Maybe<GraphqlDocument>;
};

/** Input for the updateInstruction mutation. */
export type UpdateInstructionInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the instruction object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateInstruction mutation. */
export type UpdateInstructionPayload = {
  __typename?: 'UpdateInstructionPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  instruction?: Maybe<Instruction>;
};

/** Input for the updateLinklibrary mutation. */
export type UpdateLinklibraryInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the linklibrary object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateLinklibrary mutation. */
export type UpdateLinklibraryPayload = {
  __typename?: 'UpdateLinklibraryPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  linklibrary?: Maybe<Linklibrary>;
};

/** Input for the updateLocationCategory mutation. */
export type UpdateLocationCategoryInput = {
  /** The slug that the wpsl_store_category will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the wpsl_store_category object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the locationCategory object to update */
  id: Scalars['ID']['input'];
  /** The name of the wpsl_store_category object to mutate */
  name?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the wpsl_store_category that should be set as the parent */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateLocationCategory mutation. */
export type UpdateLocationCategoryPayload = {
  __typename?: 'UpdateLocationCategoryPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created wpsl_store_category */
  locationCategory?: Maybe<LocationCategory>;
};

/** Input for the updateLocation mutation. */
export type UpdateLocationInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the location object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** Set connections between the location and locationCategories */
  locationCategories?: InputMaybe<LocationLocationCategoriesInput>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateLocation mutation. */
export type UpdateLocationPayload = {
  __typename?: 'UpdateLocationPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  location?: Maybe<Location>;
};

/** Input for the updateMediaItem mutation. */
export type UpdateMediaItemInput = {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: InputMaybe<Scalars['String']['input']>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** The caption for the mediaItem */
  caption?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the mediaItem */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The date of the mediaItem */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: InputMaybe<Scalars['String']['input']>;
  /** Description of the mediaItem */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The file name of the mediaItem */
  filePath?: InputMaybe<Scalars['String']['input']>;
  /** The file type of the mediaItem */
  fileType?: InputMaybe<MimeTypeEnum>;
  /** The ID of the mediaItem object */
  id: Scalars['ID']['input'];
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The ping status for the mediaItem */
  pingStatus?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the mediaItem */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the mediaItem */
  status?: InputMaybe<MediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateMediaItem mutation. */
export type UpdateMediaItemPayload = {
  __typename?: 'UpdateMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The MediaItem object mutation type. */
  mediaItem?: Maybe<MediaItem>;
};

/** Input for the updatePage mutation. */
export type UpdatePageInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the page object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updatePage mutation. */
export type UpdatePagePayload = {
  __typename?: 'UpdatePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  page?: Maybe<Page>;
};

/** Input for the updatePostFormat mutation. */
export type UpdatePostFormatInput = {
  /** The slug that the post_format will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the post_format object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the postFormat object to update */
  id: Scalars['ID']['input'];
  /** The name of the post_format object to mutate */
  name?: InputMaybe<Scalars['String']['input']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updatePostFormat mutation. */
export type UpdatePostFormatPayload = {
  __typename?: 'UpdatePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created post_format */
  postFormat?: Maybe<PostFormat>;
};

/** Input for the updatePost mutation. */
export type UpdatePostInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** Set connections between the post and categories */
  categories?: InputMaybe<PostCategoriesInput>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']['input']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the post object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The ping status for the object */
  pingStatus?: InputMaybe<Scalars['String']['input']>;
  /** URLs that have been pinged. */
  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Set connections between the post and postFormats */
  postFormats?: InputMaybe<PostPostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** Set connections between the post and tags */
  tags?: InputMaybe<PostTagsInput>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
  /** URLs queued to be pinged. */
  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

/** The payload for the updatePost mutation. */
export type UpdatePostPayload = {
  __typename?: 'UpdatePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  post?: Maybe<Post>;
};

/** Input for the updateProduct mutation. */
export type UpdateProductInput = {
  accurateDate?: InputMaybe<Scalars['String']['input']>;
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  bookNowURL?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  dataSource?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  datatracID?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the product object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  loanBasedAmount?: InputMaybe<Scalars['String']['input']>;
  memberApplyNowURL?: InputMaybe<Scalars['String']['input']>;
  memberQuickApplyMobileURL?: InputMaybe<Scalars['String']['input']>;
  memberQuickApplyURL?: InputMaybe<Scalars['String']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  minorMemberApplyNowURL?: InputMaybe<Scalars['String']['input']>;
  minorNonMemberApplyNowURL?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  nonMemberApplyNowURL?: InputMaybe<Scalars['String']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  productApplyURL?: InputMaybe<Scalars['String']['input']>;
  productPageURL?: InputMaybe<Scalars['String']['input']>;
  ratesTableID?: InputMaybe<Scalars['Float']['input']>;
  showRatesInDigitalBanking?: InputMaybe<Scalars['Boolean']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Input for the updateProductName mutation. */
export type UpdateProductNameInput = {
  /** The slug that the productname will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the productname object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the productName object to update */
  id: Scalars['ID']['input'];
  /** The name of the productname object to mutate */
  name?: InputMaybe<Scalars['String']['input']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateProductName mutation. */
export type UpdateProductNamePayload = {
  __typename?: 'UpdateProductNamePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created productname */
  productName?: Maybe<ProductName>;
};

/** The payload for the updateProduct mutation. */
export type UpdateProductPayload = {
  __typename?: 'UpdateProductPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  product?: Maybe<Product>;
};

/** Input for the updateRate mutation. */
export type UpdateRateInput = {
  aprapy?: InputMaybe<Scalars['String']['input']>;
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  externalName?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the rate object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  minimumBalance?: InputMaybe<Scalars['Float']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  payment?: InputMaybe<Scalars['Float']['input']>;
  /** Set connections between the rate and productNames */
  productNames?: InputMaybe<RateProductNamesInput>;
  rate?: InputMaybe<Scalars['Float']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  term?: InputMaybe<Scalars['String']['input']>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateRate mutation. */
export type UpdateRatePayload = {
  __typename?: 'UpdateRatePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  rate?: Maybe<Rate>;
};

/** Input for the updateService mutation. */
export type UpdateServiceInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the service object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateService mutation. */
export type UpdateServicePayload = {
  __typename?: 'UpdateServicePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  service?: Maybe<Service>;
};

/** Input for the updateSettings mutation. */
export type UpdateSettingsInput = {
  /** Opt into anonymous usage tracking to help us make Atlas Content Modeler better. */
  atlasContentModelerSettingsSettingsAtlasContentModelerUsageTracking?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Allow people to submit comments on new posts. */
  discussionSettingsDefaultCommentStatus?: InputMaybe<Scalars['String']['input']>;
  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
  discussionSettingsDefaultPingStatus?: InputMaybe<Scalars['String']['input']>;
  footerSettingsFooterSettings?: InputMaybe<Scalars['String']['input']>;
  /** A date format for all date strings. */
  generalSettingsDateFormat?: InputMaybe<Scalars['String']['input']>;
  /** Site tagline. */
  generalSettingsDescription?: InputMaybe<Scalars['String']['input']>;
  /** This address is used for admin purposes, like new user notification. */
  generalSettingsEmail?: InputMaybe<Scalars['String']['input']>;
  /** WordPress locale code. */
  generalSettingsLanguage?: InputMaybe<Scalars['String']['input']>;
  /** A day number of the week that the week should start on. */
  generalSettingsStartOfWeek?: InputMaybe<Scalars['Int']['input']>;
  /** A time format for all time strings. */
  generalSettingsTimeFormat?: InputMaybe<Scalars['String']['input']>;
  /** A city in the same timezone as you. */
  generalSettingsTimezone?: InputMaybe<Scalars['String']['input']>;
  /** Site title. */
  generalSettingsTitle?: InputMaybe<Scalars['String']['input']>;
  /** Site URL. */
  generalSettingsUrl?: InputMaybe<Scalars['String']['input']>;
  genesisBlocksGlobalSettingsSettingsGenesisBlocksMailchimpApiKey?: InputMaybe<Scalars['String']['input']>;
  genesisBlocksGlobalSettingsSettingsGenesisProSubscriptionKey?: InputMaybe<Scalars['String']['input']>;
  headerSettingsHeaderSettings?: InputMaybe<Scalars['String']['input']>;
  locationSettingsLocationSettings?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the page that should display the latest posts */
  readingSettingsPageForPosts?: InputMaybe<Scalars['Int']['input']>;
  /** The ID of the page that should be displayed on the front page */
  readingSettingsPageOnFront?: InputMaybe<Scalars['Int']['input']>;
  /** Blog pages show at most. */
  readingSettingsPostsPerPage?: InputMaybe<Scalars['Int']['input']>;
  /** What to show on the front page */
  readingSettingsShowOnFront?: InputMaybe<Scalars['String']['input']>;
  thirdPartySettingsThirdPartySettings?: InputMaybe<Scalars['String']['input']>;
  widgetSettingsWidgetSettings?: InputMaybe<Scalars['String']['input']>;
  /** Default post category. */
  writingSettingsDefaultCategory?: InputMaybe<Scalars['Int']['input']>;
  /** Default post format. */
  writingSettingsDefaultPostFormat?: InputMaybe<Scalars['String']['input']>;
  /** Convert emoticons like :-) and :-P to graphics on display. */
  writingSettingsUseSmilies?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The payload for the updateSettings mutation. */
export type UpdateSettingsPayload = {
  __typename?: 'UpdateSettingsPayload';
  /** Update all settings. */
  allSettings?: Maybe<Settings>;
  /** Update the AtlasContentModelerSettingsSettings setting. */
  atlasContentModelerSettingsSettings?: Maybe<AtlasContentModelerSettingsSettings>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Update the DiscussionSettings setting. */
  discussionSettings?: Maybe<DiscussionSettings>;
  /** Update the FooterSettings setting. */
  footerSettings?: Maybe<FooterSettings>;
  /** Update the GeneralSettings setting. */
  generalSettings?: Maybe<GeneralSettings>;
  /** Update the GenesisBlocksGlobalSettingsSettings setting. */
  genesisBlocksGlobalSettingsSettings?: Maybe<GenesisBlocksGlobalSettingsSettings>;
  /** Update the HeaderSettings setting. */
  headerSettings?: Maybe<HeaderSettings>;
  /** Update the LocationSettings setting. */
  locationSettings?: Maybe<LocationSettings>;
  /** Update the ReadingSettings setting. */
  readingSettings?: Maybe<ReadingSettings>;
  /** Update the ThirdPartySettings setting. */
  thirdPartySettings?: Maybe<ThirdPartySettings>;
  /** Update the WidgetSettings setting. */
  widgetSettings?: Maybe<WidgetSettings>;
  /** Update the WritingSettings setting. */
  writingSettings?: Maybe<WritingSettings>;
};

/** Input for the updateStep mutation. */
export type UpdateStepInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  copy?: InputMaybe<Scalars['String']['input']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']['input']>;
  heading?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the step object */
  id: Scalars['ID']['input'];
  /** Override the edit lock when another user is editing the post */
  ignoreEditLock?: InputMaybe<Scalars['Boolean']['input']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']['input']>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  step?: InputMaybe<Scalars['Float']['input']>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateStep mutation. */
export type UpdateStepPayload = {
  __typename?: 'UpdateStepPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The Post object mutation type. */
  step?: Maybe<Step>;
};

/** Input for the updateTag mutation. */
export type UpdateTagInput = {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The description of the post_tag object */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the tag object to update */
  id: Scalars['ID']['input'];
  /** The name of the post_tag object to mutate */
  name?: InputMaybe<Scalars['String']['input']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateTag mutation. */
export type UpdateTagPayload = {
  __typename?: 'UpdateTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The created post_tag */
  tag?: Maybe<Tag>;
};

/** Input for the updateUser mutation. */
export type UpdateUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']['input']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the user */
  id: Scalars['ID']['input'];
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']['input']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']['input']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']['input']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']['input']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']['input']>;
  /** An array of roles to be assigned to the user. */
  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']['input']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']['input']>;
};

/** The payload for the updateUser mutation. */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The User object mutation type. */
  user?: Maybe<User>;
};

/** A User object */
export type User = Commenter & DatabaseIdentifier & Node & UniformResourceIdentifiable & {
  __typename?: 'User';
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  avatar?: Maybe<Avatar>;
  /** User metadata option name. Usually it will be &quot;wp_capabilities&quot;. */
  capKey?: Maybe<Scalars['String']['output']>;
  /** A list of capabilities (permissions) granted to the user */
  capabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Connection between the User type and the Comment type */
  comments?: Maybe<UserToCommentConnection>;
  /** @deprecated Deprecated in favor of using Next.js pages */
  conditionalTags?: Maybe<ConditionalTags>;
  /** Connection between the User type and the contact type */
  contacts?: Maybe<UserToContactConnection>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int']['output'];
  /** Description of the user. */
  description?: Maybe<Scalars['String']['output']>;
  /** Email address of the user. This is equivalent to the WP_User-&gt;user_email property. */
  email?: Maybe<Scalars['String']['output']>;
  /** Connection between the User type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<UserToEnqueuedScriptConnection>;
  /** Connection between the User type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<UserToEnqueuedStylesheetConnection>;
  /** A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps. */
  extraCapabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** First name of the user. This is equivalent to the WP_User-&gt;user_first_name property. */
  firstName?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier for the user object. */
  id: Scalars['ID']['output'];
  /** Connection between the User type and the instruction type */
  instructions?: Maybe<UserToInstructionConnection>;
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean']['output'];
  /** Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property. */
  lastName?: Maybe<Scalars['String']['output']>;
  /** The preferred language locale set for the user. Value derived from get_user_locale(). */
  locale?: Maybe<Scalars['String']['output']>;
  /** Connection between the User type and the location type */
  locations?: Maybe<UserToLocationConnection>;
  /** Connection between the User type and the mediaItem type */
  mediaItems?: Maybe<UserToMediaItemConnection>;
  /** Display name of the user. This is equivalent to the WP_User-&gt;display_name property. */
  name?: Maybe<Scalars['String']['output']>;
  /** The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename */
  nicename?: Maybe<Scalars['String']['output']>;
  /** Nickname of the user. */
  nickname?: Maybe<Scalars['String']['output']>;
  /** Connection between the User type and the page type */
  pages?: Maybe<UserToPageConnection>;
  /** Connection between the User type and the post type */
  posts?: Maybe<UserToPostConnection>;
  /** Connection between the User type and the product type */
  products?: Maybe<UserToProductConnection>;
  /** Connection between the User type and the rate type */
  rates?: Maybe<UserToRateConnection>;
  /** The date the user registered or was created. The field follows a full ISO8601 date string format. */
  registeredDate?: Maybe<Scalars['String']['output']>;
  /** Connection between the User and Revisions authored by the user */
  revisions?: Maybe<UserToRevisionsConnection>;
  /** Connection between the User type and the UserRole type */
  roles?: Maybe<UserToUserRoleConnection>;
  /** The Yoast SEO data of a user */
  seo?: Maybe<SeoUser>;
  /** Connection between the User type and the service type */
  services?: Maybe<UserToServiceConnection>;
  /** Whether the Toolbar should be displayed when the user is viewing the site. */
  shouldShowAdminToolbar?: Maybe<Scalars['Boolean']['output']>;
  /** The slug for the user. This field is equivalent to WP_User-&gt;user_nicename */
  slug?: Maybe<Scalars['String']['output']>;
  /** Connection between the User type and the step type */
  steps?: Maybe<UserToStepConnection>;
  templates?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']['output']>;
  /** A website url that is associated with the user. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * The Id of the user. Equivalent to WP_User-&gt;ID
   * @deprecated Deprecated in favor of the databaseId field
   */
  userId?: Maybe<Scalars['Int']['output']>;
  /** Username for the user. This field is equivalent to WP_User-&gt;user_login. */
  username?: Maybe<Scalars['String']['output']>;
};


/** A User object */
export type UserAvatarArgs = {
  forceDefault?: InputMaybe<Scalars['Boolean']['input']>;
  rating?: InputMaybe<AvatarRatingEnum>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/** A User object */
export type UserCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToCommentConnectionWhereArgs>;
};


/** A User object */
export type UserContactsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToContactConnectionWhereArgs>;
};


/** A User object */
export type UserEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A User object */
export type UserEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A User object */
export type UserInstructionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToInstructionConnectionWhereArgs>;
};


/** A User object */
export type UserLocationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToLocationConnectionWhereArgs>;
};


/** A User object */
export type UserMediaItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToMediaItemConnectionWhereArgs>;
};


/** A User object */
export type UserPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToPageConnectionWhereArgs>;
};


/** A User object */
export type UserPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToPostConnectionWhereArgs>;
};


/** A User object */
export type UserProductsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToProductConnectionWhereArgs>;
};


/** A User object */
export type UserRatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToRateConnectionWhereArgs>;
};


/** A User object */
export type UserRevisionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToRevisionsConnectionWhereArgs>;
};


/** A User object */
export type UserRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A User object */
export type UserServicesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToServiceConnectionWhereArgs>;
};


/** A User object */
export type UserStepsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserToStepConnectionWhereArgs>;
};

/** Connection to User Nodes */
export type UserConnection = {
  /** A list of edges (relational context) between RootQuery and connected User Nodes */
  edges: Array<UserConnectionEdge>;
  /** A list of connected User Nodes */
  nodes: Array<User>;
  /** Information about pagination in a connection. */
  pageInfo: UserConnectionPageInfo;
};

/** Edge between a Node and a connected User */
export type UserConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected User Node */
  node: User;
};

/** Page Info on the connected UserConnectionEdge */
export type UserConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The Type of Identifier used to fetch a single User node. To be used along with the "id" field. Default is "ID". */
export enum UserNodeIdTypeEnum {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The Email of the User */
  Email = 'EMAIL',
  /** The hashed Global ID */
  Id = 'ID',
  /** The slug of the User */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI',
  /** The username the User uses to login with */
  Username = 'USERNAME'
}

/** A user role object */
export type UserRole = Node & {
  __typename?: 'UserRole';
  /** The capabilities that belong to this role */
  capabilities?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The display name of the role */
  displayName?: Maybe<Scalars['String']['output']>;
  /** The globally unique identifier for the user role object. */
  id: Scalars['ID']['output'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** The registered name of the role */
  name?: Maybe<Scalars['String']['output']>;
};

/** Connection to UserRole Nodes */
export type UserRoleConnection = {
  /** A list of edges (relational context) between RootQuery and connected UserRole Nodes */
  edges: Array<UserRoleConnectionEdge>;
  /** A list of connected UserRole Nodes */
  nodes: Array<UserRole>;
  /** Information about pagination in a connection. */
  pageInfo: UserRoleConnectionPageInfo;
};

/** Edge between a Node and a connected UserRole */
export type UserRoleConnectionEdge = {
  /** Opaque reference to the nodes position in the connection. Value can be used with pagination args. */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The connected UserRole Node */
  node: UserRole;
};

/** Page Info on the connected UserRoleConnectionEdge */
export type UserRoleConnectionPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Names of available user roles */
export enum UserRoleEnum {
  /** User role with specific capabilities */
  Administrator = 'ADMINISTRATOR',
  /** User role with specific capabilities */
  Author = 'AUTHOR',
  /** User role with specific capabilities */
  Contributor = 'CONTRIBUTOR',
  /** User role with specific capabilities */
  Editor = 'EDITOR',
  /** User role with specific capabilities */
  GraphicDesigner = 'GRAPHIC_DESIGNER',
  /** User role with specific capabilities */
  Products = 'PRODUCTS',
  /** User role with specific capabilities */
  Revisor = 'REVISOR',
  /** User role with specific capabilities */
  SeoEditor = 'SEO_EDITOR',
  /** User role with specific capabilities */
  SeoManager = 'SEO_MANAGER',
  /** User role with specific capabilities */
  StoreLocatorManager = 'STORE_LOCATOR_MANAGER',
  /** User role with specific capabilities */
  Subscriber = 'SUBSCRIBER'
}

/** Connection between the User type and the Comment type */
export type UserToCommentConnection = CommentConnection & Connection & {
  __typename?: 'UserToCommentConnection';
  /** Edges for the UserToCommentConnection connection */
  edges: Array<UserToCommentConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Comment>;
  /** Information about pagination in a connection. */
  pageInfo: UserToCommentConnectionPageInfo;
};

/** An edge in a connection */
export type UserToCommentConnectionEdge = CommentConnectionEdge & Edge & {
  __typename?: 'UserToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Comment;
};

/** Page Info on the &quot;UserToCommentConnection&quot; */
export type UserToCommentConnectionPageInfo = CommentConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToCommentConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToCommentConnection connection */
export type UserToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']['input']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']['input']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']['input']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']['input']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Content object name (i.e. slug ) to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']['input']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']['input']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']['input']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']['input']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']['input']>;
};

/** Connection between the User type and the contact type */
export type UserToContactConnection = Connection & ContactConnection & {
  __typename?: 'UserToContactConnection';
  /** Edges for the UserToContactConnection connection */
  edges: Array<UserToContactConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Contact>;
  /** Information about pagination in a connection. */
  pageInfo: UserToContactConnectionPageInfo;
};

/** An edge in a connection */
export type UserToContactConnectionEdge = ContactConnectionEdge & Edge & {
  __typename?: 'UserToContactConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Contact;
};

/** Page Info on the &quot;UserToContactConnection&quot; */
export type UserToContactConnectionPageInfo = ContactConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToContactConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToContactConnection connection */
export type UserToContactConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the EnqueuedScript type */
export type UserToEnqueuedScriptConnection = Connection & EnqueuedScriptConnection & {
  __typename?: 'UserToEnqueuedScriptConnection';
  /** Edges for the UserToEnqueuedScriptConnection connection */
  edges: Array<UserToEnqueuedScriptConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedScript>;
  /** Information about pagination in a connection. */
  pageInfo: UserToEnqueuedScriptConnectionPageInfo;
};

/** An edge in a connection */
export type UserToEnqueuedScriptConnectionEdge = Edge & EnqueuedScriptConnectionEdge & {
  __typename?: 'UserToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedScript;
};

/** Page Info on the &quot;UserToEnqueuedScriptConnection&quot; */
export type UserToEnqueuedScriptConnectionPageInfo = EnqueuedScriptConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToEnqueuedScriptConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the User type and the EnqueuedStylesheet type */
export type UserToEnqueuedStylesheetConnection = Connection & EnqueuedStylesheetConnection & {
  __typename?: 'UserToEnqueuedStylesheetConnection';
  /** Edges for the UserToEnqueuedStylesheetConnection connection */
  edges: Array<UserToEnqueuedStylesheetConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<EnqueuedStylesheet>;
  /** Information about pagination in a connection. */
  pageInfo: UserToEnqueuedStylesheetConnectionPageInfo;
};

/** An edge in a connection */
export type UserToEnqueuedStylesheetConnectionEdge = Edge & EnqueuedStylesheetConnectionEdge & {
  __typename?: 'UserToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: EnqueuedStylesheet;
};

/** Page Info on the &quot;UserToEnqueuedStylesheetConnection&quot; */
export type UserToEnqueuedStylesheetConnectionPageInfo = EnqueuedStylesheetConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToEnqueuedStylesheetConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Connection between the User type and the instruction type */
export type UserToInstructionConnection = Connection & InstructionConnection & {
  __typename?: 'UserToInstructionConnection';
  /** Edges for the UserToInstructionConnection connection */
  edges: Array<UserToInstructionConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Instruction>;
  /** Information about pagination in a connection. */
  pageInfo: UserToInstructionConnectionPageInfo;
};

/** An edge in a connection */
export type UserToInstructionConnectionEdge = Edge & InstructionConnectionEdge & {
  __typename?: 'UserToInstructionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Instruction;
};

/** Page Info on the &quot;UserToInstructionConnection&quot; */
export type UserToInstructionConnectionPageInfo = InstructionConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToInstructionConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToInstructionConnection connection */
export type UserToInstructionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the location type */
export type UserToLocationConnection = Connection & LocationConnection & {
  __typename?: 'UserToLocationConnection';
  /** Edges for the UserToLocationConnection connection */
  edges: Array<UserToLocationConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Location>;
  /** Information about pagination in a connection. */
  pageInfo: UserToLocationConnectionPageInfo;
};

/** An edge in a connection */
export type UserToLocationConnectionEdge = Edge & LocationConnectionEdge & {
  __typename?: 'UserToLocationConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Location;
};

/** Page Info on the &quot;UserToLocationConnection&quot; */
export type UserToLocationConnectionPageInfo = LocationConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToLocationConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToLocationConnection connection */
export type UserToLocationConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the mediaItem type */
export type UserToMediaItemConnection = Connection & MediaItemConnection & {
  __typename?: 'UserToMediaItemConnection';
  /** Edges for the UserToMediaItemConnection connection */
  edges: Array<UserToMediaItemConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<MediaItem>;
  /** Information about pagination in a connection. */
  pageInfo: UserToMediaItemConnectionPageInfo;
};

/** An edge in a connection */
export type UserToMediaItemConnectionEdge = Edge & MediaItemConnectionEdge & {
  __typename?: 'UserToMediaItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: MediaItem;
};

/** Page Info on the &quot;UserToMediaItemConnection&quot; */
export type UserToMediaItemConnectionPageInfo = MediaItemConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToMediaItemConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToMediaItemConnection connection */
export type UserToMediaItemConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the page type */
export type UserToPageConnection = Connection & PageConnection & {
  __typename?: 'UserToPageConnection';
  /** Edges for the UserToPageConnection connection */
  edges: Array<UserToPageConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Page>;
  /** Information about pagination in a connection. */
  pageInfo: UserToPageConnectionPageInfo;
};

/** An edge in a connection */
export type UserToPageConnectionEdge = Edge & PageConnectionEdge & {
  __typename?: 'UserToPageConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Page;
};

/** Page Info on the &quot;UserToPageConnection&quot; */
export type UserToPageConnectionPageInfo = PageConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToPageConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToPageConnection connection */
export type UserToPageConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the post type */
export type UserToPostConnection = Connection & PostConnection & {
  __typename?: 'UserToPostConnection';
  /** Edges for the UserToPostConnection connection */
  edges: Array<UserToPostConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Post>;
  /** Information about pagination in a connection. */
  pageInfo: UserToPostConnectionPageInfo;
};

/** An edge in a connection */
export type UserToPostConnectionEdge = Edge & PostConnectionEdge & {
  __typename?: 'UserToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Post;
};

/** Page Info on the &quot;UserToPostConnection&quot; */
export type UserToPostConnectionPageInfo = PageInfo & PostConnectionPageInfo & WpPageInfo & {
  __typename?: 'UserToPostConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToPostConnection connection */
export type UserToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']['input']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']['input']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']['input']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Array of tag slugs, used to display objects from one tag AND another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Array of tag slugs, used to include objects in ANY specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the product type */
export type UserToProductConnection = Connection & ProductConnection & {
  __typename?: 'UserToProductConnection';
  /** Edges for the UserToProductConnection connection */
  edges: Array<UserToProductConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Product>;
  /** Information about pagination in a connection. */
  pageInfo: UserToProductConnectionPageInfo;
};

/** An edge in a connection */
export type UserToProductConnectionEdge = Edge & ProductConnectionEdge & {
  __typename?: 'UserToProductConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Product;
};

/** Page Info on the &quot;UserToProductConnection&quot; */
export type UserToProductConnectionPageInfo = PageInfo & ProductConnectionPageInfo & WpPageInfo & {
  __typename?: 'UserToProductConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToProductConnection connection */
export type UserToProductConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the rate type */
export type UserToRateConnection = Connection & RateConnection & {
  __typename?: 'UserToRateConnection';
  /** Edges for the UserToRateConnection connection */
  edges: Array<UserToRateConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Rate>;
  /** Information about pagination in a connection. */
  pageInfo: UserToRateConnectionPageInfo;
};

/** An edge in a connection */
export type UserToRateConnectionEdge = Edge & RateConnectionEdge & {
  __typename?: 'UserToRateConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Rate;
};

/** Page Info on the &quot;UserToRateConnection&quot; */
export type UserToRateConnectionPageInfo = PageInfo & RateConnectionPageInfo & WpPageInfo & {
  __typename?: 'UserToRateConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToRateConnection connection */
export type UserToRateConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the ContentNode type */
export type UserToRevisionsConnection = Connection & ContentNodeConnection & {
  __typename?: 'UserToRevisionsConnection';
  /** Edges for the UserToRevisionsConnection connection */
  edges: Array<UserToRevisionsConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<ContentNode>;
  /** Information about pagination in a connection. */
  pageInfo: UserToRevisionsConnectionPageInfo;
};

/** An edge in a connection */
export type UserToRevisionsConnectionEdge = ContentNodeConnectionEdge & Edge & {
  __typename?: 'UserToRevisionsConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: ContentNode;
};

/** Page Info on the &quot;UserToRevisionsConnection&quot; */
export type UserToRevisionsConnectionPageInfo = ContentNodeConnectionPageInfo & PageInfo & WpPageInfo & {
  __typename?: 'UserToRevisionsConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToRevisionsConnection connection */
export type UserToRevisionsConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the service type */
export type UserToServiceConnection = Connection & ServiceConnection & {
  __typename?: 'UserToServiceConnection';
  /** Edges for the UserToServiceConnection connection */
  edges: Array<UserToServiceConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Service>;
  /** Information about pagination in a connection. */
  pageInfo: UserToServiceConnectionPageInfo;
};

/** An edge in a connection */
export type UserToServiceConnectionEdge = Edge & ServiceConnectionEdge & {
  __typename?: 'UserToServiceConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Service;
};

/** Page Info on the &quot;UserToServiceConnection&quot; */
export type UserToServiceConnectionPageInfo = PageInfo & ServiceConnectionPageInfo & WpPageInfo & {
  __typename?: 'UserToServiceConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToServiceConnection connection */
export type UserToServiceConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the step type */
export type UserToStepConnection = Connection & StepConnection & {
  __typename?: 'UserToStepConnection';
  /** Edges for the UserToStepConnection connection */
  edges: Array<UserToStepConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<Step>;
  /** Information about pagination in a connection. */
  pageInfo: UserToStepConnectionPageInfo;
};

/** An edge in a connection */
export type UserToStepConnectionEdge = Edge & StepConnectionEdge & {
  __typename?: 'UserToStepConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: Step;
};

/** Page Info on the &quot;UserToStepConnection&quot; */
export type UserToStepConnectionPageInfo = PageInfo & StepConnectionPageInfo & WpPageInfo & {
  __typename?: 'UserToStepConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Arguments for filtering the UserToStepConnection connection */
export type UserToStepConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']['input']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']['input']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']['input']>;
  /** Specific database ID of the object */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** What parameter to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']['input']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']['input']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']['input']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Connection between the User type and the UserRole type */
export type UserToUserRoleConnection = Connection & UserRoleConnection & {
  __typename?: 'UserToUserRoleConnection';
  /** Edges for the UserToUserRoleConnection connection */
  edges: Array<UserToUserRoleConnectionEdge>;
  /** The nodes of the connection, without the edges */
  nodes: Array<UserRole>;
  /** Information about pagination in a connection. */
  pageInfo: UserToUserRoleConnectionPageInfo;
};

/** An edge in a connection */
export type UserToUserRoleConnectionEdge = Edge & UserRoleConnectionEdge & {
  __typename?: 'UserToUserRoleConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']['output']>;
  /** The item at the end of the edge */
  node: UserRole;
};

/** Page Info on the &quot;UserToUserRoleConnection&quot; */
export type UserToUserRoleConnectionPageInfo = PageInfo & UserRoleConnectionPageInfo & WpPageInfo & {
  __typename?: 'UserToUserRoleConnectionPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Field to order the connection by */
export enum UsersConnectionOrderbyEnum {
  /** Order by display name */
  DisplayName = 'DISPLAY_NAME',
  /** Order by email address */
  Email = 'EMAIL',
  /** Order by login */
  Login = 'LOGIN',
  /** Preserve the login order given in the LOGIN_IN array */
  LoginIn = 'LOGIN_IN',
  /** Order by nice name */
  NiceName = 'NICE_NAME',
  /** Preserve the nice name order given in the NICE_NAME_IN array */
  NiceNameIn = 'NICE_NAME_IN',
  /** Order by registration date */
  Registered = 'REGISTERED',
  /** Order by URL */
  Url = 'URL'
}

/** Options for ordering the connection */
export type UsersConnectionOrderbyInput = {
  /** The field name used to sort the results. */
  field: UsersConnectionOrderbyEnum;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
};

/** Column used for searching for users. */
export enum UsersConnectionSearchColumnEnum {
  /** The user's email address. */
  Email = 'EMAIL',
  /** The globally unique ID. */
  Id = 'ID',
  /** The username the User uses to login with. */
  Login = 'LOGIN',
  /** A URL-friendly name for the user. The default is the user's username. */
  Nicename = 'NICENAME',
  /** The URL of the user's website. */
  Url = 'URL'
}

/** Information about pagination in a connection. */
export type WpPageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Get information about the offset pagination state in the current connection */
  offsetPagination?: Maybe<OffsetPaginationPageInfo>;
  /** Raw schema for page */
  seo?: Maybe<SeoPostTypePageInfo>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** The widget setting type */
export type WidgetSettings = {
  __typename?: 'WidgetSettings';
  /** Apply Now Content */
  applyNow?: Maybe<Scalars['String']['output']>;
  /** Apply Now Member Content */
  applyNowMember?: Maybe<Scalars['String']['output']>;
  /** Apply Now Minor Content */
  applyNowMinor?: Maybe<Scalars['String']['output']>;
  /** Apply Start Content */
  applyStart?: Maybe<Scalars['String']['output']>;
  /** Genesis Blog Sidebar */
  blogSidebar?: Maybe<Scalars['String']['output']>;
  /** Genesis Blog Top */
  blogtop?: Maybe<Scalars['String']['output']>;
  /** Locations Search Page Content */
  locationsSearch?: Maybe<Scalars['String']['output']>;
  /** Scheduler Page Content */
  scheduler?: Maybe<Scalars['String']['output']>;
  /** The string Settings Group */
  widgetSettings?: Maybe<Scalars['String']['output']>;
};


/** The widget setting type */
export type WidgetSettingsApplyNowArgs = {
  account?: InputMaybe<Scalars['String']['input']>;
  minor?: InputMaybe<Scalars['String']['input']>;
};


/** The widget setting type */
export type WidgetSettingsApplyNowMemberArgs = {
  account?: InputMaybe<Scalars['String']['input']>;
  minor?: InputMaybe<Scalars['String']['input']>;
};


/** The widget setting type */
export type WidgetSettingsApplyNowMinorArgs = {
  account?: InputMaybe<Scalars['String']['input']>;
  minor?: InputMaybe<Scalars['String']['input']>;
};


/** The widget setting type */
export type WidgetSettingsApplyStartArgs = {
  account?: InputMaybe<Scalars['String']['input']>;
  minor?: InputMaybe<Scalars['String']['input']>;
};

/** The writing setting type */
export type WritingSettings = {
  __typename?: 'WritingSettings';
  /** Default post category. */
  defaultCategory?: Maybe<Scalars['Int']['output']>;
  /** Default post format. */
  defaultPostFormat?: Maybe<Scalars['String']['output']>;
  /** Convert emoticons like :-) and :-P to graphics on display. */
  useSmilies?: Maybe<Scalars['Boolean']['output']>;
};

/** A block used for editing the site */
export type YoastFaqBlock = EditorBlock & {
  __typename?: 'YoastFaqBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<YoastFaqBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type YoastFaqBlockAttributes = {
  __typename?: 'YoastFaqBlockAttributes';
  /** The &quot;additionalListCssClasses&quot; field on the &quot;YoastFaqBlock&quot; block */
  additionalListCssClasses?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;YoastFaqBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;YoastFaqBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;YoastFaqBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;questions&quot; field on the &quot;YoastFaqBlock&quot; block */
  questions?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

/** A block used for editing the site */
export type YoastHowToBlock = EditorBlock & {
  __typename?: 'YoastHowToBlock';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<YoastHowToBlockAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type YoastHowToBlockAttributes = {
  __typename?: 'YoastHowToBlockAttributes';
  /** The &quot;additionalListCssClasses&quot; field on the &quot;YoastHowToBlock&quot; block */
  additionalListCssClasses?: Maybe<Scalars['String']['output']>;
  /** The &quot;blockVisibility&quot; field on the &quot;YoastHowToBlock&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;YoastHowToBlock&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;days&quot; field on the &quot;YoastHowToBlock&quot; block */
  days?: Maybe<Scalars['String']['output']>;
  /** The &quot;defaultDurationText&quot; field on the &quot;YoastHowToBlock&quot; block */
  defaultDurationText?: Maybe<Scalars['String']['output']>;
  /** The &quot;description&quot; field on the &quot;YoastHowToBlock&quot; block */
  description?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;durationText&quot; field on the &quot;YoastHowToBlock&quot; block */
  durationText?: Maybe<Scalars['String']['output']>;
  /** The &quot;hasDuration&quot; field on the &quot;YoastHowToBlock&quot; block */
  hasDuration?: Maybe<Scalars['Boolean']['output']>;
  /** The &quot;hours&quot; field on the &quot;YoastHowToBlock&quot; block */
  hours?: Maybe<Scalars['String']['output']>;
  /** The &quot;jsonDescription&quot; field on the &quot;YoastHowToBlock&quot; block */
  jsonDescription?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;YoastHowToBlock&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;minutes&quot; field on the &quot;YoastHowToBlock&quot; block */
  minutes?: Maybe<Scalars['String']['output']>;
  /** The &quot;steps&quot; field on the &quot;YoastHowToBlock&quot; block */
  steps?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;unorderedList&quot; field on the &quot;YoastHowToBlock&quot; block */
  unorderedList?: Maybe<Scalars['Boolean']['output']>;
};

/** A block used for editing the site */
export type YoastSeoBreadcrumbs = EditorBlock & {
  __typename?: 'YoastSeoBreadcrumbs';
  /** The API version of the Gutenberg Block */
  apiVersion?: Maybe<Scalars['Int']['output']>;
  /** Attributes of the %s Block Type */
  attributes?: Maybe<YoastSeoBreadcrumbsAttributes>;
  /** The name of the category the Block belongs to */
  blockEditorCategoryName?: Maybe<Scalars['String']['output']>;
  /** The id of the Block */
  clientId?: Maybe<Scalars['String']['output']>;
  /** CSS Classnames to apply to the block */
  cssClassNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** The inner blocks of the Block */
  innerBlocks?: Maybe<Array<Maybe<EditorBlock>>>;
  /** Whether the block is Dynamic (server rendered) */
  isDynamic: Scalars['Boolean']['output'];
  /** The name of the block */
  name?: Maybe<Scalars['String']['output']>;
  /** The parent id of the Block */
  parentClientId?: Maybe<Scalars['String']['output']>;
  /** The rendered HTML for the block */
  renderedHtml?: Maybe<Scalars['String']['output']>;
};

/** Attributes of the %s Block Type */
export type YoastSeoBreadcrumbsAttributes = {
  __typename?: 'YoastSeoBreadcrumbsAttributes';
  /** The &quot;blockVisibility&quot; field on the &quot;YoastSeoBreadcrumbs&quot; block */
  blockVisibility?: Maybe<Scalars['BlockAttributesObject']['output']>;
  /** The &quot;className&quot; field on the &quot;YoastSeoBreadcrumbs&quot; block */
  className?: Maybe<Scalars['String']['output']>;
  /** The &quot;lock&quot; field on the &quot;YoastSeoBreadcrumbs&quot; block */
  lock?: Maybe<Scalars['BlockAttributesObject']['output']>;
};

export type AlertsFragmentFragment = { __typename?: 'CXAlert', displayPages?: Array<string | null> | null, databaseId: number, ctaButtonText?: string | null, ctaButtonUrl?: string | null, name?: string | null, message?: string | null };

export type FooterFragmentFragment = { __typename?: 'FooterSettings', footerAppIcons?: string | null, footerSocialIcons?: string | null };

export type NavigationMenuItemFragmentFragment = { __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null };

export type ThirdPartySettingsFragmentFragment = { __typename?: 'ThirdPartySettings', datatracEnabled?: string | null, datatracId?: string | null, gtmEnabled?: string | null, gtmId?: string | null, hotjarEnabled?: string | null, hotjarId?: string | null, personyzeDomains?: string | null, personyzeEnabled?: string | null, personyzeId?: string | null, qualtricsEnabled?: string | null, qualtricsId?: string | null, salesforceEnabled?: string | null, salesforceId?: string | null, siteimproveEnabled?: string | null, siteimproveId?: string | null, spectrumEnabled?: string | null, spectrumId?: string | null, thirdPartySettings?: string | null, wpengineAccountId?: string | null, wpengineEnvId?: string | null, wpengineToken?: string | null };

export type BlogInfoFragmentFragment = { __typename?: 'GeneralSettings', title?: string | null, description?: string | null, logo?: string | null };

export type LocationPageFragmentFragment = { __typename?: 'Location', id: string, slug?: string | null, content?: string | null, title?: string | null, locationId: number, details?: { __typename?: 'LocationDetails', zip?: string | null, state?: string | null, specialMessageType?: string | null, specialMessageTitle?: string | null, specialMessage?: string | null, specialHoursHTML?: string | null, lobbyHoursHTML?: string | null, services?: string | null, lng?: string | null, lat?: string | null, driveThruHoursHTML?: string | null, contact?: string | null, city?: string | null, address?: string | null } | null };

export type LocationSettingsFragmentFragment = { __typename?: 'LocationSettings', apiBrowserKey?: string | null, mapType?: string | null, zoomLevel?: number | null, urlLabel?: string | null, emailLabel?: string | null, phoneLabel?: string | null, streetview?: number | null, startLatlng?: string | null, startMarker?: string | null, storeMarker?: string | null, typeControl?: number | null, scrollwheel?: number | null, searchRadius?: string | null, controlPosition?: string | null, autoZoomLevel?: number | null, markerIconProps?: string | null, distanceUnit?: string | null };

export type GetLocationPageDataQueryVariables = Exact<{
  headerLocation?: InputMaybe<MenuLocationEnum>;
  footerLocation?: InputMaybe<MenuLocationEnum>;
}>;


export type GetLocationPageDataQuery = { __typename?: 'RootQuery', generalSettings?: { __typename?: 'GeneralSettings', title?: string | null, description?: string | null, logo?: string | null } | null, headerSettings?: { __typename?: 'HeaderSettings', headerUtilities?: string | null } | null, footerSettings?: { __typename?: 'FooterSettings', footerUtilities?: string | null, footerAppIcons?: string | null, footerSocialIcons?: string | null } | null, thirdPartySettings?: { __typename?: 'ThirdPartySettings', datatracEnabled?: string | null, datatracId?: string | null, gtmEnabled?: string | null, gtmId?: string | null, hotjarEnabled?: string | null, hotjarId?: string | null, personyzeDomains?: string | null, personyzeEnabled?: string | null, personyzeId?: string | null, qualtricsEnabled?: string | null, qualtricsId?: string | null, salesforceEnabled?: string | null, salesforceId?: string | null, siteimproveEnabled?: string | null, siteimproveId?: string | null, spectrumEnabled?: string | null, spectrumId?: string | null, thirdPartySettings?: string | null, wpengineAccountId?: string | null, wpengineEnvId?: string | null, wpengineToken?: string | null } | null, locationSettings?: { __typename?: 'LocationSettings', autoLocate?: number | null, startLatlng?: string | null, searchRadius?: string | null, apiBrowserKey?: string | null, mapType?: string | null, zoomLevel?: number | null, urlLabel?: string | null, streetview?: number | null, typeControl?: number | null, scrollwheel?: number | null, controlPosition?: string | null, markerIconProps?: string | null, startMarker?: string | null, storeMarker?: string | null } | null, widgetSettings?: { __typename?: 'WidgetSettings', locationsSearch?: string | null } | null, cxAlerts?: { __typename?: 'RootQueryToCXAlertConnection', edges: Array<{ __typename?: 'RootQueryToCXAlertConnectionEdge', node: { __typename?: 'CXAlert', displayPages?: Array<string | null> | null, databaseId: number, ctaButtonText?: string | null, ctaButtonUrl?: string | null, name?: string | null, message?: string | null } }> } | null, footerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null, headerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null };

export type GetSearchDataQueryVariables = Exact<{
  searchTerm: Scalars['String']['input'];
  offset: Scalars['String']['input'];
  postsPerPage: Scalars['String']['input'];
}>;


export type GetSearchDataQuery = { __typename?: 'RootQuery', searchwp?: { __typename?: 'Search', total?: string | null, results?: Array<{ __typename?: 'Post', id: string, uri?: string | null, excerpt?: string | null, categories?: { __typename?: 'PostToCategoryConnection', nodes: Array<{ __typename?: 'Category', name?: string | null, uri?: string | null }> } | null, featuredImage?: { __typename?: 'NodeWithFeaturedImageToMediaItemConnectionEdge', node: { __typename?: 'MediaItem', id: string, sourceUrl?: string | null, altText?: string | null, mediaDetails?: { __typename?: 'MediaDetails', width?: number | null, height?: number | null } | null } } | null } | null> | null } | null, generalSettings?: { __typename?: 'GeneralSettings', title?: string | null, description?: string | null, logo?: string | null } | null, headerSettings?: { __typename?: 'HeaderSettings', headerUtilities?: string | null } | null, footerSettings?: { __typename?: 'FooterSettings', footerUtilities?: string | null, footerAppIcons?: string | null, footerSocialIcons?: string | null } | null, thirdPartySettings?: { __typename?: 'ThirdPartySettings', datatracEnabled?: string | null, datatracId?: string | null, gtmEnabled?: string | null, gtmId?: string | null, hotjarEnabled?: string | null, hotjarId?: string | null, personyzeDomains?: string | null, personyzeEnabled?: string | null, personyzeId?: string | null, qualtricsEnabled?: string | null, qualtricsId?: string | null, salesforceEnabled?: string | null, salesforceId?: string | null, siteimproveEnabled?: string | null, siteimproveId?: string | null, spectrumEnabled?: string | null, spectrumId?: string | null, thirdPartySettings?: string | null, wpengineAccountId?: string | null, wpengineEnvId?: string | null, wpengineToken?: string | null } | null, cxAlerts?: { __typename?: 'RootQueryToCXAlertConnection', edges: Array<{ __typename?: 'RootQueryToCXAlertConnectionEdge', node: { __typename?: 'CXAlert', displayPages?: Array<string | null> | null, databaseId: number, ctaButtonText?: string | null, ctaButtonUrl?: string | null, name?: string | null, message?: string | null } }> } | null, footerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null, headerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null };

export type GetPostQueryVariables = Exact<{
  databaseId: Scalars['ID']['input'];
  headerLocation?: InputMaybe<MenuLocationEnum>;
  footerLocation?: InputMaybe<MenuLocationEnum>;
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type GetPostQuery = { __typename?: 'RootQuery', post?: { __typename?: 'Post', title?: string | null, content?: string | null, date?: string | null, author?: { __typename?: 'NodeWithAuthorToUserConnectionEdge', node: { __typename?: 'User', name?: string | null } } | null } | null, generalSettings?: { __typename?: 'GeneralSettings', title?: string | null, description?: string | null, logo?: string | null } | null, headerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null, footerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null };

export type GetPostsQueryVariables = Exact<{
  page?: InputMaybe<Scalars['Int']['input']>;
  headerLocation?: InputMaybe<MenuLocationEnum>;
  footerLocation?: InputMaybe<MenuLocationEnum>;
}>;


export type GetPostsQuery = { __typename?: 'RootQuery', posts?: { __typename?: 'RootQueryToPostConnection', pageInfo: { __typename?: 'RootQueryToPostConnectionPageInfo', offsetPagination?: { __typename?: 'OffsetPaginationPageInfo', total?: number | null } | null }, nodes: Array<{ __typename?: 'Post', id: string, uri?: string | null, excerpt?: string | null, categories?: { __typename?: 'PostToCategoryConnection', nodes: Array<{ __typename?: 'Category', name?: string | null, uri?: string | null }> } | null, featuredImage?: { __typename?: 'NodeWithFeaturedImageToMediaItemConnectionEdge', node: { __typename?: 'MediaItem', id: string, sourceUrl?: string | null, altText?: string | null, mediaDetails?: { __typename?: 'MediaDetails', width?: number | null, height?: number | null } | null } } | null }> } | null, generalSettings?: { __typename?: 'GeneralSettings', title?: string | null, description?: string | null, logo?: string | null } | null, headerSettings?: { __typename?: 'HeaderSettings', headerUtilities?: string | null } | null, footerSettings?: { __typename?: 'FooterSettings', footerUtilities?: string | null, footerAppIcons?: string | null, footerSocialIcons?: string | null } | null, widgetSettings?: { __typename?: 'WidgetSettings', blogtop?: string | null, blogSidebar?: string | null } | null, thirdPartySettings?: { __typename?: 'ThirdPartySettings', datatracEnabled?: string | null, datatracId?: string | null, gtmEnabled?: string | null, gtmId?: string | null, hotjarEnabled?: string | null, hotjarId?: string | null, personyzeDomains?: string | null, personyzeEnabled?: string | null, personyzeId?: string | null, qualtricsEnabled?: string | null, qualtricsId?: string | null, salesforceEnabled?: string | null, salesforceId?: string | null, siteimproveEnabled?: string | null, siteimproveId?: string | null, spectrumEnabled?: string | null, spectrumId?: string | null, thirdPartySettings?: string | null, wpengineAccountId?: string | null, wpengineEnvId?: string | null, wpengineToken?: string | null } | null, cxAlerts?: { __typename?: 'RootQueryToCXAlertConnection', edges: Array<{ __typename?: 'RootQueryToCXAlertConnectionEdge', node: { __typename?: 'CXAlert', displayPages?: Array<string | null> | null, databaseId: number, ctaButtonText?: string | null, ctaButtonUrl?: string | null, name?: string | null, message?: string | null } }> } | null, footerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null, headerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null };

export type GetCategoryPageQueryVariables = Exact<{
  uri: Scalars['String']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
  categoryName?: InputMaybe<Scalars['String']['input']>;
  headerLocation?: InputMaybe<MenuLocationEnum>;
  footerLocation?: InputMaybe<MenuLocationEnum>;
}>;


export type GetCategoryPageQuery = { __typename?: 'RootQuery', nodeByUri?: { __typename?: 'CXAlert' } | { __typename?: 'Category', name?: string | null } | { __typename?: 'Contact' } | { __typename?: 'ContentType' } | { __typename?: 'GraphqlDocument' } | { __typename?: 'Instruction' } | { __typename?: 'Linklibrary' } | { __typename?: 'Location' } | { __typename?: 'LocationCategory' } | { __typename?: 'MediaItem' } | { __typename?: 'Page' } | { __typename?: 'Post' } | { __typename?: 'PostFormat' } | { __typename?: 'Product' } | { __typename?: 'ProductName' } | { __typename?: 'Rate' } | { __typename?: 'Service' } | { __typename?: 'Step' } | { __typename?: 'Tag' } | { __typename?: 'User' } | null, posts?: { __typename?: 'RootQueryToPostConnection', pageInfo: { __typename?: 'RootQueryToPostConnectionPageInfo', offsetPagination?: { __typename?: 'OffsetPaginationPageInfo', total?: number | null } | null }, nodes: Array<{ __typename?: 'Post', id: string, uri?: string | null, excerpt?: string | null, categories?: { __typename?: 'PostToCategoryConnection', nodes: Array<{ __typename?: 'Category', name?: string | null, uri?: string | null }> } | null, featuredImage?: { __typename?: 'NodeWithFeaturedImageToMediaItemConnectionEdge', node: { __typename?: 'MediaItem', id: string, sourceUrl?: string | null, altText?: string | null, mediaDetails?: { __typename?: 'MediaDetails', width?: number | null, height?: number | null } | null } } | null }> } | null, widgetSettings?: { __typename?: 'WidgetSettings', blogtop?: string | null, blogSidebar?: string | null } | null, generalSettings?: { __typename?: 'GeneralSettings', title?: string | null, description?: string | null, logo?: string | null } | null, headerSettings?: { __typename?: 'HeaderSettings', headerUtilities?: string | null } | null, footerSettings?: { __typename?: 'FooterSettings', footerUtilities?: string | null, footerAppIcons?: string | null, footerSocialIcons?: string | null } | null, thirdPartySettings?: { __typename?: 'ThirdPartySettings', datatracEnabled?: string | null, datatracId?: string | null, gtmEnabled?: string | null, gtmId?: string | null, hotjarEnabled?: string | null, hotjarId?: string | null, personyzeDomains?: string | null, personyzeEnabled?: string | null, personyzeId?: string | null, qualtricsEnabled?: string | null, qualtricsId?: string | null, salesforceEnabled?: string | null, salesforceId?: string | null, siteimproveEnabled?: string | null, siteimproveId?: string | null, spectrumEnabled?: string | null, spectrumId?: string | null, thirdPartySettings?: string | null, wpengineAccountId?: string | null, wpengineEnvId?: string | null, wpengineToken?: string | null } | null, cxAlerts?: { __typename?: 'RootQueryToCXAlertConnection', edges: Array<{ __typename?: 'RootQueryToCXAlertConnectionEdge', node: { __typename?: 'CXAlert', displayPages?: Array<string | null> | null, databaseId: number, ctaButtonText?: string | null, ctaButtonUrl?: string | null, name?: string | null, message?: string | null } }> } | null, footerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null, headerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null };

export type GetHomePageDataQueryVariables = Exact<{
  databaseId: Scalars['ID']['input'];
  headerLocation?: InputMaybe<MenuLocationEnum>;
  footerLocation?: InputMaybe<MenuLocationEnum>;
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type GetHomePageDataQuery = { __typename?: 'RootQuery', page?: { __typename?: 'Page', title?: string | null, content?: string | null } | null, generalSettings?: { __typename?: 'GeneralSettings', title?: string | null, description?: string | null, logo?: string | null } | null, headerSettings?: { __typename?: 'HeaderSettings', headerUtilities?: string | null } | null, footerSettings?: { __typename?: 'FooterSettings', footerUtilities?: string | null, footerAppIcons?: string | null, footerSocialIcons?: string | null } | null, thirdPartySettings?: { __typename?: 'ThirdPartySettings', datatracEnabled?: string | null, datatracId?: string | null, gtmEnabled?: string | null, gtmId?: string | null, hotjarEnabled?: string | null, hotjarId?: string | null, personyzeDomains?: string | null, personyzeEnabled?: string | null, personyzeId?: string | null, qualtricsEnabled?: string | null, qualtricsId?: string | null, salesforceEnabled?: string | null, salesforceId?: string | null, siteimproveEnabled?: string | null, siteimproveId?: string | null, spectrumEnabled?: string | null, spectrumId?: string | null, thirdPartySettings?: string | null, wpengineAccountId?: string | null, wpengineEnvId?: string | null, wpengineToken?: string | null } | null, cxAlerts?: { __typename?: 'RootQueryToCXAlertConnection', edges: Array<{ __typename?: 'RootQueryToCXAlertConnectionEdge', node: { __typename?: 'CXAlert', displayPages?: Array<string | null> | null, databaseId: number, ctaButtonText?: string | null, ctaButtonUrl?: string | null, name?: string | null, message?: string | null } }> } | null, footerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null, headerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null };

export type GetPageDataQueryVariables = Exact<{
  databaseId: Scalars['ID']['input'];
  headerLocation?: InputMaybe<MenuLocationEnum>;
  footerLocation?: InputMaybe<MenuLocationEnum>;
  asPreview?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type GetPageDataQuery = { __typename?: 'RootQuery', page?: { __typename?: 'Page', title?: string | null, content?: string | null } | null, generalSettings?: { __typename?: 'GeneralSettings', title?: string | null, description?: string | null, logo?: string | null } | null, headerSettings?: { __typename?: 'HeaderSettings', headerUtilities?: string | null } | null, footerSettings?: { __typename?: 'FooterSettings', footerUtilities?: string | null, footerAppIcons?: string | null, footerSocialIcons?: string | null } | null, thirdPartySettings?: { __typename?: 'ThirdPartySettings', datatracEnabled?: string | null, datatracId?: string | null, gtmEnabled?: string | null, gtmId?: string | null, hotjarEnabled?: string | null, hotjarId?: string | null, personyzeDomains?: string | null, personyzeEnabled?: string | null, personyzeId?: string | null, qualtricsEnabled?: string | null, qualtricsId?: string | null, salesforceEnabled?: string | null, salesforceId?: string | null, siteimproveEnabled?: string | null, siteimproveId?: string | null, spectrumEnabled?: string | null, spectrumId?: string | null, thirdPartySettings?: string | null, wpengineAccountId?: string | null, wpengineEnvId?: string | null, wpengineToken?: string | null } | null, cxAlerts?: { __typename?: 'RootQueryToCXAlertConnection', edges: Array<{ __typename?: 'RootQueryToCXAlertConnectionEdge', node: { __typename?: 'CXAlert', displayPages?: Array<string | null> | null, databaseId: number, ctaButtonText?: string | null, ctaButtonUrl?: string | null, name?: string | null, message?: string | null } }> } | null, footerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null, headerMenuItems?: { __typename?: 'RootQueryToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null, childItems?: { __typename?: 'MenuItemToMenuItemConnection', nodes: Array<{ __typename?: 'MenuItem', id: string, databaseId: number, uri?: string | null, label?: string | null, cssClasses?: Array<string | null> | null, parentDatabaseId?: number | null }> } | null }> } | null }> } | null };

export type GetTagPageQueryVariables = Exact<{
  uri: Scalars['String']['input'];
  headerLocation?: InputMaybe<MenuLocationEnum>;
  footerLocation?: InputMaybe<MenuLocationEnum>;
}>;


export type GetTagPageQuery = { __typename?: 'RootQuery', nodeByUri?: { __typename?: 'CXAlert' } | { __typename?: 'Category' } | { __typename?: 'Contact' } | { __typename?: 'ContentType' } | { __typename?: 'GraphqlDocument' } | { __typename?: 'Instruction' } | { __typename?: 'Linklibrary' } | { __typename?: 'Location' } | { __typename?: 'LocationCategory' } | { __typename?: 'MediaItem' } | { __typename?: 'Page' } | { __typename?: 'Post' } | { __typename?: 'PostFormat' } | { __typename?: 'Product' } | { __typename?: 'ProductName' } | { __typename?: 'Rate' } | { __typename?: 'Service' } | { __typename?: 'Step' } | { __typename?: 'Tag', name?: string | null, posts?: { __typename?: 'TagToPostConnection', edges: Array<{ __typename?: 'TagToPostConnectionEdge', node: { __typename?: 'Post', id: string, title?: string | null, content?: string | null, date?: string | null, uri?: string | null, author?: { __typename?: 'NodeWithAuthorToUserConnectionEdge', node: { __typename?: 'User', name?: string | null } } | null } }> } | null } | { __typename?: 'User' } | null, generalSettings?: { __typename?: 'GeneralSettings', title?: string | null, description?: string | null, logo?: string | null } | null };

export const AlertsFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AlertsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CXAlert"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"displayPages"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonText"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonUrl"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"message"}}]}}]} as unknown as DocumentNode<AlertsFragmentFragment, unknown>;
export const FooterFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"FooterFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FooterSettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"footerAppIcons"}},{"kind":"Field","name":{"kind":"Name","value":"footerSocialIcons"}}]}}]} as unknown as DocumentNode<FooterFragmentFragment, unknown>;
export const NavigationMenuItemFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"NavigationMenuItemFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"MenuItem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<NavigationMenuItemFragmentFragment, unknown>;
export const ThirdPartySettingsFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ThirdPartySettingsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ThirdPartySettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"datatracEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"datatracId"}},{"kind":"Field","name":{"kind":"Name","value":"gtmEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"gtmId"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarId"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeDomains"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeId"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsId"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceId"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveId"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumId"}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineAccountId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineEnvId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineToken"}}]}}]} as unknown as DocumentNode<ThirdPartySettingsFragmentFragment, unknown>;
export const BlogInfoFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlogInfoFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GeneralSettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"logo"}}]}}]} as unknown as DocumentNode<BlogInfoFragmentFragment, unknown>;
export const LocationPageFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"LocationPageFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Location"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"format"},"value":{"kind":"EnumValue","value":"RENDERED"}}]},{"kind":"Field","name":{"kind":"Name","value":"title"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"format"},"value":{"kind":"EnumValue","value":"RENDERED"}}]},{"kind":"Field","name":{"kind":"Name","value":"locationId"}},{"kind":"Field","name":{"kind":"Name","value":"details"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"zip"}},{"kind":"Field","name":{"kind":"Name","value":"state"}},{"kind":"Field","name":{"kind":"Name","value":"specialMessageType"}},{"kind":"Field","name":{"kind":"Name","value":"specialMessageTitle"}},{"kind":"Field","name":{"kind":"Name","value":"specialMessage"}},{"kind":"Field","name":{"kind":"Name","value":"specialHoursHTML"}},{"kind":"Field","name":{"kind":"Name","value":"lobbyHoursHTML"}},{"kind":"Field","name":{"kind":"Name","value":"services"}},{"kind":"Field","name":{"kind":"Name","value":"lng"}},{"kind":"Field","name":{"kind":"Name","value":"lat"}},{"kind":"Field","name":{"kind":"Name","value":"driveThruHoursHTML"}},{"kind":"Field","name":{"kind":"Name","value":"contact"}},{"kind":"Field","name":{"kind":"Name","value":"city"}},{"kind":"Field","name":{"kind":"Name","value":"address"}}]}}]}}]} as unknown as DocumentNode<LocationPageFragmentFragment, unknown>;
export const LocationSettingsFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"LocationSettingsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"LocationSettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"apiBrowserKey"}},{"kind":"Field","name":{"kind":"Name","value":"mapType"}},{"kind":"Field","name":{"kind":"Name","value":"zoomLevel"}},{"kind":"Field","name":{"kind":"Name","value":"urlLabel"}},{"kind":"Field","name":{"kind":"Name","value":"emailLabel"}},{"kind":"Field","name":{"kind":"Name","value":"phoneLabel"}},{"kind":"Field","name":{"kind":"Name","value":"streetview"}},{"kind":"Field","name":{"kind":"Name","value":"startLatlng"}},{"kind":"Field","name":{"kind":"Name","value":"startMarker"}},{"kind":"Field","name":{"kind":"Name","value":"storeMarker"}},{"kind":"Field","name":{"kind":"Name","value":"typeControl"}},{"kind":"Field","name":{"kind":"Name","value":"scrollwheel"}},{"kind":"Field","name":{"kind":"Name","value":"searchRadius"}},{"kind":"Field","name":{"kind":"Name","value":"controlPosition"}},{"kind":"Field","name":{"kind":"Name","value":"autoZoomLevel"}},{"kind":"Field","name":{"kind":"Name","value":"markerIconProps"}},{"kind":"Field","name":{"kind":"Name","value":"distanceUnit"}}]}}]} as unknown as DocumentNode<LocationSettingsFragmentFragment, unknown>;
export const GetLocationPageDataDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetLocationPageData"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"generalSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlogInfoFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"headerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"headerUtilities"}}]}},{"kind":"Field","name":{"kind":"Name","value":"footerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"footerUtilities"}},{"kind":"Field","name":{"kind":"Name","value":"footerAppIcons"}},{"kind":"Field","name":{"kind":"Name","value":"footerSocialIcons"}}]}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ThirdPartySettingsFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"locationSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"autoLocate"}},{"kind":"Field","name":{"kind":"Name","value":"startLatlng"}},{"kind":"Field","name":{"kind":"Name","value":"searchRadius"}},{"kind":"Field","name":{"kind":"Name","value":"apiBrowserKey"}},{"kind":"Field","name":{"kind":"Name","value":"mapType"}},{"kind":"Field","name":{"kind":"Name","value":"zoomLevel"}},{"kind":"Field","name":{"kind":"Name","value":"urlLabel"}},{"kind":"Field","name":{"kind":"Name","value":"streetview"}},{"kind":"Field","name":{"kind":"Name","value":"startLatlng"}},{"kind":"Field","name":{"kind":"Name","value":"typeControl"}},{"kind":"Field","name":{"kind":"Name","value":"scrollwheel"}},{"kind":"Field","name":{"kind":"Name","value":"controlPosition"}},{"kind":"Field","name":{"kind":"Name","value":"markerIconProps"}},{"kind":"Field","name":{"kind":"Name","value":"startMarker"}},{"kind":"Field","name":{"kind":"Name","value":"storeMarker"}}]}},{"kind":"Field","name":{"kind":"Name","value":"widgetSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"locationsSearch"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"cxAlerts"},"name":{"kind":"Name","value":"cXAlerts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AlertsFragment"}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"footerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"headerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlogInfoFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GeneralSettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"logo"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ThirdPartySettingsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ThirdPartySettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"datatracEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"datatracId"}},{"kind":"Field","name":{"kind":"Name","value":"gtmEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"gtmId"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarId"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeDomains"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeId"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsId"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceId"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveId"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumId"}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineAccountId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineEnvId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineToken"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AlertsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CXAlert"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"displayPages"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonText"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonUrl"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"message"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"NavigationMenuItemFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"MenuItem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetLocationPageDataQuery, GetLocationPageDataQueryVariables>;
export const GetSearchDataDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSearchData"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"searchTerm"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"postsPerPage"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"searchwp"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"postsPerPage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"postsPerPage"}}},{"kind":"Argument","name":{"kind":"Name","value":"terms"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchTerm"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"results"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"excerpt"}},{"kind":"Field","name":{"kind":"Name","value":"categories"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"featuredImage"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"sourceUrl"}},{"kind":"Field","name":{"kind":"Name","value":"altText"}},{"kind":"Field","name":{"kind":"Name","value":"mediaDetails"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"total"}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlogInfoFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"headerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"headerUtilities"}}]}},{"kind":"Field","name":{"kind":"Name","value":"footerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"footerUtilities"}},{"kind":"Field","name":{"kind":"Name","value":"footerAppIcons"}},{"kind":"Field","name":{"kind":"Name","value":"footerSocialIcons"}}]}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ThirdPartySettingsFragment"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"cxAlerts"},"name":{"kind":"Name","value":"cXAlerts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AlertsFragment"}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"footerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"EnumValue","value":"PRIMARY"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"headerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"EnumValue","value":"FOOTER"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlogInfoFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GeneralSettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"logo"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ThirdPartySettingsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ThirdPartySettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"datatracEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"datatracId"}},{"kind":"Field","name":{"kind":"Name","value":"gtmEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"gtmId"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarId"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeDomains"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeId"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsId"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceId"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveId"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumId"}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineAccountId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineEnvId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineToken"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AlertsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CXAlert"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"displayPages"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonText"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonUrl"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"message"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"NavigationMenuItemFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"MenuItem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetSearchDataQuery, GetSearchDataQueryVariables>;
export const GetPostDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPost"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"databaseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"asPreview"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"post"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"databaseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"idType"},"value":{"kind":"EnumValue","value":"DATABASE_ID"}},{"kind":"Argument","name":{"kind":"Name","value":"asPreview"},"value":{"kind":"Variable","name":{"kind":"Name","value":"asPreview"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"author"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlogInfoFragment"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"headerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"footerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlogInfoFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GeneralSettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"logo"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"NavigationMenuItemFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"MenuItem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetPostQuery, GetPostQueryVariables>;
export const GetPostsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPosts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"page"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"posts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"offsetPagination"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"page"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"size"},"value":{"kind":"IntValue","value":"5"}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"offsetPagination"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"excerpt"}},{"kind":"Field","name":{"kind":"Name","value":"categories"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"featuredImage"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"sourceUrl"}},{"kind":"Field","name":{"kind":"Name","value":"altText"}},{"kind":"Field","name":{"kind":"Name","value":"mediaDetails"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}}]}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlogInfoFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"headerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"headerUtilities"}}]}},{"kind":"Field","name":{"kind":"Name","value":"footerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"footerUtilities"}},{"kind":"Field","name":{"kind":"Name","value":"footerAppIcons"}},{"kind":"Field","name":{"kind":"Name","value":"footerSocialIcons"}}]}},{"kind":"Field","name":{"kind":"Name","value":"widgetSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blogtop"}},{"kind":"Field","name":{"kind":"Name","value":"blogSidebar"}}]}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ThirdPartySettingsFragment"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"cxAlerts"},"name":{"kind":"Name","value":"cXAlerts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AlertsFragment"}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"footerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"headerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlogInfoFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GeneralSettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"logo"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ThirdPartySettingsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ThirdPartySettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"datatracEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"datatracId"}},{"kind":"Field","name":{"kind":"Name","value":"gtmEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"gtmId"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarId"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeDomains"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeId"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsId"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceId"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveId"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumId"}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineAccountId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineEnvId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineToken"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AlertsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CXAlert"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"displayPages"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonText"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonUrl"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"message"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"NavigationMenuItemFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"MenuItem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetPostsQuery, GetPostsQueryVariables>;
export const GetCategoryPageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCategoryPage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"uri"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"page"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"categoryName"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodeByUri"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"uri"},"value":{"kind":"Variable","name":{"kind":"Name","value":"uri"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Category"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"posts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"offsetPagination"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"page"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"size"},"value":{"kind":"IntValue","value":"5"}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"categoryName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"categoryName"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"offsetPagination"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"excerpt"}},{"kind":"Field","name":{"kind":"Name","value":"categories"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"featuredImage"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"sourceUrl"}},{"kind":"Field","name":{"kind":"Name","value":"altText"}},{"kind":"Field","name":{"kind":"Name","value":"mediaDetails"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}}]}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"widgetSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blogtop"}},{"kind":"Field","name":{"kind":"Name","value":"blogSidebar"}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlogInfoFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"headerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"headerUtilities"}}]}},{"kind":"Field","name":{"kind":"Name","value":"footerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"footerUtilities"}},{"kind":"Field","name":{"kind":"Name","value":"footerAppIcons"}},{"kind":"Field","name":{"kind":"Name","value":"footerSocialIcons"}}]}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ThirdPartySettingsFragment"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"cxAlerts"},"name":{"kind":"Name","value":"cXAlerts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AlertsFragment"}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"footerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"headerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlogInfoFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GeneralSettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"logo"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ThirdPartySettingsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ThirdPartySettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"datatracEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"datatracId"}},{"kind":"Field","name":{"kind":"Name","value":"gtmEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"gtmId"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarId"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeDomains"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeId"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsId"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceId"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveId"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumId"}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineAccountId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineEnvId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineToken"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AlertsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CXAlert"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"displayPages"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonText"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonUrl"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"message"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"NavigationMenuItemFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"MenuItem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetCategoryPageQuery, GetCategoryPageQueryVariables>;
export const GetHomePageDataDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetHomePageData"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"databaseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"asPreview"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"page"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"databaseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"idType"},"value":{"kind":"EnumValue","value":"DATABASE_ID"}},{"kind":"Argument","name":{"kind":"Name","value":"asPreview"},"value":{"kind":"Variable","name":{"kind":"Name","value":"asPreview"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlogInfoFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"headerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"headerUtilities"}}]}},{"kind":"Field","name":{"kind":"Name","value":"footerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"footerUtilities"}},{"kind":"Field","name":{"kind":"Name","value":"footerAppIcons"}},{"kind":"Field","name":{"kind":"Name","value":"footerSocialIcons"}}]}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ThirdPartySettingsFragment"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"cxAlerts"},"name":{"kind":"Name","value":"cXAlerts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AlertsFragment"}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"footerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"headerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlogInfoFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GeneralSettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"logo"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ThirdPartySettingsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ThirdPartySettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"datatracEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"datatracId"}},{"kind":"Field","name":{"kind":"Name","value":"gtmEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"gtmId"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarId"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeDomains"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeId"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsId"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceId"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveId"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumId"}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineAccountId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineEnvId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineToken"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AlertsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CXAlert"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"displayPages"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonText"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonUrl"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"message"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"NavigationMenuItemFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"MenuItem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetHomePageDataQuery, GetHomePageDataQueryVariables>;
export const GetPageDataDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPageData"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"databaseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"asPreview"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"page"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"databaseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"idType"},"value":{"kind":"EnumValue","value":"DATABASE_ID"}},{"kind":"Argument","name":{"kind":"Name","value":"asPreview"},"value":{"kind":"Variable","name":{"kind":"Name","value":"asPreview"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlogInfoFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"headerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"headerUtilities"}}]}},{"kind":"Field","name":{"kind":"Name","value":"footerSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"footerUtilities"}},{"kind":"Field","name":{"kind":"Name","value":"footerAppIcons"}},{"kind":"Field","name":{"kind":"Name","value":"footerSocialIcons"}}]}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ThirdPartySettingsFragment"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"cxAlerts"},"name":{"kind":"Name","value":"cXAlerts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AlertsFragment"}}]}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"footerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}},{"kind":"Field","alias":{"kind":"Name","value":"headerMenuItems"},"name":{"kind":"Name","value":"menuItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"255"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"NavigationMenuItemFragment"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlogInfoFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GeneralSettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"logo"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ThirdPartySettingsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ThirdPartySettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"datatracEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"datatracId"}},{"kind":"Field","name":{"kind":"Name","value":"gtmEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"gtmId"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"hotjarId"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeDomains"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"personyzeId"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"qualtricsId"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"salesforceId"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"siteimproveId"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"spectrumId"}},{"kind":"Field","name":{"kind":"Name","value":"thirdPartySettings"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineAccountId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineEnvId"}},{"kind":"Field","name":{"kind":"Name","value":"wpengineToken"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AlertsFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CXAlert"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"displayPages"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonText"}},{"kind":"Field","name":{"kind":"Name","value":"ctaButtonUrl"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"message"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"NavigationMenuItemFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"MenuItem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}},{"kind":"Field","name":{"kind":"Name","value":"childItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"cssClasses"}},{"kind":"Field","name":{"kind":"Name","value":"parentDatabaseId"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetPageDataQuery, GetPageDataQueryVariables>;
export const GetTagPageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetTagPage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"uri"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"headerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"footerLocation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MenuLocationEnum"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodeByUri"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"uri"},"value":{"kind":"Variable","name":{"kind":"Name","value":"uri"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Tag"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"posts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"uri"}},{"kind":"Field","name":{"kind":"Name","value":"author"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlogInfoFragment"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlogInfoFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"GeneralSettings"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"logo"}}]}}]} as unknown as DocumentNode<GetTagPageQuery, GetTagPageQueryVariables>;